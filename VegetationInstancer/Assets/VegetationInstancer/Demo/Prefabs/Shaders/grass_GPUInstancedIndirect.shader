Shader "GPUInstancedIndirect/Shader Graphs/TerrainGrass"
{
    Properties
    {
        [NoScaleOffset]Texture2D_E1B0D043("Base Map", 2D) = "white" {}
        [Normal][NoScaleOffset]Texture2D_9DCAAA49("Normal Map", 2D) = "bump" {}
        Vector1_a6983181c8dc4691ba6a28a34c4223a6("Normal Scale", Range(0, 5)) = 1
        [NoScaleOffset]Texture2D_A5E0646("Mask Map", 2D) = "white" {}
        Vector1_8651797e3e304e108dbd25f9d5a426ba("Smoothness Scale", Range(0, 1)) = 0.5
        Vector1_593c5cea6c4a42e993ed03ced4685732("AO Scale", Range(0, 4)) = 0.5
        [NoScaleOffset]Texture2D_8713F080("Thickness Map", 2D) = "white" {}
        _Thickness_Remap("Thickness Remap", Vector) = (0, 1, 0, 0)
        Vector1_a5b8b09028ce49a39f4d090894c89e22("Alpha Clip Threshold", Range(0, 1)) = 0.5
        _FadeBias("FadeBias", Float) = 1
        Distance_Fade_Start("Distance Fade Start", Float) = 40
        Distance_Fade_End("Distance Fade End", Float) = 150
        Fade_Color("Fade Color", Color) = (0, 0, 0, 0)
        Animation_Cutoff("Animation Cutoff", Float) = 100
        Wind_Speed("Wind Speed", Float) = 5
        Wind_Intensity("Wind Intensity", Float) = 0.1
        Wind_Turbulence("Wind Turbulence", Float) = 0
        Wind_Wavelength("Wind Wavelength", Float) = 10
        Wind_Blast("Wind Blast", Float) = 0.05
        Wind_Ripples("Wind Ripples", Float) = 0.05
        Wind_Yaw("Wind Yaw", Float) = 180
        [HideInInspector]_DiffusionProfileHash("Float", Float) = 0
        [HideInInspector]_DiffusionProfileAsset("Vector4", Vector) = (0, 0, 0, 0)
        [NonModifiableTextureData][NoScaleOffset]_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D("Texture2D", 2D) = "white" {}
        [HideInInspector]_EmissionColor("Color", Color) = (1, 1, 1, 1)
        [HideInInspector]_RenderQueueType("Float", Float) = 1
        [HideInInspector][ToggleUI]_AddPrecomputedVelocity("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_DepthOffsetEnable("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_ConservativeDepthOffsetEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_TransparentWritingMotionVec("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_AlphaCutoffEnable("Boolean", Float) = 1
        [HideInInspector]_TransparentSortPriority("_TransparentSortPriority", Float) = 0
        [HideInInspector][ToggleUI]_UseShadowThreshold("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_DoubleSidedEnable("Boolean", Float) = 1
        [HideInInspector][Enum(Flip, 0, Mirror, 1, None, 2)]_DoubleSidedNormalMode("Float", Float) = 1
        [HideInInspector]_DoubleSidedConstants("Vector4", Vector) = (1, 1, -1, 0)
        [HideInInspector][Enum(Auto, 0, On, 1, Off, 2)]_DoubleSidedGIMode("Float", Float) = 0
        [HideInInspector][ToggleUI]_TransparentDepthPrepassEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_TransparentDepthPostpassEnable("Boolean", Float) = 0
        [HideInInspector]_SurfaceType("Float", Float) = 0
        [HideInInspector]_BlendMode("Float", Float) = 0
        [HideInInspector]_SrcBlend("Float", Float) = 1
        [HideInInspector]_DstBlend("Float", Float) = 0
        [HideInInspector]_AlphaSrcBlend("Float", Float) = 1
        [HideInInspector]_AlphaDstBlend("Float", Float) = 0
        [HideInInspector][ToggleUI]_ZWrite("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_TransparentZWrite("Boolean", Float) = 0
        [HideInInspector]_CullMode("Float", Float) = 2
        [HideInInspector][ToggleUI]_EnableFogOnTransparent("Boolean", Float) = 1
        [HideInInspector]_CullModeForward("Float", Float) = 2
        [HideInInspector][Enum(Front, 1, Back, 2)]_TransparentCullMode("Float", Float) = 2
        [HideInInspector][Enum(UnityEditor.Rendering.HighDefinition.OpaqueCullMode)]_OpaqueCullMode("Float", Float) = 2
        [HideInInspector]_ZTestDepthEqualForOpaque("Float", Int) = 3
        [HideInInspector][Enum(UnityEngine.Rendering.CompareFunction)]_ZTestTransparent("Float", Float) = 4
        [HideInInspector][ToggleUI]_TransparentBackfaceEnable("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_RequireSplitLighting("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ReceivesSSR("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_ReceivesSSRTransparent("Boolean", Float) = 0
        [HideInInspector][ToggleUI]_EnableBlendModePreserveSpecularLighting("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_SupportDecals("Boolean", Float) = 0
        [HideInInspector]_StencilRef("Float", Int) = 0
        [HideInInspector]_StencilWriteMask("Float", Int) = 6
        [HideInInspector]_StencilRefDepth("Float", Int) = 0
        [HideInInspector]_StencilWriteMaskDepth("Float", Int) = 9
        [HideInInspector]_StencilRefMV("Float", Int) = 32
        [HideInInspector]_StencilWriteMaskMV("Float", Int) = 41
        [HideInInspector]_StencilRefDistortionVec("Float", Int) = 4
        [HideInInspector]_StencilWriteMaskDistortionVec("Float", Int) = 4
        [HideInInspector]_StencilWriteMaskGBuffer("Float", Int) = 15
        [HideInInspector]_StencilRefGBuffer("Float", Int) = 2
        [HideInInspector]_ZTestGBuffer("Float", Int) = 4
        [HideInInspector][ToggleUI]_RayTracing("Boolean", Float) = 0
        [HideInInspector][Enum(None, 0, Planar, 1, Sphere, 2, Thin, 3)]_RefractionModel("Float", Float) = 0
        [HideInInspector][NoScaleOffset]unity_Lightmaps("unity_Lightmaps", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset]unity_LightmapsInd("unity_LightmapsInd", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset]unity_ShadowMasks("unity_ShadowMasks", 2DArray) = "" {}
    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="HDRenderPipeline"
            "RenderType"="HDLitShader"
            "Queue"="AlphaTest+0"
            "DisableBatching"="False"
            "ShaderGraphShader"="true"
            "ShaderGraphTargetId"="HDLitSubTarget"
        }
        Pass
        {
            Name "ShadowCaster"
            Tags
            {
                "LightMode" = "ShadowCaster"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        ColorMask 0
        ZClip [_ZClip]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DEPTHOFFSET_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma multi_compile MATERIAL_QUALITY_HIGH MATERIAL_QUALITY_MEDIUM MATERIAL_QUALITY_LOW
        
        #if defined(MATERIAL_QUALITY_HIGH)
            #define KEYWORD_PERMUTATION_0
        #elif defined(MATERIAL_QUALITY_MEDIUM)
            #define KEYWORD_PERMUTATION_1
        #else
            #define KEYWORD_PERMUTATION_2
        #endif
        
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float1 Dither;
        float1 Falloff;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_SHADOWS
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D_TexelSize;
        float4 Texture2D_E1B0D043_TexelSize;
        float Vector1_a5b8b09028ce49a39f4d090894c89e22;
        float4 Texture2D_9DCAAA49_TexelSize;
        float Vector1_a6983181c8dc4691ba6a28a34c4223a6;
        float4 Texture2D_A5E0646_TexelSize;
        float Vector1_8651797e3e304e108dbd25f9d5a426ba;
        float Vector1_593c5cea6c4a42e993ed03ced4685732;
        float4 Texture2D_8713F080_TexelSize;
        float Wind_Yaw;
        float Wind_Turbulence;
        float Wind_Wavelength;
        float Wind_Speed;
        float Wind_Ripples;
        float Wind_Intensity;
        float Wind_Blast;
        float Animation_Cutoff;
        float Distance_Fade_End;
        float Distance_Fade_Start;
        float4 Fade_Color;
        float _FadeBias;
        float2 _Thickness_Remap;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Point_Repeat);
        TEXTURE2D(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        SAMPLER(sampler_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        TEXTURE2D(Texture2D_E1B0D043);
        SAMPLER(samplerTexture2D_E1B0D043);
        TEXTURE2D(Texture2D_9DCAAA49);
        SAMPLER(samplerTexture2D_9DCAAA49);
        TEXTURE2D(Texture2D_A5E0646);
        SAMPLER(samplerTexture2D_A5E0646);
        TEXTURE2D(Texture2D_8713F080);
        SAMPLER(samplerTexture2D_8713F080);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0 : TEXCOORD0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1 : TEXCOORD1;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TimeParameters;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 NDCPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 PixelPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0 : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_positionRWS_Dither : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float1 Falloff : INTERP2;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.texCoord0.xyzw = input.texCoord0;
            output.packed_positionRWS_Dither.xyz = input.positionRWS;
            output.packed_positionRWS_Dither.w = input.Dither;
            output.Falloff.x = input.Falloff;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.packed_positionRWS_Dither.xyz;
            output.Dither = input.packed_positionRWS_Dither.w;
            output.Falloff = input.Falloff.x;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            Rotation = radians(Rotation);
        
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void SimpleHash_float(float3 in_position, float seed, out float out_hash){
        uint X = asuint(in_position.x);
        
        uint Y = asuint(in_position.y);
        uint Z = asuint(in_position.z);
        
        uint H = X ^ 2747636419u;
        H *= 2654435769u;
        
        H >> 16;
        
        H *= 2654435769u;
        
        H ^= H >> 16;
        
        H *= 2654435769u;
        H ^= Y;
        H ^= Z;
        
        out_hash = asfloat(H / 4294967295.0);
        }
        
        struct Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float
        {
        };
        
        void SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(float Vector1_3b97c5182780489686cf16f9de4a9ade, Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float IN, out float out_frac_3)
        {
        float _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float = Vector1_3b97c5182780489686cf16f9de4a9ade;
        float _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        SimpleHash_float(SHADERGRAPH_OBJECT_POSITION, _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float, _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float);
        out_frac_3 = _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_CrossProduct_float(float3 A, float3 B, out float3 Out)
        {
            Out = cross(A, B);
        }
        
        void Unity_MatrixConstruction_Row_float (float4 M0, float4 M1, float4 M2, float4 M3, out float4x4 Out4x4, out float3x3 Out3x3, out float2x2 Out2x2)
        {
        Out4x4 = float4x4(M0.x, M0.y, M0.z, M0.w, M1.x, M1.y, M1.z, M1.w, M2.x, M2.y, M2.z, M2.w, M3.x, M3.y, M3.z, M3.w);
        Out3x3 = float3x3(M0.x, M0.y, M0.z, M1.x, M1.y, M1.z, M2.x, M2.y, M2.z);
        Out2x2 = float2x2(M0.x, M0.y, M1.x, M1.y);
        }
        
        void Unity_MatrixTranspose_float4x4(float4x4 In, out float4x4 Out)
        {
            Out = transpose(In);
        }
        
        void Unity_Multiply_float4x4_float4(float4x4 A, float4 B, out float4 Out)
        {
        Out = mul(A, B);
        }
        
        void Unity_Cosine_float(float In, out float Out)
        {
            Out = cos(In);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        struct Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float
        {
        float3 TimeParameters;
        };
        
        void SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(float3 Vector3_cd634a1fd8b749e3b0069b61d35a0614, float Vector1_26f01b8484ed48b3878989067150a580, float Vector1_92a32c418a3740aa9fff1cce06eeb97b, float Vector1_dd02a05593804ec68a8b3cbeb2abb926, float Vector1_17f0b423235f4212be9932a8f400b82e, float Vector1_caec47aa96ad4f4890a1197c25550285, Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float IN, out float phase_2)
        {
        float _Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float3 _Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3 = Vector3_cd634a1fd8b749e3b0069b61d35a0614;
        float3 _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3;
        Unity_Normalize_float3(_Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3, _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3);
        float _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float;
        Unity_Divide_float(1, _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float, _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float);
        float3 _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3, (_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3);
        float3 _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3 = float3(0, 1, 0);
        float3 _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3;
        Unity_Multiply_float3_float3((_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3);
        float3 _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3;
        Unity_CrossProduct_float(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3);
        float4x4 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4;
        float3x3 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3;
        float2x2 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2;
        Unity_MatrixConstruction_Row_float((float4(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, 1.0)), (float4(_Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, 1.0)), (float4(_CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3, 1.0)), float4 (0, 0, 0, 0), _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2);
        float4x4 _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4;
        Unity_MatrixTranspose_float4x4(_MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4);
        float4 _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4;
        Unity_Multiply_float4x4_float4(_MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4, (float4(SHADERGRAPH_OBJECT_POSITION, 1.0)), _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4);
        float _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[0];
        float _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[1];
        float _Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[2];
        float _Split_5a8651da50df48e8987e8d47412fb48b_A_4_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[3];
        float _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float;
        Unity_Add_float(_Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float, _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float, _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float);
        float _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float;
        Unity_Multiply_float_float(_Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float, _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float, _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float);
        float _Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float = Vector1_17f0b423235f4212be9932a8f400b82e;
        float _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float;
        Unity_Add_float(IN.TimeParameters.x, _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float);
        float _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float;
        Unity_Multiply_float_float(_Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float, _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float);
        float _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float;
        Unity_Divide_float(_Multiply_04af88773f75489fb7415006600bb138_Out_2_Float, _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float);
        float _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float = Vector1_caec47aa96ad4f4890a1197c25550285;
        float _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float;
        Unity_Multiply_float_float(_Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float);
        float _Add_8c99726882e64af685d2bf089a894747_Out_2_Float;
        Unity_Add_float(_Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float, _Add_8c99726882e64af685d2bf089a894747_Out_2_Float);
        float _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float;
        Unity_Cosine_float(_Add_8c99726882e64af685d2bf089a894747_Out_2_Float, _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float);
        float _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float;
        Unity_Multiply_float_float(_Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float, _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float, _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float);
        float _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float;
        Unity_Add_float(_Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float, _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float);
        float _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float;
        Unity_Add_float(_Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float, _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float);
        float _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float;
        Unity_Add_float(_Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float);
        float _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float;
        Unity_Sine_float(_Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float, _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float);
        float _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float;
        Unity_Multiply_float_float(_Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float, 0.5, _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float);
        float _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        Unity_Add_float(_Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float, 0.5, _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float);
        phase_2 = _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        }
        
        struct Bindings_Wind_43040687acbef31438764c0a962e143f_float
        {
        half4 uv1;
        float3 TimeParameters;
        };
        
        void SG_Wind_43040687acbef31438764c0a962e143f_float(float _Wind_Blast, float _Wind_Yaw, float _Wind_Intensity, float _Wind_Wavelength, float _Wind_Turbulence, float _Wind_Ripples, float _Wind_Speed, Bindings_Wind_43040687acbef31438764c0a962e143f_float IN, out float3 OutVector3_1, out float OutVector1_2, out float OutVector11_3)
        {
        float _Property_545764affa024cbea7972042aa59989c_Out_0_Float = _Wind_Yaw;
        float3 _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (0, 0, 1), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3);
        float3 _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3 = TransformWorldToObjectDir(_RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3.xyz, true);
        float _Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float = _Wind_Intensity;
        Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b;
        float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(999, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float);
        float _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float);
        float _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float;
        Unity_Multiply_float_float(_Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float, 0.125, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float);
        float _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float;
        Unity_Add_float(_Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float, _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float);
        float4 _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4 = IN.uv1;
        float _Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4.y;
        float _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float);
        float _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float = 0.5;
        float _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float;
        Unity_Add_float(_Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float, _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float, _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float);
        float _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float;
        Unity_Clamp_float(_Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float, 0.1, 16, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float);
        float _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float;
        Unity_Power_float(_Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float, _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float);
        float3 _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (1, 0, 0), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3);
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[0];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_G_2_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[1];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_B_3_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[2];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_A_4_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[3];
        float _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float;
        Unity_Multiply_float_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 1, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float);
        float _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float;
        Unity_Add_float(_Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float);
        float _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float = _Wind_Turbulence;
        float _Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float = _Wind_Wavelength;
        float _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float;
        Unity_Clamp_float(_Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float, 0.001, 10000, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float);
        float _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float = _Wind_Speed;
        float _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float;
        Unity_Multiply_float_float(_Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float);
        float _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float = _Wind_Ripples;
        Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212;
        _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212.TimeParameters = IN.TimeParameters;
        float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float;
        SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(_RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float, _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float, _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float);
        float _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float;
        Unity_Multiply_float_float(_Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float);
        float _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float;
        Unity_Multiply_float_float(_Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float, _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float);
        float _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float = _Wind_Blast;
        float _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        Unity_Add_float(_Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float, _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float, _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float);
        OutVector3_1 = _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        OutVector1_2 = _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        OutVector11_3 = _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        }
        
        void Unity_Distance_float3(float3 A, float3 B, out float Out)
        {
            Out = distance(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        struct Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float
        {
        };
        
        void SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(float Vector1_e557ca4994a347ffa4c827936e25216c, float Vector1_09637ae9919547d78bb477f8aebeaf5e, float Vector1_0f7cf1aa48e34bc0a680792872e719c1, float dither_scale, Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float IN, out float out_movement_1, out float out_fade_2, out float out_dither_3, out float out_falloff_4)
        {
        float _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float;
        Unity_Distance_float3(_WorldSpaceCameraPos, SHADERGRAPH_OBJECT_POSITION, _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float);
        float _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float = Vector1_e557ca4994a347ffa4c827936e25216c;
        float _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float, _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float);
        float _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        Unity_Saturate_float(_Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float, _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float);
        float _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float;
        Unity_Subtract_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float);
        float _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float;
        Unity_Maximum_float(0, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float, _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float);
        float _Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float;
        Unity_Subtract_float(_Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float, _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float);
        float _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float;
        Unity_Divide_float(_Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float, _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float);
        float _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        Unity_Saturate_float(_Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float, _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float);
        float _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float;
        Unity_OneMinus_float(_Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float, _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float);
        float _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float = dither_scale;
        float _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        Unity_Multiply_float_float(_OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float, _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float, _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float);
        float _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float, _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float);
        float _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        Unity_Saturate_float(_Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float, _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float);
        out_movement_1 = _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        out_fade_2 = _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        out_dither_3 = _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        out_falloff_4 = _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        }
        
        void Unity_Comparison_Less_float(float A, float B, out float Out)
        {
            Out = A < B ? 1 : 0;
        }
        
        void Unity_Rotate_About_Axis_Radians_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Preview_float(float In, out float Out)
        {
            Out = In;
        }
        
        void Unity_Dither_float(float In, float4 ScreenPosition, out float Out)
        {
            float2 uv = ScreenPosition.xy * _ScreenParams.xy;
            float DITHER_THRESHOLDS[16] =
            {
                1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
                13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
                4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
                16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
            };
            uint index = (uint(uv.x) % 4) * 4 + uint(uv.y) % 4;
            Out = In - DITHER_THRESHOLDS[index];
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float Dither;
            float Falloff;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float = Animation_Cutoff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float = Distance_Fade_End;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3a7e846478af4588abee730e138b7600_Out_0_Float = Distance_Fade_Start;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float = Wind_Blast;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float = Wind_Yaw;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float = Wind_Intensity;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float = Wind_Wavelength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float = Wind_Turbulence;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float = Wind_Ripples;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float = Wind_Speed;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_Wind_43040687acbef31438764c0a962e143f_float _Wind_38a1f9a8cd4543e7af23af6f67466e88;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.uv1 = IN.uv1;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.TimeParameters = IN.TimeParameters;
            float3 _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float;
            SG_Wind_43040687acbef31438764c0a962e143f_float(_Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float, _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float, _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float, _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float, _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float, _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float, _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float;
            Unity_Add_float(1, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float _DistanceCutoff_574befd6840749648d19978a8b7288cf;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(_Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float, _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float, _Property_3a7e846478af4588abee730e138b7600_Out_0_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean;
            Unity_Comparison_Less_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, 1, _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float;
            Unity_OneMinus_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float;
            Unity_Power_float(_OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float, 0.75, _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float;
            Unity_Multiply_float_float(_Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpacePosition, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            Unity_Branch_float3(_Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3, IN.ObjectSpacePosition, _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3 = float3(0, 1, 0);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float = _FadeBias;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float;
            Unity_Power_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float, _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            Unity_Lerp_float3(IN.ObjectSpaceNormal, _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3, (_Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float.xxx), _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpaceTangent, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3);
            #endif
            description.Position = _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            description.Normal = _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            description.Tangent = _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            description.Dither = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            description.Falloff = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float Alpha;
            float AlphaClipThreshold;
            float DepthOffset;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_E1B0D043);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.tex, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.samplerstate, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_R_4_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.r;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_G_5_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.g;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_B_6_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.b;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float;
            Unity_Preview_float(_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float;
            Unity_Dither_float(IN.Dither, float4(IN.NDCPosition.xy, 0, 0), _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float;
            Unity_Multiply_float_float(_Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            Unity_Lerp_float(_Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float, IN.Falloff, _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float;
            Unity_OneMinus_float(IN.Falloff, _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #else
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float = Vector1_a5b8b09028ce49a39f4d090894c89e22;
            #endif
            surface.Alpha = _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float;
            surface.AlphaClipThreshold = _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float;
            surface.DepthOffset = 0;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080305144)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv1 =                                        input.uv1;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TimeParameters =                             _TimeParameters.xyz; // Note: in case of animation this will be overwrite (allow to handle motion vector)
        #endif
        
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        vertexDescriptionInputs.TimeParameters = timeParameters;
        #endif
        
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
            varyings.Dither = vertexDescription.Dither;
        varyings.Falloff = vertexDescription.Falloff;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.Dither = input.Dither;
        output.customInterpolators.Falloff = input.Falloff;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        
        #if UNITY_UV_STARTS_AT_TOP
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #else
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.Dither = input.customInterpolators.Dither;
        output.Falloff = input.customInterpolators.Falloff;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
#include "Assets/VladislavTsurikov/RendererStack/Shaders/Include/GPUInstancedIndirectInclude.cginc"
#pragma instancing_options procedural:setupGPUInstancedIndirect
#pragma multi_compile_instancing
            ENDHLSL
        }
        Pass
        {
            Name "META"
            Tags
            {
                "LightMode" = "META"
            }
        
            // Render State
            Cull Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        
            // Keywords
            #pragma shader_feature _ EDITOR_VISUALIZATION
        #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DEPTHOFFSET_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma multi_compile MATERIAL_QUALITY_HIGH MATERIAL_QUALITY_MEDIUM MATERIAL_QUALITY_LOW
        
        #if defined(MATERIAL_QUALITY_HIGH)
            #define KEYWORD_PERMUTATION_0
        #elif defined(MATERIAL_QUALITY_MEDIUM)
            #define KEYWORD_PERMUTATION_1
        #else
            #define KEYWORD_PERMUTATION_2
        #endif
        
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD3
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_POSITIONPREDISPLACEMENT_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD3
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD3
        #endif
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_LIGHT_TRANSPORT
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SCENEPICKINGPASS 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D_TexelSize;
        float4 Texture2D_E1B0D043_TexelSize;
        float Vector1_a5b8b09028ce49a39f4d090894c89e22;
        float4 Texture2D_9DCAAA49_TexelSize;
        float Vector1_a6983181c8dc4691ba6a28a34c4223a6;
        float4 Texture2D_A5E0646_TexelSize;
        float Vector1_8651797e3e304e108dbd25f9d5a426ba;
        float Vector1_593c5cea6c4a42e993ed03ced4685732;
        float4 Texture2D_8713F080_TexelSize;
        float Wind_Yaw;
        float Wind_Turbulence;
        float Wind_Wavelength;
        float Wind_Speed;
        float Wind_Ripples;
        float Wind_Intensity;
        float Wind_Blast;
        float Animation_Cutoff;
        float Distance_Fade_End;
        float Distance_Fade_Start;
        float4 Fade_Color;
        float _FadeBias;
        float2 _Thickness_Remap;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Point_Repeat);
        TEXTURE2D(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        SAMPLER(sampler_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        TEXTURE2D(Texture2D_E1B0D043);
        SAMPLER(samplerTexture2D_E1B0D043);
        TEXTURE2D(Texture2D_9DCAAA49);
        SAMPLER(samplerTexture2D_9DCAAA49);
        TEXTURE2D(Texture2D_A5E0646);
        SAMPLER(samplerTexture2D_A5E0646);
        TEXTURE2D(Texture2D_8713F080);
        SAMPLER(samplerTexture2D_8713F080);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0 : TEXCOORD0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1 : TEXCOORD1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv2 : TEXCOORD2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv3 : TEXCOORD3;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionPredisplacementRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord3;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        struct VertexDescriptionInputs
        {
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 NDCPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 PixelPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0 : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord1 : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord2 : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord3 : INTERP3;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionRWS : INTERP4;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionPredisplacementRWS : INTERP5;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.texCoord0.xyzw = input.texCoord0;
            output.texCoord1.xyzw = input.texCoord1;
            output.texCoord2.xyzw = input.texCoord2;
            output.texCoord3.xyzw = input.texCoord3;
            output.positionRWS.xyz = input.positionRWS;
            output.positionPredisplacementRWS.xyz = input.positionPredisplacementRWS;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.texCoord0 = input.texCoord0.xyzw;
            output.texCoord1 = input.texCoord1.xyzw;
            output.texCoord2 = input.texCoord2.xyzw;
            output.texCoord3 = input.texCoord3.xyzw;
            output.positionRWS = input.positionRWS.xyz;
            output.positionPredisplacementRWS = input.positionPredisplacementRWS.xyz;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Preview_float(float In, out float Out)
        {
            Out = In;
        }
        
        void Unity_Dither_float(float In, float4 ScreenPosition, out float Out)
        {
            float2 uv = ScreenPosition.xy * _ScreenParams.xy;
            float DITHER_THRESHOLDS[16] =
            {
                1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
                13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
                4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
                16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
            };
            uint index = (uint(uv.x) % 4) * 4 + uint(uv.y) % 4;
            Out = In - DITHER_THRESHOLDS[index];
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float DepthOffset;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_E1B0D043);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.tex, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.samplerstate, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_R_4_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.r;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_G_5_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.g;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_B_6_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.b;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            Unity_Lerp_float3((_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.xyz), (float3(float4(0,0,0,0).xyz)), (float3(float4(0,0,0,0).xyz)), _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float;
            Unity_Preview_float(_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float;
            Unity_Dither_float((float1(float4(0,0,0,0).x)), float4(IN.NDCPosition.xy, 0, 0), _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float;
            Unity_Multiply_float_float(_Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            Unity_Lerp_float(_Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float, (float1(float4(0,0,0,0).x)), _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float;
            Unity_OneMinus_float((float1(float4(0,0,0,0).x)), _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #else
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float = Vector1_a5b8b09028ce49a39f4d090894c89e22;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_A5E0646);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.tex, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.samplerstate, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_R_4_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.r;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.g;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_B_6_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.b;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float = Vector1_8651797e3e304e108dbd25f9d5a426ba;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float, _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float, _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #else
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = 0;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float;
            Unity_OneMinus_float((float1(float4(0,0,0,0).x)), _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float = IN.ObjectSpacePosition.y;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float;
            Unity_Multiply_float_float(_Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float, 5, _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float;
            Unity_Saturate_float(_Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float, _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float = Vector1_593c5cea6c4a42e993ed03ced4685732;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float, _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float, _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #else
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = 1;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float;
            Unity_Minimum_float(_Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float, _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float, _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            Unity_Saturate_float(_Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float, _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_9DCAAA49);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.tex, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.samplerstate, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4);
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_R_4_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.r;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_G_5_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.g;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_B_6_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.b;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_A_7_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float = Vector1_a6983181c8dc4691ba6a28a34c4223a6;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.xyz), _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float, _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #else
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = float3(0, 0, 1);
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_8713F080);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.tex, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.samplerstate, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.r;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_G_5_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.g;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_B_6_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.b;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_A_7_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float2 _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2 = _Thickness_Remap;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float;
            Unity_Remap_float(_SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float, float2 (0, 1), _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2, _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            Unity_Lerp_float(_Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float, 1, (float1(float4(0,0,0,0).x)), _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #else
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = 0;
            #endif
            #endif
            surface.BaseColor = _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float;
            surface.AlphaClipThreshold = _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float;
            surface.DepthOffset = 0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float;
            surface.Occlusion = _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            surface.NormalTS = _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3;
            surface.TransmissionMask = 1;
            surface.Thickness = _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080305144)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVertMeshCustomInterpolation' */
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionPredisplacementRWS = input.positionPredisplacementRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.texCoord1 =                  input.texCoord1;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.texCoord2 =                  input.texCoord2;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.texCoord3 =                  input.texCoord3;
        #endif
        
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorVaryingsToFragInputs' */
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        TransformWorldToObject(input.positionRWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #else
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassLightTransport.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
#include "Assets/VladislavTsurikov/RendererStack/Shaders/Include/GPUInstancedIndirectInclude.cginc"
#pragma instancing_options procedural:setupGPUInstancedIndirect
#pragma multi_compile_instancing
            ENDHLSL
        }
        Pass
        {
            Name "ScenePickingPass"
            Tags
            {
                "LightMode" = "Picking"
            }
        
            // Render State
            Cull [_CullMode]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma editor_sync_compilation
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DEPTHOFFSET_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma multi_compile MATERIAL_QUALITY_HIGH MATERIAL_QUALITY_MEDIUM MATERIAL_QUALITY_LOW
        
        #if defined(MATERIAL_QUALITY_HIGH)
            #define KEYWORD_PERMUTATION_0
        #elif defined(MATERIAL_QUALITY_MEDIUM)
            #define KEYWORD_PERMUTATION_1
        #else
            #define KEYWORD_PERMUTATION_2
        #endif
        
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float3 TerrainColorMatch;
        float1 BiasedFade;
        float1 Dither;
        float1 Falloff;
        float1 Fade;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define SCENEPICKINGPASS 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D_TexelSize;
        float4 Texture2D_E1B0D043_TexelSize;
        float Vector1_a5b8b09028ce49a39f4d090894c89e22;
        float4 Texture2D_9DCAAA49_TexelSize;
        float Vector1_a6983181c8dc4691ba6a28a34c4223a6;
        float4 Texture2D_A5E0646_TexelSize;
        float Vector1_8651797e3e304e108dbd25f9d5a426ba;
        float Vector1_593c5cea6c4a42e993ed03ced4685732;
        float4 Texture2D_8713F080_TexelSize;
        float Wind_Yaw;
        float Wind_Turbulence;
        float Wind_Wavelength;
        float Wind_Speed;
        float Wind_Ripples;
        float Wind_Intensity;
        float Wind_Blast;
        float Animation_Cutoff;
        float Distance_Fade_End;
        float Distance_Fade_Start;
        float4 Fade_Color;
        float _FadeBias;
        float2 _Thickness_Remap;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Point_Repeat);
        TEXTURE2D(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        SAMPLER(sampler_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        TEXTURE2D(Texture2D_E1B0D043);
        SAMPLER(samplerTexture2D_E1B0D043);
        TEXTURE2D(Texture2D_9DCAAA49);
        SAMPLER(samplerTexture2D_9DCAAA49);
        TEXTURE2D(Texture2D_A5E0646);
        SAMPLER(samplerTexture2D_A5E0646);
        TEXTURE2D(Texture2D_8713F080);
        SAMPLER(samplerTexture2D_8713F080);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0 : TEXCOORD0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1 : TEXCOORD1;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 normalWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TerrainColorMatch;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float BiasedFade;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Fade;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TimeParameters;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 NDCPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 PixelPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TerrainColorMatch;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float BiasedFade;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Fade;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentWS : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0 : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_positionRWS_BiasedFade : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_normalWS_Dither : INTERP3;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_TerrainColorMatch_Falloff : INTERP4;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float1 Fade : INTERP5;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.packed_positionRWS_BiasedFade.xyz = input.positionRWS;
            output.packed_positionRWS_BiasedFade.w = input.BiasedFade;
            output.packed_normalWS_Dither.xyz = input.normalWS;
            output.packed_normalWS_Dither.w = input.Dither;
            output.packed_TerrainColorMatch_Falloff.xyz = input.TerrainColorMatch;
            output.packed_TerrainColorMatch_Falloff.w = input.Falloff;
            output.Fade.x = input.Fade;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.packed_positionRWS_BiasedFade.xyz;
            output.BiasedFade = input.packed_positionRWS_BiasedFade.w;
            output.normalWS = input.packed_normalWS_Dither.xyz;
            output.Dither = input.packed_normalWS_Dither.w;
            output.TerrainColorMatch = input.packed_TerrainColorMatch_Falloff.xyz;
            output.Falloff = input.packed_TerrainColorMatch_Falloff.w;
            output.Fade = input.Fade.x;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A - B;
        }
        
        struct Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float
        {
        };
        
        void SG_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float(float _ProjectionSize, Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float IN, out float2 UVs_1)
        {
        float _Property_aba1d09bf39d4a02bdc7905b2cde45e0_Out_0_Float = _ProjectionSize;
        float _Float_9e4d9f1bf87c48e2b380c48c15b4811a_Out_0_Float = _Property_aba1d09bf39d4a02bdc7905b2cde45e0_Out_0_Float;
        float3 _Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3;
        Unity_Divide_float3(SHADERGRAPH_OBJECT_POSITION, (_Float_9e4d9f1bf87c48e2b380c48c15b4811a_Out_0_Float.xxx), _Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3);
        float3 _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3;
        Unity_Subtract_float3(_Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3, float3(0.5, 0.5, 0.5), _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3);
        float2 _Swizzle_6f5079fa55ff48ab8d0ceea21aefa7a1_Out_1_Vector2 = _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3.xz;
        UVs_1 = _Swizzle_6f5079fa55ff48ab8d0ceea21aefa7a1_Out_1_Vector2;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            Rotation = radians(Rotation);
        
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void SimpleHash_float(float3 in_position, float seed, out float out_hash){
        uint X = asuint(in_position.x);
        
        uint Y = asuint(in_position.y);
        uint Z = asuint(in_position.z);
        
        uint H = X ^ 2747636419u;
        H *= 2654435769u;
        
        H >> 16;
        
        H *= 2654435769u;
        
        H ^= H >> 16;
        
        H *= 2654435769u;
        H ^= Y;
        H ^= Z;
        
        out_hash = asfloat(H / 4294967295.0);
        }
        
        struct Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float
        {
        };
        
        void SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(float Vector1_3b97c5182780489686cf16f9de4a9ade, Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float IN, out float out_frac_3)
        {
        float _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float = Vector1_3b97c5182780489686cf16f9de4a9ade;
        float _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        SimpleHash_float(SHADERGRAPH_OBJECT_POSITION, _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float, _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float);
        out_frac_3 = _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_CrossProduct_float(float3 A, float3 B, out float3 Out)
        {
            Out = cross(A, B);
        }
        
        void Unity_MatrixConstruction_Row_float (float4 M0, float4 M1, float4 M2, float4 M3, out float4x4 Out4x4, out float3x3 Out3x3, out float2x2 Out2x2)
        {
        Out4x4 = float4x4(M0.x, M0.y, M0.z, M0.w, M1.x, M1.y, M1.z, M1.w, M2.x, M2.y, M2.z, M2.w, M3.x, M3.y, M3.z, M3.w);
        Out3x3 = float3x3(M0.x, M0.y, M0.z, M1.x, M1.y, M1.z, M2.x, M2.y, M2.z);
        Out2x2 = float2x2(M0.x, M0.y, M1.x, M1.y);
        }
        
        void Unity_MatrixTranspose_float4x4(float4x4 In, out float4x4 Out)
        {
            Out = transpose(In);
        }
        
        void Unity_Multiply_float4x4_float4(float4x4 A, float4 B, out float4 Out)
        {
        Out = mul(A, B);
        }
        
        void Unity_Cosine_float(float In, out float Out)
        {
            Out = cos(In);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        struct Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float
        {
        float3 TimeParameters;
        };
        
        void SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(float3 Vector3_cd634a1fd8b749e3b0069b61d35a0614, float Vector1_26f01b8484ed48b3878989067150a580, float Vector1_92a32c418a3740aa9fff1cce06eeb97b, float Vector1_dd02a05593804ec68a8b3cbeb2abb926, float Vector1_17f0b423235f4212be9932a8f400b82e, float Vector1_caec47aa96ad4f4890a1197c25550285, Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float IN, out float phase_2)
        {
        float _Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float3 _Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3 = Vector3_cd634a1fd8b749e3b0069b61d35a0614;
        float3 _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3;
        Unity_Normalize_float3(_Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3, _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3);
        float _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float;
        Unity_Divide_float(1, _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float, _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float);
        float3 _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3, (_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3);
        float3 _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3 = float3(0, 1, 0);
        float3 _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3;
        Unity_Multiply_float3_float3((_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3);
        float3 _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3;
        Unity_CrossProduct_float(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3);
        float4x4 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4;
        float3x3 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3;
        float2x2 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2;
        Unity_MatrixConstruction_Row_float((float4(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, 1.0)), (float4(_Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, 1.0)), (float4(_CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3, 1.0)), float4 (0, 0, 0, 0), _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2);
        float4x4 _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4;
        Unity_MatrixTranspose_float4x4(_MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4);
        float4 _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4;
        Unity_Multiply_float4x4_float4(_MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4, (float4(SHADERGRAPH_OBJECT_POSITION, 1.0)), _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4);
        float _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[0];
        float _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[1];
        float _Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[2];
        float _Split_5a8651da50df48e8987e8d47412fb48b_A_4_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[3];
        float _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float;
        Unity_Add_float(_Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float, _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float, _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float);
        float _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float;
        Unity_Multiply_float_float(_Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float, _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float, _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float);
        float _Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float = Vector1_17f0b423235f4212be9932a8f400b82e;
        float _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float;
        Unity_Add_float(IN.TimeParameters.x, _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float);
        float _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float;
        Unity_Multiply_float_float(_Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float, _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float);
        float _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float;
        Unity_Divide_float(_Multiply_04af88773f75489fb7415006600bb138_Out_2_Float, _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float);
        float _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float = Vector1_caec47aa96ad4f4890a1197c25550285;
        float _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float;
        Unity_Multiply_float_float(_Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float);
        float _Add_8c99726882e64af685d2bf089a894747_Out_2_Float;
        Unity_Add_float(_Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float, _Add_8c99726882e64af685d2bf089a894747_Out_2_Float);
        float _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float;
        Unity_Cosine_float(_Add_8c99726882e64af685d2bf089a894747_Out_2_Float, _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float);
        float _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float;
        Unity_Multiply_float_float(_Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float, _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float, _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float);
        float _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float;
        Unity_Add_float(_Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float, _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float);
        float _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float;
        Unity_Add_float(_Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float, _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float);
        float _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float;
        Unity_Add_float(_Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float);
        float _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float;
        Unity_Sine_float(_Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float, _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float);
        float _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float;
        Unity_Multiply_float_float(_Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float, 0.5, _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float);
        float _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        Unity_Add_float(_Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float, 0.5, _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float);
        phase_2 = _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        }
        
        struct Bindings_Wind_43040687acbef31438764c0a962e143f_float
        {
        half4 uv1;
        float3 TimeParameters;
        };
        
        void SG_Wind_43040687acbef31438764c0a962e143f_float(float _Wind_Blast, float _Wind_Yaw, float _Wind_Intensity, float _Wind_Wavelength, float _Wind_Turbulence, float _Wind_Ripples, float _Wind_Speed, Bindings_Wind_43040687acbef31438764c0a962e143f_float IN, out float3 OutVector3_1, out float OutVector1_2, out float OutVector11_3)
        {
        float _Property_545764affa024cbea7972042aa59989c_Out_0_Float = _Wind_Yaw;
        float3 _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (0, 0, 1), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3);
        float3 _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3 = TransformWorldToObjectDir(_RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3.xyz, true);
        float _Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float = _Wind_Intensity;
        Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b;
        float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(999, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float);
        float _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float);
        float _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float;
        Unity_Multiply_float_float(_Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float, 0.125, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float);
        float _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float;
        Unity_Add_float(_Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float, _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float);
        float4 _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4 = IN.uv1;
        float _Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4.y;
        float _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float);
        float _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float = 0.5;
        float _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float;
        Unity_Add_float(_Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float, _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float, _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float);
        float _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float;
        Unity_Clamp_float(_Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float, 0.1, 16, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float);
        float _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float;
        Unity_Power_float(_Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float, _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float);
        float3 _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (1, 0, 0), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3);
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[0];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_G_2_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[1];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_B_3_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[2];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_A_4_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[3];
        float _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float;
        Unity_Multiply_float_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 1, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float);
        float _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float;
        Unity_Add_float(_Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float);
        float _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float = _Wind_Turbulence;
        float _Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float = _Wind_Wavelength;
        float _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float;
        Unity_Clamp_float(_Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float, 0.001, 10000, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float);
        float _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float = _Wind_Speed;
        float _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float;
        Unity_Multiply_float_float(_Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float);
        float _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float = _Wind_Ripples;
        Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212;
        _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212.TimeParameters = IN.TimeParameters;
        float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float;
        SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(_RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float, _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float, _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float);
        float _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float;
        Unity_Multiply_float_float(_Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float);
        float _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float;
        Unity_Multiply_float_float(_Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float, _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float);
        float _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float = _Wind_Blast;
        float _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        Unity_Add_float(_Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float, _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float, _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float);
        OutVector3_1 = _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        OutVector1_2 = _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        OutVector11_3 = _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        }
        
        void Unity_Distance_float3(float3 A, float3 B, out float Out)
        {
            Out = distance(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        struct Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float
        {
        };
        
        void SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(float Vector1_e557ca4994a347ffa4c827936e25216c, float Vector1_09637ae9919547d78bb477f8aebeaf5e, float Vector1_0f7cf1aa48e34bc0a680792872e719c1, float dither_scale, Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float IN, out float out_movement_1, out float out_fade_2, out float out_dither_3, out float out_falloff_4)
        {
        float _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float;
        Unity_Distance_float3(_WorldSpaceCameraPos, SHADERGRAPH_OBJECT_POSITION, _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float);
        float _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float = Vector1_e557ca4994a347ffa4c827936e25216c;
        float _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float, _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float);
        float _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        Unity_Saturate_float(_Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float, _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float);
        float _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float;
        Unity_Subtract_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float);
        float _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float;
        Unity_Maximum_float(0, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float, _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float);
        float _Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float;
        Unity_Subtract_float(_Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float, _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float);
        float _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float;
        Unity_Divide_float(_Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float, _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float);
        float _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        Unity_Saturate_float(_Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float, _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float);
        float _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float;
        Unity_OneMinus_float(_Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float, _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float);
        float _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float = dither_scale;
        float _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        Unity_Multiply_float_float(_OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float, _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float, _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float);
        float _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float, _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float);
        float _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        Unity_Saturate_float(_Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float, _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float);
        out_movement_1 = _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        out_fade_2 = _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        out_dither_3 = _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        out_falloff_4 = _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        }
        
        void Unity_Comparison_Less_float(float A, float B, out float Out)
        {
            Out = A < B ? 1 : 0;
        }
        
        void Unity_Rotate_About_Axis_Radians_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Preview_float(float In, out float Out)
        {
            Out = In;
        }
        
        void Unity_Dither_float(float In, float4 ScreenPosition, out float Out)
        {
            float2 uv = ScreenPosition.xy * _ScreenParams.xy;
            float DITHER_THRESHOLDS[16] =
            {
                1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
                13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
                4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
                16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
            };
            uint index = (uint(uv.x) % 4) * 4 + uint(uv.y) % 4;
            Out = In - DITHER_THRESHOLDS[index];
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float3 TerrainColorMatch;
            float BiasedFade;
            float Dither;
            float Falloff;
            float Fade;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4 = Fade_Color;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_205f896926534950958b9b69cbcc0ce4_Out_1_Float = _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4.w;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea;
            float2 _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2;
            SG_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float(2048, _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea, _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
              float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4 = float4(0.0f, 0.0f, 0.0f, 1.0f);
            #else
              float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4 = SAMPLE_TEXTURE2D_LOD(UnityBuildTexture2DStructNoScale(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D).tex, UnityBuildSamplerStateStruct(SamplerState_Point_Repeat).samplerstate, UnityBuildTexture2DStructNoScale(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D).GetTransformedUV(_TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2), 0);
            #endif
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_R_5_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.r;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_G_6_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.g;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_B_7_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.b;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_A_8_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4;
            Unity_Multiply_float4_float4(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4, _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4, _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4, _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4, (_Swizzle_205f896926534950958b9b69cbcc0ce4_Out_1_Float.xxxx), _Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float = Animation_Cutoff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float = Distance_Fade_End;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3a7e846478af4588abee730e138b7600_Out_0_Float = Distance_Fade_Start;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float = Wind_Blast;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float = Wind_Yaw;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float = Wind_Intensity;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float = Wind_Wavelength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float = Wind_Turbulence;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float = Wind_Ripples;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float = Wind_Speed;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_Wind_43040687acbef31438764c0a962e143f_float _Wind_38a1f9a8cd4543e7af23af6f67466e88;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.uv1 = IN.uv1;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.TimeParameters = IN.TimeParameters;
            float3 _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float;
            SG_Wind_43040687acbef31438764c0a962e143f_float(_Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float, _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float, _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float, _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float, _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float, _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float, _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float;
            Unity_Add_float(1, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float _DistanceCutoff_574befd6840749648d19978a8b7288cf;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(_Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float, _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float, _Property_3a7e846478af4588abee730e138b7600_Out_0_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean;
            Unity_Comparison_Less_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, 1, _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float;
            Unity_OneMinus_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float;
            Unity_Power_float(_OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float, 0.75, _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float;
            Unity_Multiply_float_float(_Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpacePosition, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            Unity_Branch_float3(_Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3, IN.ObjectSpacePosition, _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3 = float3(0, 1, 0);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float = _FadeBias;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float;
            Unity_Power_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float, _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            Unity_Lerp_float3(IN.ObjectSpaceNormal, _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3, (_Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float.xxx), _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpaceTangent, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3);
            #endif
            description.Position = _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            description.Normal = _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            description.Tangent = _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            description.TerrainColorMatch = (_Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4.xyz);
            description.BiasedFade = _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float;
            description.Dither = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            description.Falloff = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            description.Fade = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float DepthOffset;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_E1B0D043);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.tex, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.samplerstate, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_R_4_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.r;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_G_5_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.g;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_B_6_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.b;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            Unity_Lerp_float3((_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.xyz), IN.TerrainColorMatch, (float3(IN.BiasedFade.xxx)), _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float;
            Unity_Preview_float(_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float;
            Unity_Dither_float(IN.Dither, float4(IN.NDCPosition.xy, 0, 0), _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float;
            Unity_Multiply_float_float(_Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            Unity_Lerp_float(_Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float, IN.Falloff, _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float;
            Unity_OneMinus_float(IN.Falloff, _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #else
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float = Vector1_a5b8b09028ce49a39f4d090894c89e22;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_A5E0646);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.tex, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.samplerstate, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_R_4_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.r;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.g;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_B_6_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.b;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float = Vector1_8651797e3e304e108dbd25f9d5a426ba;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float, _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float, _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #else
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = 0;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float;
            Unity_OneMinus_float(IN.Fade, _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float = IN.ObjectSpacePosition.y;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float;
            Unity_Multiply_float_float(_Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float, 5, _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float;
            Unity_Saturate_float(_Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float, _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float = Vector1_593c5cea6c4a42e993ed03ced4685732;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float, _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float, _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #else
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = 1;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float;
            Unity_Minimum_float(_Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float, _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float, _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            Unity_Saturate_float(_Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float, _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_9DCAAA49);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.tex, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.samplerstate, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4);
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_R_4_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.r;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_G_5_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.g;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_B_6_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.b;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_A_7_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float = Vector1_a6983181c8dc4691ba6a28a34c4223a6;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.xyz), _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float, _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #else
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = float3(0, 0, 1);
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_8713F080);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.tex, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.samplerstate, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.r;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_G_5_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.g;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_B_6_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.b;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_A_7_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float2 _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2 = _Thickness_Remap;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float;
            Unity_Remap_float(_SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float, float2 (0, 1), _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2, _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            Unity_Lerp_float(_Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float, 1, IN.Fade, _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #else
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = 0;
            #endif
            #endif
            surface.BaseColor = _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float;
            surface.AlphaClipThreshold = _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float;
            surface.DepthOffset = 0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float;
            surface.Occlusion = _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            surface.NormalTS = _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3;
            surface.TransmissionMask = 1;
            surface.Thickness = _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080305144)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv1 =                                        input.uv1;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TimeParameters =                             _TimeParameters.xyz; // Note: in case of animation this will be overwrite (allow to handle motion vector)
        #endif
        
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        vertexDescriptionInputs.TimeParameters = timeParameters;
        #endif
        
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
            varyings.TerrainColorMatch = vertexDescription.TerrainColorMatch;
        varyings.BiasedFade = vertexDescription.BiasedFade;
        varyings.Dither = vertexDescription.Dither;
        varyings.Falloff = vertexDescription.Falloff;
        varyings.Fade = vertexDescription.Fade;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.TerrainColorMatch = input.TerrainColorMatch;
        output.customInterpolators.BiasedFade = input.BiasedFade;
        output.customInterpolators.Dither = input.Dither;
        output.customInterpolators.Falloff = input.Falloff;
        output.customInterpolators.Fade = input.Fade;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        TransformWorldToObject(input.positionRWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #else
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.TerrainColorMatch = input.customInterpolators.TerrainColorMatch;
        output.BiasedFade = input.customInterpolators.BiasedFade;
        output.Dither = input.customInterpolators.Dither;
        output.Falloff = input.customInterpolators.Falloff;
        output.Fade = input.customInterpolators.Fade;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
#include "Assets/VladislavTsurikov/RendererStack/Shaders/Include/GPUInstancedIndirectInclude.cginc"
#pragma instancing_options procedural:setupGPUInstancedIndirect
#pragma multi_compile_instancing
            ENDHLSL
        }
        Pass
        {
            Name "SceneSelectionPass"
            Tags
            {
                "LightMode" = "SceneSelectionPass"
            }
        
            // Render State
            Cull Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma editor_sync_compilation
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DEPTHOFFSET_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma multi_compile MATERIAL_QUALITY_HIGH MATERIAL_QUALITY_MEDIUM MATERIAL_QUALITY_LOW
        
        #if defined(MATERIAL_QUALITY_HIGH)
            #define KEYWORD_PERMUTATION_0
        #elif defined(MATERIAL_QUALITY_MEDIUM)
            #define KEYWORD_PERMUTATION_1
        #else
            #define KEYWORD_PERMUTATION_2
        #endif
        
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float3 TerrainColorMatch;
        float1 BiasedFade;
        float1 Dither;
        float1 Falloff;
        float1 Fade;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SCENESELECTIONPASS 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D_TexelSize;
        float4 Texture2D_E1B0D043_TexelSize;
        float Vector1_a5b8b09028ce49a39f4d090894c89e22;
        float4 Texture2D_9DCAAA49_TexelSize;
        float Vector1_a6983181c8dc4691ba6a28a34c4223a6;
        float4 Texture2D_A5E0646_TexelSize;
        float Vector1_8651797e3e304e108dbd25f9d5a426ba;
        float Vector1_593c5cea6c4a42e993ed03ced4685732;
        float4 Texture2D_8713F080_TexelSize;
        float Wind_Yaw;
        float Wind_Turbulence;
        float Wind_Wavelength;
        float Wind_Speed;
        float Wind_Ripples;
        float Wind_Intensity;
        float Wind_Blast;
        float Animation_Cutoff;
        float Distance_Fade_End;
        float Distance_Fade_Start;
        float4 Fade_Color;
        float _FadeBias;
        float2 _Thickness_Remap;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Point_Repeat);
        TEXTURE2D(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        SAMPLER(sampler_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        TEXTURE2D(Texture2D_E1B0D043);
        SAMPLER(samplerTexture2D_E1B0D043);
        TEXTURE2D(Texture2D_9DCAAA49);
        SAMPLER(samplerTexture2D_9DCAAA49);
        TEXTURE2D(Texture2D_A5E0646);
        SAMPLER(samplerTexture2D_A5E0646);
        TEXTURE2D(Texture2D_8713F080);
        SAMPLER(samplerTexture2D_8713F080);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0 : TEXCOORD0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1 : TEXCOORD1;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TerrainColorMatch;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float BiasedFade;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Fade;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TimeParameters;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 NDCPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 PixelPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TerrainColorMatch;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float BiasedFade;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Fade;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0 : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_positionRWS_BiasedFade : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_TerrainColorMatch_Dither : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 packed_Falloff_Fade : INTERP3;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.texCoord0.xyzw = input.texCoord0;
            output.packed_positionRWS_BiasedFade.xyz = input.positionRWS;
            output.packed_positionRWS_BiasedFade.w = input.BiasedFade;
            output.packed_TerrainColorMatch_Dither.xyz = input.TerrainColorMatch;
            output.packed_TerrainColorMatch_Dither.w = input.Dither;
            output.packed_Falloff_Fade.x = input.Falloff;
            output.packed_Falloff_Fade.y = input.Fade;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.packed_positionRWS_BiasedFade.xyz;
            output.BiasedFade = input.packed_positionRWS_BiasedFade.w;
            output.TerrainColorMatch = input.packed_TerrainColorMatch_Dither.xyz;
            output.Dither = input.packed_TerrainColorMatch_Dither.w;
            output.Falloff = input.packed_Falloff_Fade.x;
            output.Fade = input.packed_Falloff_Fade.y;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A - B;
        }
        
        struct Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float
        {
        };
        
        void SG_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float(float _ProjectionSize, Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float IN, out float2 UVs_1)
        {
        float _Property_aba1d09bf39d4a02bdc7905b2cde45e0_Out_0_Float = _ProjectionSize;
        float _Float_9e4d9f1bf87c48e2b380c48c15b4811a_Out_0_Float = _Property_aba1d09bf39d4a02bdc7905b2cde45e0_Out_0_Float;
        float3 _Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3;
        Unity_Divide_float3(SHADERGRAPH_OBJECT_POSITION, (_Float_9e4d9f1bf87c48e2b380c48c15b4811a_Out_0_Float.xxx), _Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3);
        float3 _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3;
        Unity_Subtract_float3(_Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3, float3(0.5, 0.5, 0.5), _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3);
        float2 _Swizzle_6f5079fa55ff48ab8d0ceea21aefa7a1_Out_1_Vector2 = _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3.xz;
        UVs_1 = _Swizzle_6f5079fa55ff48ab8d0ceea21aefa7a1_Out_1_Vector2;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            Rotation = radians(Rotation);
        
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void SimpleHash_float(float3 in_position, float seed, out float out_hash){
        uint X = asuint(in_position.x);
        
        uint Y = asuint(in_position.y);
        uint Z = asuint(in_position.z);
        
        uint H = X ^ 2747636419u;
        H *= 2654435769u;
        
        H >> 16;
        
        H *= 2654435769u;
        
        H ^= H >> 16;
        
        H *= 2654435769u;
        H ^= Y;
        H ^= Z;
        
        out_hash = asfloat(H / 4294967295.0);
        }
        
        struct Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float
        {
        };
        
        void SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(float Vector1_3b97c5182780489686cf16f9de4a9ade, Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float IN, out float out_frac_3)
        {
        float _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float = Vector1_3b97c5182780489686cf16f9de4a9ade;
        float _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        SimpleHash_float(SHADERGRAPH_OBJECT_POSITION, _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float, _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float);
        out_frac_3 = _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_CrossProduct_float(float3 A, float3 B, out float3 Out)
        {
            Out = cross(A, B);
        }
        
        void Unity_MatrixConstruction_Row_float (float4 M0, float4 M1, float4 M2, float4 M3, out float4x4 Out4x4, out float3x3 Out3x3, out float2x2 Out2x2)
        {
        Out4x4 = float4x4(M0.x, M0.y, M0.z, M0.w, M1.x, M1.y, M1.z, M1.w, M2.x, M2.y, M2.z, M2.w, M3.x, M3.y, M3.z, M3.w);
        Out3x3 = float3x3(M0.x, M0.y, M0.z, M1.x, M1.y, M1.z, M2.x, M2.y, M2.z);
        Out2x2 = float2x2(M0.x, M0.y, M1.x, M1.y);
        }
        
        void Unity_MatrixTranspose_float4x4(float4x4 In, out float4x4 Out)
        {
            Out = transpose(In);
        }
        
        void Unity_Multiply_float4x4_float4(float4x4 A, float4 B, out float4 Out)
        {
        Out = mul(A, B);
        }
        
        void Unity_Cosine_float(float In, out float Out)
        {
            Out = cos(In);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        struct Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float
        {
        float3 TimeParameters;
        };
        
        void SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(float3 Vector3_cd634a1fd8b749e3b0069b61d35a0614, float Vector1_26f01b8484ed48b3878989067150a580, float Vector1_92a32c418a3740aa9fff1cce06eeb97b, float Vector1_dd02a05593804ec68a8b3cbeb2abb926, float Vector1_17f0b423235f4212be9932a8f400b82e, float Vector1_caec47aa96ad4f4890a1197c25550285, Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float IN, out float phase_2)
        {
        float _Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float3 _Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3 = Vector3_cd634a1fd8b749e3b0069b61d35a0614;
        float3 _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3;
        Unity_Normalize_float3(_Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3, _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3);
        float _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float;
        Unity_Divide_float(1, _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float, _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float);
        float3 _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3, (_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3);
        float3 _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3 = float3(0, 1, 0);
        float3 _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3;
        Unity_Multiply_float3_float3((_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3);
        float3 _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3;
        Unity_CrossProduct_float(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3);
        float4x4 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4;
        float3x3 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3;
        float2x2 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2;
        Unity_MatrixConstruction_Row_float((float4(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, 1.0)), (float4(_Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, 1.0)), (float4(_CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3, 1.0)), float4 (0, 0, 0, 0), _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2);
        float4x4 _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4;
        Unity_MatrixTranspose_float4x4(_MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4);
        float4 _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4;
        Unity_Multiply_float4x4_float4(_MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4, (float4(SHADERGRAPH_OBJECT_POSITION, 1.0)), _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4);
        float _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[0];
        float _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[1];
        float _Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[2];
        float _Split_5a8651da50df48e8987e8d47412fb48b_A_4_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[3];
        float _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float;
        Unity_Add_float(_Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float, _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float, _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float);
        float _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float;
        Unity_Multiply_float_float(_Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float, _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float, _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float);
        float _Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float = Vector1_17f0b423235f4212be9932a8f400b82e;
        float _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float;
        Unity_Add_float(IN.TimeParameters.x, _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float);
        float _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float;
        Unity_Multiply_float_float(_Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float, _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float);
        float _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float;
        Unity_Divide_float(_Multiply_04af88773f75489fb7415006600bb138_Out_2_Float, _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float);
        float _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float = Vector1_caec47aa96ad4f4890a1197c25550285;
        float _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float;
        Unity_Multiply_float_float(_Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float);
        float _Add_8c99726882e64af685d2bf089a894747_Out_2_Float;
        Unity_Add_float(_Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float, _Add_8c99726882e64af685d2bf089a894747_Out_2_Float);
        float _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float;
        Unity_Cosine_float(_Add_8c99726882e64af685d2bf089a894747_Out_2_Float, _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float);
        float _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float;
        Unity_Multiply_float_float(_Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float, _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float, _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float);
        float _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float;
        Unity_Add_float(_Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float, _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float);
        float _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float;
        Unity_Add_float(_Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float, _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float);
        float _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float;
        Unity_Add_float(_Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float);
        float _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float;
        Unity_Sine_float(_Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float, _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float);
        float _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float;
        Unity_Multiply_float_float(_Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float, 0.5, _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float);
        float _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        Unity_Add_float(_Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float, 0.5, _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float);
        phase_2 = _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        }
        
        struct Bindings_Wind_43040687acbef31438764c0a962e143f_float
        {
        half4 uv1;
        float3 TimeParameters;
        };
        
        void SG_Wind_43040687acbef31438764c0a962e143f_float(float _Wind_Blast, float _Wind_Yaw, float _Wind_Intensity, float _Wind_Wavelength, float _Wind_Turbulence, float _Wind_Ripples, float _Wind_Speed, Bindings_Wind_43040687acbef31438764c0a962e143f_float IN, out float3 OutVector3_1, out float OutVector1_2, out float OutVector11_3)
        {
        float _Property_545764affa024cbea7972042aa59989c_Out_0_Float = _Wind_Yaw;
        float3 _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (0, 0, 1), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3);
        float3 _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3 = TransformWorldToObjectDir(_RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3.xyz, true);
        float _Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float = _Wind_Intensity;
        Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b;
        float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(999, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float);
        float _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float);
        float _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float;
        Unity_Multiply_float_float(_Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float, 0.125, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float);
        float _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float;
        Unity_Add_float(_Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float, _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float);
        float4 _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4 = IN.uv1;
        float _Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4.y;
        float _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float);
        float _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float = 0.5;
        float _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float;
        Unity_Add_float(_Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float, _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float, _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float);
        float _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float;
        Unity_Clamp_float(_Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float, 0.1, 16, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float);
        float _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float;
        Unity_Power_float(_Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float, _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float);
        float3 _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (1, 0, 0), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3);
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[0];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_G_2_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[1];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_B_3_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[2];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_A_4_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[3];
        float _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float;
        Unity_Multiply_float_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 1, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float);
        float _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float;
        Unity_Add_float(_Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float);
        float _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float = _Wind_Turbulence;
        float _Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float = _Wind_Wavelength;
        float _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float;
        Unity_Clamp_float(_Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float, 0.001, 10000, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float);
        float _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float = _Wind_Speed;
        float _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float;
        Unity_Multiply_float_float(_Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float);
        float _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float = _Wind_Ripples;
        Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212;
        _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212.TimeParameters = IN.TimeParameters;
        float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float;
        SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(_RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float, _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float, _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float);
        float _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float;
        Unity_Multiply_float_float(_Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float);
        float _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float;
        Unity_Multiply_float_float(_Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float, _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float);
        float _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float = _Wind_Blast;
        float _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        Unity_Add_float(_Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float, _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float, _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float);
        OutVector3_1 = _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        OutVector1_2 = _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        OutVector11_3 = _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        }
        
        void Unity_Distance_float3(float3 A, float3 B, out float Out)
        {
            Out = distance(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        struct Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float
        {
        };
        
        void SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(float Vector1_e557ca4994a347ffa4c827936e25216c, float Vector1_09637ae9919547d78bb477f8aebeaf5e, float Vector1_0f7cf1aa48e34bc0a680792872e719c1, float dither_scale, Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float IN, out float out_movement_1, out float out_fade_2, out float out_dither_3, out float out_falloff_4)
        {
        float _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float;
        Unity_Distance_float3(_WorldSpaceCameraPos, SHADERGRAPH_OBJECT_POSITION, _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float);
        float _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float = Vector1_e557ca4994a347ffa4c827936e25216c;
        float _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float, _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float);
        float _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        Unity_Saturate_float(_Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float, _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float);
        float _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float;
        Unity_Subtract_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float);
        float _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float;
        Unity_Maximum_float(0, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float, _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float);
        float _Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float;
        Unity_Subtract_float(_Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float, _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float);
        float _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float;
        Unity_Divide_float(_Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float, _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float);
        float _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        Unity_Saturate_float(_Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float, _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float);
        float _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float;
        Unity_OneMinus_float(_Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float, _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float);
        float _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float = dither_scale;
        float _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        Unity_Multiply_float_float(_OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float, _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float, _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float);
        float _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float, _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float);
        float _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        Unity_Saturate_float(_Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float, _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float);
        out_movement_1 = _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        out_fade_2 = _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        out_dither_3 = _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        out_falloff_4 = _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        }
        
        void Unity_Comparison_Less_float(float A, float B, out float Out)
        {
            Out = A < B ? 1 : 0;
        }
        
        void Unity_Rotate_About_Axis_Radians_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Preview_float(float In, out float Out)
        {
            Out = In;
        }
        
        void Unity_Dither_float(float In, float4 ScreenPosition, out float Out)
        {
            float2 uv = ScreenPosition.xy * _ScreenParams.xy;
            float DITHER_THRESHOLDS[16] =
            {
                1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
                13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
                4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
                16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
            };
            uint index = (uint(uv.x) % 4) * 4 + uint(uv.y) % 4;
            Out = In - DITHER_THRESHOLDS[index];
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float3 TerrainColorMatch;
            float BiasedFade;
            float Dither;
            float Falloff;
            float Fade;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4 = Fade_Color;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_205f896926534950958b9b69cbcc0ce4_Out_1_Float = _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4.w;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea;
            float2 _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2;
            SG_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float(2048, _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea, _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
              float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4 = float4(0.0f, 0.0f, 0.0f, 1.0f);
            #else
              float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4 = SAMPLE_TEXTURE2D_LOD(UnityBuildTexture2DStructNoScale(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D).tex, UnityBuildSamplerStateStruct(SamplerState_Point_Repeat).samplerstate, UnityBuildTexture2DStructNoScale(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D).GetTransformedUV(_TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2), 0);
            #endif
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_R_5_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.r;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_G_6_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.g;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_B_7_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.b;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_A_8_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4;
            Unity_Multiply_float4_float4(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4, _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4, _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4, _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4, (_Swizzle_205f896926534950958b9b69cbcc0ce4_Out_1_Float.xxxx), _Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float = Animation_Cutoff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float = Distance_Fade_End;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3a7e846478af4588abee730e138b7600_Out_0_Float = Distance_Fade_Start;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float = Wind_Blast;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float = Wind_Yaw;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float = Wind_Intensity;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float = Wind_Wavelength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float = Wind_Turbulence;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float = Wind_Ripples;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float = Wind_Speed;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_Wind_43040687acbef31438764c0a962e143f_float _Wind_38a1f9a8cd4543e7af23af6f67466e88;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.uv1 = IN.uv1;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.TimeParameters = IN.TimeParameters;
            float3 _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float;
            SG_Wind_43040687acbef31438764c0a962e143f_float(_Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float, _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float, _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float, _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float, _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float, _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float, _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float;
            Unity_Add_float(1, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float _DistanceCutoff_574befd6840749648d19978a8b7288cf;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(_Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float, _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float, _Property_3a7e846478af4588abee730e138b7600_Out_0_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean;
            Unity_Comparison_Less_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, 1, _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float;
            Unity_OneMinus_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float;
            Unity_Power_float(_OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float, 0.75, _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float;
            Unity_Multiply_float_float(_Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpacePosition, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            Unity_Branch_float3(_Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3, IN.ObjectSpacePosition, _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3 = float3(0, 1, 0);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float = _FadeBias;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float;
            Unity_Power_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float, _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            Unity_Lerp_float3(IN.ObjectSpaceNormal, _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3, (_Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float.xxx), _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpaceTangent, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3);
            #endif
            description.Position = _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            description.Normal = _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            description.Tangent = _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            description.TerrainColorMatch = (_Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4.xyz);
            description.BiasedFade = _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float;
            description.Dither = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            description.Falloff = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            description.Fade = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float DepthOffset;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_E1B0D043);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.tex, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.samplerstate, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_R_4_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.r;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_G_5_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.g;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_B_6_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.b;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            Unity_Lerp_float3((_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.xyz), IN.TerrainColorMatch, (float3(IN.BiasedFade.xxx)), _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float;
            Unity_Preview_float(_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float;
            Unity_Dither_float(IN.Dither, float4(IN.NDCPosition.xy, 0, 0), _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float;
            Unity_Multiply_float_float(_Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            Unity_Lerp_float(_Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float, IN.Falloff, _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float;
            Unity_OneMinus_float(IN.Falloff, _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #else
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float = Vector1_a5b8b09028ce49a39f4d090894c89e22;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_A5E0646);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.tex, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.samplerstate, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_R_4_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.r;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.g;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_B_6_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.b;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float = Vector1_8651797e3e304e108dbd25f9d5a426ba;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float, _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float, _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #else
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = 0;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float;
            Unity_OneMinus_float(IN.Fade, _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float = IN.ObjectSpacePosition.y;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float;
            Unity_Multiply_float_float(_Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float, 5, _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float;
            Unity_Saturate_float(_Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float, _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float = Vector1_593c5cea6c4a42e993ed03ced4685732;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float, _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float, _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #else
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = 1;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float;
            Unity_Minimum_float(_Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float, _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float, _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            Unity_Saturate_float(_Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float, _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_9DCAAA49);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.tex, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.samplerstate, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4);
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_R_4_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.r;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_G_5_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.g;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_B_6_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.b;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_A_7_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float = Vector1_a6983181c8dc4691ba6a28a34c4223a6;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.xyz), _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float, _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #else
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = float3(0, 0, 1);
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_8713F080);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.tex, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.samplerstate, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.r;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_G_5_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.g;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_B_6_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.b;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_A_7_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float2 _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2 = _Thickness_Remap;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float;
            Unity_Remap_float(_SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float, float2 (0, 1), _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2, _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            Unity_Lerp_float(_Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float, 1, IN.Fade, _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #else
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = 0;
            #endif
            #endif
            surface.BaseColor = _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float;
            surface.AlphaClipThreshold = _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float;
            surface.DepthOffset = 0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float;
            surface.Occlusion = _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            surface.NormalTS = _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3;
            surface.TransmissionMask = 1;
            surface.Thickness = _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080305144)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv1 =                                        input.uv1;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TimeParameters =                             _TimeParameters.xyz; // Note: in case of animation this will be overwrite (allow to handle motion vector)
        #endif
        
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        vertexDescriptionInputs.TimeParameters = timeParameters;
        #endif
        
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
            varyings.TerrainColorMatch = vertexDescription.TerrainColorMatch;
        varyings.BiasedFade = vertexDescription.BiasedFade;
        varyings.Dither = vertexDescription.Dither;
        varyings.Falloff = vertexDescription.Falloff;
        varyings.Fade = vertexDescription.Fade;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.TerrainColorMatch = input.TerrainColorMatch;
        output.customInterpolators.BiasedFade = input.BiasedFade;
        output.customInterpolators.Dither = input.Dither;
        output.customInterpolators.Falloff = input.Falloff;
        output.customInterpolators.Fade = input.Fade;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        TransformWorldToObject(input.positionRWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #else
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.TerrainColorMatch = input.customInterpolators.TerrainColorMatch;
        output.BiasedFade = input.customInterpolators.BiasedFade;
        output.Dither = input.customInterpolators.Dither;
        output.Falloff = input.customInterpolators.Falloff;
        output.Fade = input.customInterpolators.Fade;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
#include "Assets/VladislavTsurikov/RendererStack/Shaders/Include/GPUInstancedIndirectInclude.cginc"
#pragma instancing_options procedural:setupGPUInstancedIndirect
#pragma multi_compile_instancing
            ENDHLSL
        }
        Pass
        {
            Name "MotionVectors"
            Tags
            {
                "LightMode" = "MotionVectors"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskMV]
        Ref [_StencilRefMV]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        AlphaToMask [_AlphaCutoffEnable]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DEPTHOFFSET_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ WRITE_NORMAL_BUFFER
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ WRITE_DECAL_BUFFER
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma multi_compile MATERIAL_QUALITY_HIGH MATERIAL_QUALITY_MEDIUM MATERIAL_QUALITY_LOW
        
        #if defined(MATERIAL_QUALITY_HIGH)
            #define KEYWORD_PERMUTATION_0
        #elif defined(MATERIAL_QUALITY_MEDIUM)
            #define KEYWORD_PERMUTATION_1
        #else
            #define KEYWORD_PERMUTATION_2
        #endif
        
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float3 TerrainColorMatch;
        float1 BiasedFade;
        float1 Dither;
        float1 Falloff;
        float1 Fade;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_MOTION_VECTORS
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D_TexelSize;
        float4 Texture2D_E1B0D043_TexelSize;
        float Vector1_a5b8b09028ce49a39f4d090894c89e22;
        float4 Texture2D_9DCAAA49_TexelSize;
        float Vector1_a6983181c8dc4691ba6a28a34c4223a6;
        float4 Texture2D_A5E0646_TexelSize;
        float Vector1_8651797e3e304e108dbd25f9d5a426ba;
        float Vector1_593c5cea6c4a42e993ed03ced4685732;
        float4 Texture2D_8713F080_TexelSize;
        float Wind_Yaw;
        float Wind_Turbulence;
        float Wind_Wavelength;
        float Wind_Speed;
        float Wind_Ripples;
        float Wind_Intensity;
        float Wind_Blast;
        float Animation_Cutoff;
        float Distance_Fade_End;
        float Distance_Fade_Start;
        float4 Fade_Color;
        float _FadeBias;
        float2 _Thickness_Remap;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Point_Repeat);
        TEXTURE2D(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        SAMPLER(sampler_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        TEXTURE2D(Texture2D_E1B0D043);
        SAMPLER(samplerTexture2D_E1B0D043);
        TEXTURE2D(Texture2D_9DCAAA49);
        SAMPLER(samplerTexture2D_9DCAAA49);
        TEXTURE2D(Texture2D_A5E0646);
        SAMPLER(samplerTexture2D_A5E0646);
        TEXTURE2D(Texture2D_8713F080);
        SAMPLER(samplerTexture2D_8713F080);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0 : TEXCOORD0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1 : TEXCOORD1;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 normalWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TerrainColorMatch;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float BiasedFade;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Fade;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TimeParameters;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 NDCPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 PixelPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TerrainColorMatch;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float BiasedFade;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Fade;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentWS : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0 : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_positionRWS_BiasedFade : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_normalWS_Dither : INTERP3;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_TerrainColorMatch_Falloff : INTERP4;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float1 Fade : INTERP5;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.packed_positionRWS_BiasedFade.xyz = input.positionRWS;
            output.packed_positionRWS_BiasedFade.w = input.BiasedFade;
            output.packed_normalWS_Dither.xyz = input.normalWS;
            output.packed_normalWS_Dither.w = input.Dither;
            output.packed_TerrainColorMatch_Falloff.xyz = input.TerrainColorMatch;
            output.packed_TerrainColorMatch_Falloff.w = input.Falloff;
            output.Fade.x = input.Fade;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.packed_positionRWS_BiasedFade.xyz;
            output.BiasedFade = input.packed_positionRWS_BiasedFade.w;
            output.normalWS = input.packed_normalWS_Dither.xyz;
            output.Dither = input.packed_normalWS_Dither.w;
            output.TerrainColorMatch = input.packed_TerrainColorMatch_Falloff.xyz;
            output.Falloff = input.packed_TerrainColorMatch_Falloff.w;
            output.Fade = input.Fade.x;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A - B;
        }
        
        struct Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float
        {
        };
        
        void SG_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float(float _ProjectionSize, Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float IN, out float2 UVs_1)
        {
        float _Property_aba1d09bf39d4a02bdc7905b2cde45e0_Out_0_Float = _ProjectionSize;
        float _Float_9e4d9f1bf87c48e2b380c48c15b4811a_Out_0_Float = _Property_aba1d09bf39d4a02bdc7905b2cde45e0_Out_0_Float;
        float3 _Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3;
        Unity_Divide_float3(SHADERGRAPH_OBJECT_POSITION, (_Float_9e4d9f1bf87c48e2b380c48c15b4811a_Out_0_Float.xxx), _Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3);
        float3 _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3;
        Unity_Subtract_float3(_Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3, float3(0.5, 0.5, 0.5), _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3);
        float2 _Swizzle_6f5079fa55ff48ab8d0ceea21aefa7a1_Out_1_Vector2 = _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3.xz;
        UVs_1 = _Swizzle_6f5079fa55ff48ab8d0ceea21aefa7a1_Out_1_Vector2;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            Rotation = radians(Rotation);
        
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void SimpleHash_float(float3 in_position, float seed, out float out_hash){
        uint X = asuint(in_position.x);
        
        uint Y = asuint(in_position.y);
        uint Z = asuint(in_position.z);
        
        uint H = X ^ 2747636419u;
        H *= 2654435769u;
        
        H >> 16;
        
        H *= 2654435769u;
        
        H ^= H >> 16;
        
        H *= 2654435769u;
        H ^= Y;
        H ^= Z;
        
        out_hash = asfloat(H / 4294967295.0);
        }
        
        struct Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float
        {
        };
        
        void SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(float Vector1_3b97c5182780489686cf16f9de4a9ade, Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float IN, out float out_frac_3)
        {
        float _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float = Vector1_3b97c5182780489686cf16f9de4a9ade;
        float _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        SimpleHash_float(SHADERGRAPH_OBJECT_POSITION, _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float, _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float);
        out_frac_3 = _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_CrossProduct_float(float3 A, float3 B, out float3 Out)
        {
            Out = cross(A, B);
        }
        
        void Unity_MatrixConstruction_Row_float (float4 M0, float4 M1, float4 M2, float4 M3, out float4x4 Out4x4, out float3x3 Out3x3, out float2x2 Out2x2)
        {
        Out4x4 = float4x4(M0.x, M0.y, M0.z, M0.w, M1.x, M1.y, M1.z, M1.w, M2.x, M2.y, M2.z, M2.w, M3.x, M3.y, M3.z, M3.w);
        Out3x3 = float3x3(M0.x, M0.y, M0.z, M1.x, M1.y, M1.z, M2.x, M2.y, M2.z);
        Out2x2 = float2x2(M0.x, M0.y, M1.x, M1.y);
        }
        
        void Unity_MatrixTranspose_float4x4(float4x4 In, out float4x4 Out)
        {
            Out = transpose(In);
        }
        
        void Unity_Multiply_float4x4_float4(float4x4 A, float4 B, out float4 Out)
        {
        Out = mul(A, B);
        }
        
        void Unity_Cosine_float(float In, out float Out)
        {
            Out = cos(In);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        struct Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float
        {
        float3 TimeParameters;
        };
        
        void SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(float3 Vector3_cd634a1fd8b749e3b0069b61d35a0614, float Vector1_26f01b8484ed48b3878989067150a580, float Vector1_92a32c418a3740aa9fff1cce06eeb97b, float Vector1_dd02a05593804ec68a8b3cbeb2abb926, float Vector1_17f0b423235f4212be9932a8f400b82e, float Vector1_caec47aa96ad4f4890a1197c25550285, Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float IN, out float phase_2)
        {
        float _Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float3 _Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3 = Vector3_cd634a1fd8b749e3b0069b61d35a0614;
        float3 _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3;
        Unity_Normalize_float3(_Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3, _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3);
        float _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float;
        Unity_Divide_float(1, _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float, _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float);
        float3 _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3, (_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3);
        float3 _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3 = float3(0, 1, 0);
        float3 _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3;
        Unity_Multiply_float3_float3((_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3);
        float3 _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3;
        Unity_CrossProduct_float(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3);
        float4x4 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4;
        float3x3 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3;
        float2x2 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2;
        Unity_MatrixConstruction_Row_float((float4(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, 1.0)), (float4(_Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, 1.0)), (float4(_CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3, 1.0)), float4 (0, 0, 0, 0), _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2);
        float4x4 _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4;
        Unity_MatrixTranspose_float4x4(_MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4);
        float4 _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4;
        Unity_Multiply_float4x4_float4(_MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4, (float4(SHADERGRAPH_OBJECT_POSITION, 1.0)), _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4);
        float _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[0];
        float _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[1];
        float _Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[2];
        float _Split_5a8651da50df48e8987e8d47412fb48b_A_4_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[3];
        float _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float;
        Unity_Add_float(_Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float, _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float, _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float);
        float _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float;
        Unity_Multiply_float_float(_Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float, _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float, _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float);
        float _Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float = Vector1_17f0b423235f4212be9932a8f400b82e;
        float _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float;
        Unity_Add_float(IN.TimeParameters.x, _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float);
        float _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float;
        Unity_Multiply_float_float(_Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float, _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float);
        float _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float;
        Unity_Divide_float(_Multiply_04af88773f75489fb7415006600bb138_Out_2_Float, _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float);
        float _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float = Vector1_caec47aa96ad4f4890a1197c25550285;
        float _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float;
        Unity_Multiply_float_float(_Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float);
        float _Add_8c99726882e64af685d2bf089a894747_Out_2_Float;
        Unity_Add_float(_Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float, _Add_8c99726882e64af685d2bf089a894747_Out_2_Float);
        float _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float;
        Unity_Cosine_float(_Add_8c99726882e64af685d2bf089a894747_Out_2_Float, _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float);
        float _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float;
        Unity_Multiply_float_float(_Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float, _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float, _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float);
        float _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float;
        Unity_Add_float(_Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float, _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float);
        float _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float;
        Unity_Add_float(_Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float, _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float);
        float _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float;
        Unity_Add_float(_Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float);
        float _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float;
        Unity_Sine_float(_Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float, _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float);
        float _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float;
        Unity_Multiply_float_float(_Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float, 0.5, _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float);
        float _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        Unity_Add_float(_Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float, 0.5, _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float);
        phase_2 = _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        }
        
        struct Bindings_Wind_43040687acbef31438764c0a962e143f_float
        {
        half4 uv1;
        float3 TimeParameters;
        };
        
        void SG_Wind_43040687acbef31438764c0a962e143f_float(float _Wind_Blast, float _Wind_Yaw, float _Wind_Intensity, float _Wind_Wavelength, float _Wind_Turbulence, float _Wind_Ripples, float _Wind_Speed, Bindings_Wind_43040687acbef31438764c0a962e143f_float IN, out float3 OutVector3_1, out float OutVector1_2, out float OutVector11_3)
        {
        float _Property_545764affa024cbea7972042aa59989c_Out_0_Float = _Wind_Yaw;
        float3 _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (0, 0, 1), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3);
        float3 _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3 = TransformWorldToObjectDir(_RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3.xyz, true);
        float _Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float = _Wind_Intensity;
        Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b;
        float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(999, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float);
        float _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float);
        float _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float;
        Unity_Multiply_float_float(_Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float, 0.125, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float);
        float _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float;
        Unity_Add_float(_Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float, _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float);
        float4 _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4 = IN.uv1;
        float _Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4.y;
        float _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float);
        float _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float = 0.5;
        float _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float;
        Unity_Add_float(_Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float, _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float, _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float);
        float _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float;
        Unity_Clamp_float(_Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float, 0.1, 16, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float);
        float _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float;
        Unity_Power_float(_Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float, _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float);
        float3 _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (1, 0, 0), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3);
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[0];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_G_2_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[1];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_B_3_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[2];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_A_4_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[3];
        float _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float;
        Unity_Multiply_float_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 1, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float);
        float _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float;
        Unity_Add_float(_Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float);
        float _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float = _Wind_Turbulence;
        float _Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float = _Wind_Wavelength;
        float _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float;
        Unity_Clamp_float(_Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float, 0.001, 10000, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float);
        float _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float = _Wind_Speed;
        float _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float;
        Unity_Multiply_float_float(_Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float);
        float _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float = _Wind_Ripples;
        Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212;
        _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212.TimeParameters = IN.TimeParameters;
        float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float;
        SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(_RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float, _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float, _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float);
        float _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float;
        Unity_Multiply_float_float(_Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float);
        float _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float;
        Unity_Multiply_float_float(_Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float, _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float);
        float _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float = _Wind_Blast;
        float _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        Unity_Add_float(_Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float, _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float, _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float);
        OutVector3_1 = _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        OutVector1_2 = _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        OutVector11_3 = _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        }
        
        void Unity_Distance_float3(float3 A, float3 B, out float Out)
        {
            Out = distance(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        struct Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float
        {
        };
        
        void SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(float Vector1_e557ca4994a347ffa4c827936e25216c, float Vector1_09637ae9919547d78bb477f8aebeaf5e, float Vector1_0f7cf1aa48e34bc0a680792872e719c1, float dither_scale, Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float IN, out float out_movement_1, out float out_fade_2, out float out_dither_3, out float out_falloff_4)
        {
        float _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float;
        Unity_Distance_float3(_WorldSpaceCameraPos, SHADERGRAPH_OBJECT_POSITION, _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float);
        float _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float = Vector1_e557ca4994a347ffa4c827936e25216c;
        float _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float, _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float);
        float _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        Unity_Saturate_float(_Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float, _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float);
        float _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float;
        Unity_Subtract_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float);
        float _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float;
        Unity_Maximum_float(0, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float, _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float);
        float _Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float;
        Unity_Subtract_float(_Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float, _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float);
        float _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float;
        Unity_Divide_float(_Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float, _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float);
        float _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        Unity_Saturate_float(_Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float, _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float);
        float _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float;
        Unity_OneMinus_float(_Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float, _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float);
        float _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float = dither_scale;
        float _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        Unity_Multiply_float_float(_OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float, _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float, _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float);
        float _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float, _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float);
        float _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        Unity_Saturate_float(_Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float, _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float);
        out_movement_1 = _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        out_fade_2 = _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        out_dither_3 = _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        out_falloff_4 = _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        }
        
        void Unity_Comparison_Less_float(float A, float B, out float Out)
        {
            Out = A < B ? 1 : 0;
        }
        
        void Unity_Rotate_About_Axis_Radians_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Preview_float(float In, out float Out)
        {
            Out = In;
        }
        
        void Unity_Dither_float(float In, float4 ScreenPosition, out float Out)
        {
            float2 uv = ScreenPosition.xy * _ScreenParams.xy;
            float DITHER_THRESHOLDS[16] =
            {
                1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
                13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
                4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
                16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
            };
            uint index = (uint(uv.x) % 4) * 4 + uint(uv.y) % 4;
            Out = In - DITHER_THRESHOLDS[index];
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float3 TerrainColorMatch;
            float BiasedFade;
            float Dither;
            float Falloff;
            float Fade;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4 = Fade_Color;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_205f896926534950958b9b69cbcc0ce4_Out_1_Float = _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4.w;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea;
            float2 _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2;
            SG_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float(2048, _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea, _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
              float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4 = float4(0.0f, 0.0f, 0.0f, 1.0f);
            #else
              float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4 = SAMPLE_TEXTURE2D_LOD(UnityBuildTexture2DStructNoScale(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D).tex, UnityBuildSamplerStateStruct(SamplerState_Point_Repeat).samplerstate, UnityBuildTexture2DStructNoScale(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D).GetTransformedUV(_TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2), 0);
            #endif
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_R_5_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.r;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_G_6_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.g;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_B_7_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.b;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_A_8_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4;
            Unity_Multiply_float4_float4(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4, _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4, _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4, _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4, (_Swizzle_205f896926534950958b9b69cbcc0ce4_Out_1_Float.xxxx), _Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float = Animation_Cutoff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float = Distance_Fade_End;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3a7e846478af4588abee730e138b7600_Out_0_Float = Distance_Fade_Start;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float = Wind_Blast;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float = Wind_Yaw;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float = Wind_Intensity;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float = Wind_Wavelength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float = Wind_Turbulence;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float = Wind_Ripples;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float = Wind_Speed;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_Wind_43040687acbef31438764c0a962e143f_float _Wind_38a1f9a8cd4543e7af23af6f67466e88;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.uv1 = IN.uv1;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.TimeParameters = IN.TimeParameters;
            float3 _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float;
            SG_Wind_43040687acbef31438764c0a962e143f_float(_Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float, _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float, _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float, _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float, _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float, _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float, _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float;
            Unity_Add_float(1, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float _DistanceCutoff_574befd6840749648d19978a8b7288cf;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(_Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float, _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float, _Property_3a7e846478af4588abee730e138b7600_Out_0_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean;
            Unity_Comparison_Less_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, 1, _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float;
            Unity_OneMinus_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float;
            Unity_Power_float(_OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float, 0.75, _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float;
            Unity_Multiply_float_float(_Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpacePosition, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            Unity_Branch_float3(_Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3, IN.ObjectSpacePosition, _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3 = float3(0, 1, 0);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float = _FadeBias;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float;
            Unity_Power_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float, _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            Unity_Lerp_float3(IN.ObjectSpaceNormal, _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3, (_Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float.xxx), _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpaceTangent, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3);
            #endif
            description.Position = _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            description.Normal = _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            description.Tangent = _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            description.TerrainColorMatch = (_Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4.xyz);
            description.BiasedFade = _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float;
            description.Dither = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            description.Falloff = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            description.Fade = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float DepthOffset;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_E1B0D043);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.tex, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.samplerstate, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_R_4_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.r;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_G_5_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.g;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_B_6_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.b;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            Unity_Lerp_float3((_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.xyz), IN.TerrainColorMatch, (float3(IN.BiasedFade.xxx)), _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float;
            Unity_Preview_float(_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float;
            Unity_Dither_float(IN.Dither, float4(IN.NDCPosition.xy, 0, 0), _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float;
            Unity_Multiply_float_float(_Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            Unity_Lerp_float(_Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float, IN.Falloff, _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float;
            Unity_OneMinus_float(IN.Falloff, _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #else
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float = Vector1_a5b8b09028ce49a39f4d090894c89e22;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_A5E0646);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.tex, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.samplerstate, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_R_4_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.r;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.g;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_B_6_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.b;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float = Vector1_8651797e3e304e108dbd25f9d5a426ba;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float, _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float, _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #else
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = 0;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float;
            Unity_OneMinus_float(IN.Fade, _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float = IN.ObjectSpacePosition.y;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float;
            Unity_Multiply_float_float(_Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float, 5, _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float;
            Unity_Saturate_float(_Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float, _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float = Vector1_593c5cea6c4a42e993ed03ced4685732;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float, _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float, _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #else
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = 1;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float;
            Unity_Minimum_float(_Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float, _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float, _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            Unity_Saturate_float(_Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float, _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_9DCAAA49);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.tex, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.samplerstate, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4);
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_R_4_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.r;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_G_5_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.g;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_B_6_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.b;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_A_7_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float = Vector1_a6983181c8dc4691ba6a28a34c4223a6;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.xyz), _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float, _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #else
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = float3(0, 0, 1);
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_8713F080);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.tex, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.samplerstate, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.r;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_G_5_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.g;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_B_6_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.b;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_A_7_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float2 _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2 = _Thickness_Remap;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float;
            Unity_Remap_float(_SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float, float2 (0, 1), _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2, _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            Unity_Lerp_float(_Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float, 1, IN.Fade, _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #else
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = 0;
            #endif
            #endif
            surface.BaseColor = _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float;
            surface.AlphaClipThreshold = _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float;
            surface.DepthOffset = 0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float;
            surface.Occlusion = _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            surface.NormalTS = _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3;
            surface.TransmissionMask = 1;
            surface.Thickness = _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080305144)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv1 =                                        input.uv1;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TimeParameters =                             _TimeParameters.xyz; // Note: in case of animation this will be overwrite (allow to handle motion vector)
        #endif
        
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        vertexDescriptionInputs.TimeParameters = timeParameters;
        #endif
        
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
            varyings.TerrainColorMatch = vertexDescription.TerrainColorMatch;
        varyings.BiasedFade = vertexDescription.BiasedFade;
        varyings.Dither = vertexDescription.Dither;
        varyings.Falloff = vertexDescription.Falloff;
        varyings.Fade = vertexDescription.Fade;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.TerrainColorMatch = input.TerrainColorMatch;
        output.customInterpolators.BiasedFade = input.BiasedFade;
        output.customInterpolators.Dither = input.Dither;
        output.customInterpolators.Falloff = input.Falloff;
        output.customInterpolators.Fade = input.Fade;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        TransformWorldToObject(input.positionRWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #else
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.TerrainColorMatch = input.customInterpolators.TerrainColorMatch;
        output.BiasedFade = input.customInterpolators.BiasedFade;
        output.Dither = input.customInterpolators.Dither;
        output.Falloff = input.customInterpolators.Falloff;
        output.Fade = input.customInterpolators.Fade;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassMotionVectors.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
#include "Assets/VladislavTsurikov/RendererStack/Shaders/Include/GPUInstancedIndirectInclude.cginc"
#pragma instancing_options procedural:setupGPUInstancedIndirect
#pragma multi_compile_instancing
            ENDHLSL
        }
        Pass
        {
            Name "TransparentDepthPrepass"
            Tags
            {
                "LightMode" = "TransparentDepthPrepass"
            }
        
            // Render State
            Cull [_CullMode]
        Blend One Zero
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskDepth]
        Ref [_StencilRefDepth]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DEPTHOFFSET_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma multi_compile MATERIAL_QUALITY_HIGH MATERIAL_QUALITY_MEDIUM MATERIAL_QUALITY_LOW
        
        #if defined(MATERIAL_QUALITY_HIGH)
            #define KEYWORD_PERMUTATION_0
        #elif defined(MATERIAL_QUALITY_MEDIUM)
            #define KEYWORD_PERMUTATION_1
        #else
            #define KEYWORD_PERMUTATION_2
        #endif
        
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float1 Dither;
        float1 Falloff;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_TRANSPARENT_DEPTH_PREPASS
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D_TexelSize;
        float4 Texture2D_E1B0D043_TexelSize;
        float Vector1_a5b8b09028ce49a39f4d090894c89e22;
        float4 Texture2D_9DCAAA49_TexelSize;
        float Vector1_a6983181c8dc4691ba6a28a34c4223a6;
        float4 Texture2D_A5E0646_TexelSize;
        float Vector1_8651797e3e304e108dbd25f9d5a426ba;
        float Vector1_593c5cea6c4a42e993ed03ced4685732;
        float4 Texture2D_8713F080_TexelSize;
        float Wind_Yaw;
        float Wind_Turbulence;
        float Wind_Wavelength;
        float Wind_Speed;
        float Wind_Ripples;
        float Wind_Intensity;
        float Wind_Blast;
        float Animation_Cutoff;
        float Distance_Fade_End;
        float Distance_Fade_Start;
        float4 Fade_Color;
        float _FadeBias;
        float2 _Thickness_Remap;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Point_Repeat);
        TEXTURE2D(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        SAMPLER(sampler_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        TEXTURE2D(Texture2D_E1B0D043);
        SAMPLER(samplerTexture2D_E1B0D043);
        TEXTURE2D(Texture2D_9DCAAA49);
        SAMPLER(samplerTexture2D_9DCAAA49);
        TEXTURE2D(Texture2D_A5E0646);
        SAMPLER(samplerTexture2D_A5E0646);
        TEXTURE2D(Texture2D_8713F080);
        SAMPLER(samplerTexture2D_8713F080);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0 : TEXCOORD0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1 : TEXCOORD1;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 normalWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TimeParameters;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 NDCPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 PixelPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentWS : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0 : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_positionRWS_Dither : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_normalWS_Falloff : INTERP3;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.packed_positionRWS_Dither.xyz = input.positionRWS;
            output.packed_positionRWS_Dither.w = input.Dither;
            output.packed_normalWS_Falloff.xyz = input.normalWS;
            output.packed_normalWS_Falloff.w = input.Falloff;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.packed_positionRWS_Dither.xyz;
            output.Dither = input.packed_positionRWS_Dither.w;
            output.normalWS = input.packed_normalWS_Falloff.xyz;
            output.Falloff = input.packed_normalWS_Falloff.w;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            Rotation = radians(Rotation);
        
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void SimpleHash_float(float3 in_position, float seed, out float out_hash){
        uint X = asuint(in_position.x);
        
        uint Y = asuint(in_position.y);
        uint Z = asuint(in_position.z);
        
        uint H = X ^ 2747636419u;
        H *= 2654435769u;
        
        H >> 16;
        
        H *= 2654435769u;
        
        H ^= H >> 16;
        
        H *= 2654435769u;
        H ^= Y;
        H ^= Z;
        
        out_hash = asfloat(H / 4294967295.0);
        }
        
        struct Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float
        {
        };
        
        void SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(float Vector1_3b97c5182780489686cf16f9de4a9ade, Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float IN, out float out_frac_3)
        {
        float _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float = Vector1_3b97c5182780489686cf16f9de4a9ade;
        float _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        SimpleHash_float(SHADERGRAPH_OBJECT_POSITION, _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float, _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float);
        out_frac_3 = _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_CrossProduct_float(float3 A, float3 B, out float3 Out)
        {
            Out = cross(A, B);
        }
        
        void Unity_MatrixConstruction_Row_float (float4 M0, float4 M1, float4 M2, float4 M3, out float4x4 Out4x4, out float3x3 Out3x3, out float2x2 Out2x2)
        {
        Out4x4 = float4x4(M0.x, M0.y, M0.z, M0.w, M1.x, M1.y, M1.z, M1.w, M2.x, M2.y, M2.z, M2.w, M3.x, M3.y, M3.z, M3.w);
        Out3x3 = float3x3(M0.x, M0.y, M0.z, M1.x, M1.y, M1.z, M2.x, M2.y, M2.z);
        Out2x2 = float2x2(M0.x, M0.y, M1.x, M1.y);
        }
        
        void Unity_MatrixTranspose_float4x4(float4x4 In, out float4x4 Out)
        {
            Out = transpose(In);
        }
        
        void Unity_Multiply_float4x4_float4(float4x4 A, float4 B, out float4 Out)
        {
        Out = mul(A, B);
        }
        
        void Unity_Cosine_float(float In, out float Out)
        {
            Out = cos(In);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        struct Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float
        {
        float3 TimeParameters;
        };
        
        void SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(float3 Vector3_cd634a1fd8b749e3b0069b61d35a0614, float Vector1_26f01b8484ed48b3878989067150a580, float Vector1_92a32c418a3740aa9fff1cce06eeb97b, float Vector1_dd02a05593804ec68a8b3cbeb2abb926, float Vector1_17f0b423235f4212be9932a8f400b82e, float Vector1_caec47aa96ad4f4890a1197c25550285, Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float IN, out float phase_2)
        {
        float _Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float3 _Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3 = Vector3_cd634a1fd8b749e3b0069b61d35a0614;
        float3 _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3;
        Unity_Normalize_float3(_Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3, _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3);
        float _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float;
        Unity_Divide_float(1, _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float, _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float);
        float3 _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3, (_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3);
        float3 _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3 = float3(0, 1, 0);
        float3 _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3;
        Unity_Multiply_float3_float3((_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3);
        float3 _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3;
        Unity_CrossProduct_float(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3);
        float4x4 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4;
        float3x3 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3;
        float2x2 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2;
        Unity_MatrixConstruction_Row_float((float4(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, 1.0)), (float4(_Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, 1.0)), (float4(_CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3, 1.0)), float4 (0, 0, 0, 0), _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2);
        float4x4 _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4;
        Unity_MatrixTranspose_float4x4(_MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4);
        float4 _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4;
        Unity_Multiply_float4x4_float4(_MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4, (float4(SHADERGRAPH_OBJECT_POSITION, 1.0)), _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4);
        float _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[0];
        float _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[1];
        float _Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[2];
        float _Split_5a8651da50df48e8987e8d47412fb48b_A_4_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[3];
        float _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float;
        Unity_Add_float(_Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float, _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float, _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float);
        float _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float;
        Unity_Multiply_float_float(_Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float, _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float, _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float);
        float _Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float = Vector1_17f0b423235f4212be9932a8f400b82e;
        float _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float;
        Unity_Add_float(IN.TimeParameters.x, _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float);
        float _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float;
        Unity_Multiply_float_float(_Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float, _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float);
        float _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float;
        Unity_Divide_float(_Multiply_04af88773f75489fb7415006600bb138_Out_2_Float, _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float);
        float _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float = Vector1_caec47aa96ad4f4890a1197c25550285;
        float _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float;
        Unity_Multiply_float_float(_Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float);
        float _Add_8c99726882e64af685d2bf089a894747_Out_2_Float;
        Unity_Add_float(_Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float, _Add_8c99726882e64af685d2bf089a894747_Out_2_Float);
        float _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float;
        Unity_Cosine_float(_Add_8c99726882e64af685d2bf089a894747_Out_2_Float, _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float);
        float _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float;
        Unity_Multiply_float_float(_Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float, _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float, _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float);
        float _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float;
        Unity_Add_float(_Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float, _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float);
        float _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float;
        Unity_Add_float(_Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float, _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float);
        float _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float;
        Unity_Add_float(_Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float);
        float _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float;
        Unity_Sine_float(_Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float, _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float);
        float _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float;
        Unity_Multiply_float_float(_Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float, 0.5, _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float);
        float _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        Unity_Add_float(_Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float, 0.5, _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float);
        phase_2 = _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        }
        
        struct Bindings_Wind_43040687acbef31438764c0a962e143f_float
        {
        half4 uv1;
        float3 TimeParameters;
        };
        
        void SG_Wind_43040687acbef31438764c0a962e143f_float(float _Wind_Blast, float _Wind_Yaw, float _Wind_Intensity, float _Wind_Wavelength, float _Wind_Turbulence, float _Wind_Ripples, float _Wind_Speed, Bindings_Wind_43040687acbef31438764c0a962e143f_float IN, out float3 OutVector3_1, out float OutVector1_2, out float OutVector11_3)
        {
        float _Property_545764affa024cbea7972042aa59989c_Out_0_Float = _Wind_Yaw;
        float3 _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (0, 0, 1), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3);
        float3 _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3 = TransformWorldToObjectDir(_RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3.xyz, true);
        float _Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float = _Wind_Intensity;
        Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b;
        float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(999, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float);
        float _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float);
        float _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float;
        Unity_Multiply_float_float(_Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float, 0.125, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float);
        float _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float;
        Unity_Add_float(_Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float, _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float);
        float4 _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4 = IN.uv1;
        float _Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4.y;
        float _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float);
        float _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float = 0.5;
        float _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float;
        Unity_Add_float(_Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float, _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float, _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float);
        float _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float;
        Unity_Clamp_float(_Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float, 0.1, 16, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float);
        float _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float;
        Unity_Power_float(_Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float, _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float);
        float3 _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (1, 0, 0), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3);
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[0];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_G_2_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[1];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_B_3_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[2];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_A_4_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[3];
        float _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float;
        Unity_Multiply_float_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 1, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float);
        float _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float;
        Unity_Add_float(_Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float);
        float _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float = _Wind_Turbulence;
        float _Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float = _Wind_Wavelength;
        float _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float;
        Unity_Clamp_float(_Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float, 0.001, 10000, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float);
        float _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float = _Wind_Speed;
        float _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float;
        Unity_Multiply_float_float(_Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float);
        float _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float = _Wind_Ripples;
        Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212;
        _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212.TimeParameters = IN.TimeParameters;
        float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float;
        SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(_RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float, _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float, _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float);
        float _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float;
        Unity_Multiply_float_float(_Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float);
        float _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float;
        Unity_Multiply_float_float(_Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float, _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float);
        float _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float = _Wind_Blast;
        float _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        Unity_Add_float(_Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float, _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float, _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float);
        OutVector3_1 = _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        OutVector1_2 = _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        OutVector11_3 = _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        }
        
        void Unity_Distance_float3(float3 A, float3 B, out float Out)
        {
            Out = distance(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        struct Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float
        {
        };
        
        void SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(float Vector1_e557ca4994a347ffa4c827936e25216c, float Vector1_09637ae9919547d78bb477f8aebeaf5e, float Vector1_0f7cf1aa48e34bc0a680792872e719c1, float dither_scale, Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float IN, out float out_movement_1, out float out_fade_2, out float out_dither_3, out float out_falloff_4)
        {
        float _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float;
        Unity_Distance_float3(_WorldSpaceCameraPos, SHADERGRAPH_OBJECT_POSITION, _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float);
        float _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float = Vector1_e557ca4994a347ffa4c827936e25216c;
        float _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float, _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float);
        float _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        Unity_Saturate_float(_Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float, _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float);
        float _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float;
        Unity_Subtract_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float);
        float _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float;
        Unity_Maximum_float(0, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float, _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float);
        float _Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float;
        Unity_Subtract_float(_Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float, _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float);
        float _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float;
        Unity_Divide_float(_Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float, _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float);
        float _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        Unity_Saturate_float(_Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float, _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float);
        float _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float;
        Unity_OneMinus_float(_Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float, _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float);
        float _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float = dither_scale;
        float _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        Unity_Multiply_float_float(_OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float, _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float, _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float);
        float _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float, _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float);
        float _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        Unity_Saturate_float(_Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float, _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float);
        out_movement_1 = _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        out_fade_2 = _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        out_dither_3 = _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        out_falloff_4 = _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        }
        
        void Unity_Comparison_Less_float(float A, float B, out float Out)
        {
            Out = A < B ? 1 : 0;
        }
        
        void Unity_Rotate_About_Axis_Radians_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Preview_float(float In, out float Out)
        {
            Out = In;
        }
        
        void Unity_Dither_float(float In, float4 ScreenPosition, out float Out)
        {
            float2 uv = ScreenPosition.xy * _ScreenParams.xy;
            float DITHER_THRESHOLDS[16] =
            {
                1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
                13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
                4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
                16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
            };
            uint index = (uint(uv.x) % 4) * 4 + uint(uv.y) % 4;
            Out = In - DITHER_THRESHOLDS[index];
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float Dither;
            float Falloff;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float = Animation_Cutoff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float = Distance_Fade_End;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3a7e846478af4588abee730e138b7600_Out_0_Float = Distance_Fade_Start;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float = Wind_Blast;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float = Wind_Yaw;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float = Wind_Intensity;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float = Wind_Wavelength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float = Wind_Turbulence;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float = Wind_Ripples;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float = Wind_Speed;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_Wind_43040687acbef31438764c0a962e143f_float _Wind_38a1f9a8cd4543e7af23af6f67466e88;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.uv1 = IN.uv1;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.TimeParameters = IN.TimeParameters;
            float3 _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float;
            SG_Wind_43040687acbef31438764c0a962e143f_float(_Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float, _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float, _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float, _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float, _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float, _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float, _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float;
            Unity_Add_float(1, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float _DistanceCutoff_574befd6840749648d19978a8b7288cf;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(_Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float, _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float, _Property_3a7e846478af4588abee730e138b7600_Out_0_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean;
            Unity_Comparison_Less_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, 1, _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float;
            Unity_OneMinus_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float;
            Unity_Power_float(_OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float, 0.75, _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float;
            Unity_Multiply_float_float(_Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpacePosition, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            Unity_Branch_float3(_Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3, IN.ObjectSpacePosition, _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3 = float3(0, 1, 0);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float = _FadeBias;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float;
            Unity_Power_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float, _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            Unity_Lerp_float3(IN.ObjectSpaceNormal, _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3, (_Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float.xxx), _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpaceTangent, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3);
            #endif
            description.Position = _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            description.Normal = _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            description.Tangent = _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            description.Dither = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            description.Falloff = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float Alpha;
            float AlphaClipThreshold;
            float DepthOffset;
            float3 NormalTS;
            float Smoothness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_E1B0D043);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.tex, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.samplerstate, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_R_4_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.r;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_G_5_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.g;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_B_6_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.b;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float;
            Unity_Preview_float(_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float;
            Unity_Dither_float(IN.Dither, float4(IN.NDCPosition.xy, 0, 0), _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float;
            Unity_Multiply_float_float(_Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            Unity_Lerp_float(_Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float, IN.Falloff, _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float;
            Unity_OneMinus_float(IN.Falloff, _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #else
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float = Vector1_a5b8b09028ce49a39f4d090894c89e22;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_9DCAAA49);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.tex, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.samplerstate, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4);
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_R_4_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.r;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_G_5_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.g;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_B_6_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.b;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_A_7_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float = Vector1_a6983181c8dc4691ba6a28a34c4223a6;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.xyz), _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float, _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #else
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = float3(0, 0, 1);
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_A5E0646);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.tex, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.samplerstate, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_R_4_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.r;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.g;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_B_6_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.b;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float = Vector1_8651797e3e304e108dbd25f9d5a426ba;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float, _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float, _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #else
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = 0;
            #endif
            #endif
            surface.Alpha = _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float;
            surface.AlphaClipThreshold = _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float;
            surface.DepthOffset = 0;
            surface.NormalTS = _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3;
            surface.Smoothness = _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080305144)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv1 =                                        input.uv1;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TimeParameters =                             _TimeParameters.xyz; // Note: in case of animation this will be overwrite (allow to handle motion vector)
        #endif
        
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        vertexDescriptionInputs.TimeParameters = timeParameters;
        #endif
        
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
            varyings.Dither = vertexDescription.Dither;
        varyings.Falloff = vertexDescription.Falloff;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.Dither = input.Dither;
        output.customInterpolators.Falloff = input.Falloff;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #else
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.Dither = input.customInterpolators.Dither;
        output.Falloff = input.customInterpolators.Falloff;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
#include "Assets/VladislavTsurikov/RendererStack/Shaders/Include/GPUInstancedIndirectInclude.cginc"
#pragma instancing_options procedural:setupGPUInstancedIndirect
#pragma multi_compile_instancing
            ENDHLSL
        }
        Pass
        {
            Name "FullScreenDebug"
            Tags
            {
                "LightMode" = "FullScreenDebug"
            }
        
            // Render State
            Cull [_CullMode]
        ZTest LEqual
        ZWrite Off
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DEPTHOFFSET_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma multi_compile MATERIAL_QUALITY_HIGH MATERIAL_QUALITY_MEDIUM MATERIAL_QUALITY_LOW
        
        #if defined(MATERIAL_QUALITY_HIGH)
            #define KEYWORD_PERMUTATION_0
        #elif defined(MATERIAL_QUALITY_MEDIUM)
            #define KEYWORD_PERMUTATION_1
        #else
            #define KEYWORD_PERMUTATION_2
        #endif
        
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float3 TerrainColorMatch;
        float1 BiasedFade;
        float1 Dither;
        float1 Falloff;
        float1 Fade;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_FULL_SCREEN_DEBUG
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D_TexelSize;
        float4 Texture2D_E1B0D043_TexelSize;
        float Vector1_a5b8b09028ce49a39f4d090894c89e22;
        float4 Texture2D_9DCAAA49_TexelSize;
        float Vector1_a6983181c8dc4691ba6a28a34c4223a6;
        float4 Texture2D_A5E0646_TexelSize;
        float Vector1_8651797e3e304e108dbd25f9d5a426ba;
        float Vector1_593c5cea6c4a42e993ed03ced4685732;
        float4 Texture2D_8713F080_TexelSize;
        float Wind_Yaw;
        float Wind_Turbulence;
        float Wind_Wavelength;
        float Wind_Speed;
        float Wind_Ripples;
        float Wind_Intensity;
        float Wind_Blast;
        float Animation_Cutoff;
        float Distance_Fade_End;
        float Distance_Fade_Start;
        float4 Fade_Color;
        float _FadeBias;
        float2 _Thickness_Remap;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Point_Repeat);
        TEXTURE2D(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        SAMPLER(sampler_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        TEXTURE2D(Texture2D_E1B0D043);
        SAMPLER(samplerTexture2D_E1B0D043);
        TEXTURE2D(Texture2D_9DCAAA49);
        SAMPLER(samplerTexture2D_9DCAAA49);
        TEXTURE2D(Texture2D_A5E0646);
        SAMPLER(samplerTexture2D_A5E0646);
        TEXTURE2D(Texture2D_8713F080);
        SAMPLER(samplerTexture2D_8713F080);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0 : TEXCOORD0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1 : TEXCOORD1;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TerrainColorMatch;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float BiasedFade;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Fade;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TimeParameters;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 NDCPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 PixelPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TerrainColorMatch;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float BiasedFade;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Fade;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0 : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_positionRWS_BiasedFade : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_TerrainColorMatch_Dither : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 packed_Falloff_Fade : INTERP3;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.texCoord0.xyzw = input.texCoord0;
            output.packed_positionRWS_BiasedFade.xyz = input.positionRWS;
            output.packed_positionRWS_BiasedFade.w = input.BiasedFade;
            output.packed_TerrainColorMatch_Dither.xyz = input.TerrainColorMatch;
            output.packed_TerrainColorMatch_Dither.w = input.Dither;
            output.packed_Falloff_Fade.x = input.Falloff;
            output.packed_Falloff_Fade.y = input.Fade;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.packed_positionRWS_BiasedFade.xyz;
            output.BiasedFade = input.packed_positionRWS_BiasedFade.w;
            output.TerrainColorMatch = input.packed_TerrainColorMatch_Dither.xyz;
            output.Dither = input.packed_TerrainColorMatch_Dither.w;
            output.Falloff = input.packed_Falloff_Fade.x;
            output.Fade = input.packed_Falloff_Fade.y;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A - B;
        }
        
        struct Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float
        {
        };
        
        void SG_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float(float _ProjectionSize, Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float IN, out float2 UVs_1)
        {
        float _Property_aba1d09bf39d4a02bdc7905b2cde45e0_Out_0_Float = _ProjectionSize;
        float _Float_9e4d9f1bf87c48e2b380c48c15b4811a_Out_0_Float = _Property_aba1d09bf39d4a02bdc7905b2cde45e0_Out_0_Float;
        float3 _Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3;
        Unity_Divide_float3(SHADERGRAPH_OBJECT_POSITION, (_Float_9e4d9f1bf87c48e2b380c48c15b4811a_Out_0_Float.xxx), _Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3);
        float3 _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3;
        Unity_Subtract_float3(_Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3, float3(0.5, 0.5, 0.5), _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3);
        float2 _Swizzle_6f5079fa55ff48ab8d0ceea21aefa7a1_Out_1_Vector2 = _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3.xz;
        UVs_1 = _Swizzle_6f5079fa55ff48ab8d0ceea21aefa7a1_Out_1_Vector2;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            Rotation = radians(Rotation);
        
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void SimpleHash_float(float3 in_position, float seed, out float out_hash){
        uint X = asuint(in_position.x);
        
        uint Y = asuint(in_position.y);
        uint Z = asuint(in_position.z);
        
        uint H = X ^ 2747636419u;
        H *= 2654435769u;
        
        H >> 16;
        
        H *= 2654435769u;
        
        H ^= H >> 16;
        
        H *= 2654435769u;
        H ^= Y;
        H ^= Z;
        
        out_hash = asfloat(H / 4294967295.0);
        }
        
        struct Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float
        {
        };
        
        void SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(float Vector1_3b97c5182780489686cf16f9de4a9ade, Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float IN, out float out_frac_3)
        {
        float _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float = Vector1_3b97c5182780489686cf16f9de4a9ade;
        float _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        SimpleHash_float(SHADERGRAPH_OBJECT_POSITION, _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float, _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float);
        out_frac_3 = _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_CrossProduct_float(float3 A, float3 B, out float3 Out)
        {
            Out = cross(A, B);
        }
        
        void Unity_MatrixConstruction_Row_float (float4 M0, float4 M1, float4 M2, float4 M3, out float4x4 Out4x4, out float3x3 Out3x3, out float2x2 Out2x2)
        {
        Out4x4 = float4x4(M0.x, M0.y, M0.z, M0.w, M1.x, M1.y, M1.z, M1.w, M2.x, M2.y, M2.z, M2.w, M3.x, M3.y, M3.z, M3.w);
        Out3x3 = float3x3(M0.x, M0.y, M0.z, M1.x, M1.y, M1.z, M2.x, M2.y, M2.z);
        Out2x2 = float2x2(M0.x, M0.y, M1.x, M1.y);
        }
        
        void Unity_MatrixTranspose_float4x4(float4x4 In, out float4x4 Out)
        {
            Out = transpose(In);
        }
        
        void Unity_Multiply_float4x4_float4(float4x4 A, float4 B, out float4 Out)
        {
        Out = mul(A, B);
        }
        
        void Unity_Cosine_float(float In, out float Out)
        {
            Out = cos(In);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        struct Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float
        {
        float3 TimeParameters;
        };
        
        void SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(float3 Vector3_cd634a1fd8b749e3b0069b61d35a0614, float Vector1_26f01b8484ed48b3878989067150a580, float Vector1_92a32c418a3740aa9fff1cce06eeb97b, float Vector1_dd02a05593804ec68a8b3cbeb2abb926, float Vector1_17f0b423235f4212be9932a8f400b82e, float Vector1_caec47aa96ad4f4890a1197c25550285, Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float IN, out float phase_2)
        {
        float _Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float3 _Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3 = Vector3_cd634a1fd8b749e3b0069b61d35a0614;
        float3 _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3;
        Unity_Normalize_float3(_Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3, _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3);
        float _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float;
        Unity_Divide_float(1, _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float, _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float);
        float3 _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3, (_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3);
        float3 _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3 = float3(0, 1, 0);
        float3 _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3;
        Unity_Multiply_float3_float3((_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3);
        float3 _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3;
        Unity_CrossProduct_float(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3);
        float4x4 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4;
        float3x3 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3;
        float2x2 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2;
        Unity_MatrixConstruction_Row_float((float4(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, 1.0)), (float4(_Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, 1.0)), (float4(_CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3, 1.0)), float4 (0, 0, 0, 0), _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2);
        float4x4 _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4;
        Unity_MatrixTranspose_float4x4(_MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4);
        float4 _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4;
        Unity_Multiply_float4x4_float4(_MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4, (float4(SHADERGRAPH_OBJECT_POSITION, 1.0)), _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4);
        float _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[0];
        float _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[1];
        float _Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[2];
        float _Split_5a8651da50df48e8987e8d47412fb48b_A_4_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[3];
        float _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float;
        Unity_Add_float(_Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float, _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float, _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float);
        float _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float;
        Unity_Multiply_float_float(_Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float, _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float, _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float);
        float _Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float = Vector1_17f0b423235f4212be9932a8f400b82e;
        float _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float;
        Unity_Add_float(IN.TimeParameters.x, _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float);
        float _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float;
        Unity_Multiply_float_float(_Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float, _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float);
        float _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float;
        Unity_Divide_float(_Multiply_04af88773f75489fb7415006600bb138_Out_2_Float, _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float);
        float _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float = Vector1_caec47aa96ad4f4890a1197c25550285;
        float _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float;
        Unity_Multiply_float_float(_Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float);
        float _Add_8c99726882e64af685d2bf089a894747_Out_2_Float;
        Unity_Add_float(_Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float, _Add_8c99726882e64af685d2bf089a894747_Out_2_Float);
        float _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float;
        Unity_Cosine_float(_Add_8c99726882e64af685d2bf089a894747_Out_2_Float, _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float);
        float _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float;
        Unity_Multiply_float_float(_Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float, _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float, _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float);
        float _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float;
        Unity_Add_float(_Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float, _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float);
        float _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float;
        Unity_Add_float(_Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float, _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float);
        float _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float;
        Unity_Add_float(_Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float);
        float _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float;
        Unity_Sine_float(_Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float, _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float);
        float _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float;
        Unity_Multiply_float_float(_Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float, 0.5, _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float);
        float _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        Unity_Add_float(_Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float, 0.5, _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float);
        phase_2 = _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        }
        
        struct Bindings_Wind_43040687acbef31438764c0a962e143f_float
        {
        half4 uv1;
        float3 TimeParameters;
        };
        
        void SG_Wind_43040687acbef31438764c0a962e143f_float(float _Wind_Blast, float _Wind_Yaw, float _Wind_Intensity, float _Wind_Wavelength, float _Wind_Turbulence, float _Wind_Ripples, float _Wind_Speed, Bindings_Wind_43040687acbef31438764c0a962e143f_float IN, out float3 OutVector3_1, out float OutVector1_2, out float OutVector11_3)
        {
        float _Property_545764affa024cbea7972042aa59989c_Out_0_Float = _Wind_Yaw;
        float3 _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (0, 0, 1), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3);
        float3 _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3 = TransformWorldToObjectDir(_RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3.xyz, true);
        float _Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float = _Wind_Intensity;
        Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b;
        float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(999, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float);
        float _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float);
        float _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float;
        Unity_Multiply_float_float(_Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float, 0.125, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float);
        float _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float;
        Unity_Add_float(_Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float, _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float);
        float4 _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4 = IN.uv1;
        float _Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4.y;
        float _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float);
        float _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float = 0.5;
        float _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float;
        Unity_Add_float(_Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float, _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float, _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float);
        float _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float;
        Unity_Clamp_float(_Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float, 0.1, 16, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float);
        float _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float;
        Unity_Power_float(_Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float, _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float);
        float3 _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (1, 0, 0), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3);
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[0];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_G_2_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[1];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_B_3_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[2];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_A_4_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[3];
        float _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float;
        Unity_Multiply_float_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 1, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float);
        float _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float;
        Unity_Add_float(_Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float);
        float _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float = _Wind_Turbulence;
        float _Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float = _Wind_Wavelength;
        float _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float;
        Unity_Clamp_float(_Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float, 0.001, 10000, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float);
        float _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float = _Wind_Speed;
        float _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float;
        Unity_Multiply_float_float(_Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float);
        float _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float = _Wind_Ripples;
        Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212;
        _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212.TimeParameters = IN.TimeParameters;
        float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float;
        SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(_RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float, _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float, _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float);
        float _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float;
        Unity_Multiply_float_float(_Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float);
        float _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float;
        Unity_Multiply_float_float(_Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float, _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float);
        float _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float = _Wind_Blast;
        float _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        Unity_Add_float(_Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float, _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float, _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float);
        OutVector3_1 = _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        OutVector1_2 = _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        OutVector11_3 = _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        }
        
        void Unity_Distance_float3(float3 A, float3 B, out float Out)
        {
            Out = distance(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        struct Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float
        {
        };
        
        void SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(float Vector1_e557ca4994a347ffa4c827936e25216c, float Vector1_09637ae9919547d78bb477f8aebeaf5e, float Vector1_0f7cf1aa48e34bc0a680792872e719c1, float dither_scale, Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float IN, out float out_movement_1, out float out_fade_2, out float out_dither_3, out float out_falloff_4)
        {
        float _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float;
        Unity_Distance_float3(_WorldSpaceCameraPos, SHADERGRAPH_OBJECT_POSITION, _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float);
        float _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float = Vector1_e557ca4994a347ffa4c827936e25216c;
        float _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float, _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float);
        float _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        Unity_Saturate_float(_Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float, _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float);
        float _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float;
        Unity_Subtract_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float);
        float _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float;
        Unity_Maximum_float(0, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float, _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float);
        float _Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float;
        Unity_Subtract_float(_Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float, _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float);
        float _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float;
        Unity_Divide_float(_Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float, _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float);
        float _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        Unity_Saturate_float(_Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float, _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float);
        float _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float;
        Unity_OneMinus_float(_Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float, _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float);
        float _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float = dither_scale;
        float _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        Unity_Multiply_float_float(_OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float, _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float, _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float);
        float _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float, _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float);
        float _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        Unity_Saturate_float(_Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float, _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float);
        out_movement_1 = _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        out_fade_2 = _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        out_dither_3 = _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        out_falloff_4 = _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        }
        
        void Unity_Comparison_Less_float(float A, float B, out float Out)
        {
            Out = A < B ? 1 : 0;
        }
        
        void Unity_Rotate_About_Axis_Radians_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Preview_float(float In, out float Out)
        {
            Out = In;
        }
        
        void Unity_Dither_float(float In, float4 ScreenPosition, out float Out)
        {
            float2 uv = ScreenPosition.xy * _ScreenParams.xy;
            float DITHER_THRESHOLDS[16] =
            {
                1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
                13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
                4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
                16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
            };
            uint index = (uint(uv.x) % 4) * 4 + uint(uv.y) % 4;
            Out = In - DITHER_THRESHOLDS[index];
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float3 TerrainColorMatch;
            float BiasedFade;
            float Dither;
            float Falloff;
            float Fade;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4 = Fade_Color;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_205f896926534950958b9b69cbcc0ce4_Out_1_Float = _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4.w;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea;
            float2 _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2;
            SG_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float(2048, _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea, _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
              float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4 = float4(0.0f, 0.0f, 0.0f, 1.0f);
            #else
              float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4 = SAMPLE_TEXTURE2D_LOD(UnityBuildTexture2DStructNoScale(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D).tex, UnityBuildSamplerStateStruct(SamplerState_Point_Repeat).samplerstate, UnityBuildTexture2DStructNoScale(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D).GetTransformedUV(_TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2), 0);
            #endif
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_R_5_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.r;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_G_6_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.g;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_B_7_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.b;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_A_8_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4;
            Unity_Multiply_float4_float4(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4, _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4, _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4, _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4, (_Swizzle_205f896926534950958b9b69cbcc0ce4_Out_1_Float.xxxx), _Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float = Animation_Cutoff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float = Distance_Fade_End;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3a7e846478af4588abee730e138b7600_Out_0_Float = Distance_Fade_Start;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float = Wind_Blast;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float = Wind_Yaw;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float = Wind_Intensity;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float = Wind_Wavelength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float = Wind_Turbulence;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float = Wind_Ripples;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float = Wind_Speed;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_Wind_43040687acbef31438764c0a962e143f_float _Wind_38a1f9a8cd4543e7af23af6f67466e88;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.uv1 = IN.uv1;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.TimeParameters = IN.TimeParameters;
            float3 _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float;
            SG_Wind_43040687acbef31438764c0a962e143f_float(_Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float, _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float, _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float, _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float, _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float, _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float, _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float;
            Unity_Add_float(1, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float _DistanceCutoff_574befd6840749648d19978a8b7288cf;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(_Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float, _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float, _Property_3a7e846478af4588abee730e138b7600_Out_0_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean;
            Unity_Comparison_Less_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, 1, _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float;
            Unity_OneMinus_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float;
            Unity_Power_float(_OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float, 0.75, _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float;
            Unity_Multiply_float_float(_Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpacePosition, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            Unity_Branch_float3(_Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3, IN.ObjectSpacePosition, _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3 = float3(0, 1, 0);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float = _FadeBias;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float;
            Unity_Power_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float, _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            Unity_Lerp_float3(IN.ObjectSpaceNormal, _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3, (_Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float.xxx), _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpaceTangent, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3);
            #endif
            description.Position = _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            description.Normal = _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            description.Tangent = _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            description.TerrainColorMatch = (_Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4.xyz);
            description.BiasedFade = _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float;
            description.Dither = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            description.Falloff = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            description.Fade = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float DepthOffset;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_E1B0D043);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.tex, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.samplerstate, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_R_4_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.r;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_G_5_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.g;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_B_6_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.b;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            Unity_Lerp_float3((_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.xyz), IN.TerrainColorMatch, (float3(IN.BiasedFade.xxx)), _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float;
            Unity_Preview_float(_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float;
            Unity_Dither_float(IN.Dither, float4(IN.NDCPosition.xy, 0, 0), _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float;
            Unity_Multiply_float_float(_Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            Unity_Lerp_float(_Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float, IN.Falloff, _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float;
            Unity_OneMinus_float(IN.Falloff, _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #else
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float = Vector1_a5b8b09028ce49a39f4d090894c89e22;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_A5E0646);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.tex, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.samplerstate, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_R_4_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.r;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.g;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_B_6_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.b;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float = Vector1_8651797e3e304e108dbd25f9d5a426ba;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float, _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float, _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #else
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = 0;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float;
            Unity_OneMinus_float(IN.Fade, _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float = IN.ObjectSpacePosition.y;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float;
            Unity_Multiply_float_float(_Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float, 5, _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float;
            Unity_Saturate_float(_Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float, _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float = Vector1_593c5cea6c4a42e993ed03ced4685732;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float, _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float, _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #else
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = 1;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float;
            Unity_Minimum_float(_Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float, _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float, _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            Unity_Saturate_float(_Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float, _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_9DCAAA49);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.tex, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.samplerstate, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4);
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_R_4_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.r;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_G_5_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.g;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_B_6_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.b;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_A_7_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float = Vector1_a6983181c8dc4691ba6a28a34c4223a6;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.xyz), _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float, _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #else
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = float3(0, 0, 1);
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_8713F080);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.tex, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.samplerstate, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.r;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_G_5_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.g;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_B_6_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.b;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_A_7_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float2 _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2 = _Thickness_Remap;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float;
            Unity_Remap_float(_SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float, float2 (0, 1), _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2, _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            Unity_Lerp_float(_Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float, 1, IN.Fade, _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #else
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = 0;
            #endif
            #endif
            surface.BaseColor = _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float;
            surface.AlphaClipThreshold = _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float;
            surface.DepthOffset = 0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float;
            surface.Occlusion = _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            surface.NormalTS = _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3;
            surface.TransmissionMask = 1;
            surface.Thickness = _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080305144)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv1 =                                        input.uv1;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TimeParameters =                             _TimeParameters.xyz; // Note: in case of animation this will be overwrite (allow to handle motion vector)
        #endif
        
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        vertexDescriptionInputs.TimeParameters = timeParameters;
        #endif
        
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
            varyings.TerrainColorMatch = vertexDescription.TerrainColorMatch;
        varyings.BiasedFade = vertexDescription.BiasedFade;
        varyings.Dither = vertexDescription.Dither;
        varyings.Falloff = vertexDescription.Falloff;
        varyings.Fade = vertexDescription.Fade;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.TerrainColorMatch = input.TerrainColorMatch;
        output.customInterpolators.BiasedFade = input.BiasedFade;
        output.customInterpolators.Dither = input.Dither;
        output.customInterpolators.Falloff = input.Falloff;
        output.customInterpolators.Fade = input.Fade;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        TransformWorldToObject(input.positionRWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #else
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.TerrainColorMatch = input.customInterpolators.TerrainColorMatch;
        output.BiasedFade = input.customInterpolators.BiasedFade;
        output.Dither = input.customInterpolators.Dither;
        output.Falloff = input.customInterpolators.Falloff;
        output.Fade = input.customInterpolators.Fade;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassFullScreenDebug.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
#include "Assets/VladislavTsurikov/RendererStack/Shaders/Include/GPUInstancedIndirectInclude.cginc"
#pragma instancing_options procedural:setupGPUInstancedIndirect
#pragma multi_compile_instancing
            ENDHLSL
        }
        Pass
        {
            Name "DepthOnly"
            Tags
            {
                "LightMode" = "DepthOnly"
            }
        
            // Render State
            Cull [_CullMode]
        ZWrite On
        Stencil
        {
        WriteMask [_StencilWriteMaskDepth]
        Ref [_StencilRefDepth]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        AlphaToMask [_AlphaCutoffEnable]
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        
            // Keywords
            #pragma multi_compile _ WRITE_NORMAL_BUFFER
        #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DEPTHOFFSET_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ WRITE_DECAL_BUFFER
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma multi_compile MATERIAL_QUALITY_HIGH MATERIAL_QUALITY_MEDIUM MATERIAL_QUALITY_LOW
        
        #if defined(MATERIAL_QUALITY_HIGH)
            #define KEYWORD_PERMUTATION_0
        #elif defined(MATERIAL_QUALITY_MEDIUM)
            #define KEYWORD_PERMUTATION_1
        #else
            #define KEYWORD_PERMUTATION_2
        #endif
        
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float3 TerrainColorMatch;
        float1 BiasedFade;
        float1 Dither;
        float1 Falloff;
        float1 Fade;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_DEPTH_ONLY
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D_TexelSize;
        float4 Texture2D_E1B0D043_TexelSize;
        float Vector1_a5b8b09028ce49a39f4d090894c89e22;
        float4 Texture2D_9DCAAA49_TexelSize;
        float Vector1_a6983181c8dc4691ba6a28a34c4223a6;
        float4 Texture2D_A5E0646_TexelSize;
        float Vector1_8651797e3e304e108dbd25f9d5a426ba;
        float Vector1_593c5cea6c4a42e993ed03ced4685732;
        float4 Texture2D_8713F080_TexelSize;
        float Wind_Yaw;
        float Wind_Turbulence;
        float Wind_Wavelength;
        float Wind_Speed;
        float Wind_Ripples;
        float Wind_Intensity;
        float Wind_Blast;
        float Animation_Cutoff;
        float Distance_Fade_End;
        float Distance_Fade_Start;
        float4 Fade_Color;
        float _FadeBias;
        float2 _Thickness_Remap;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Point_Repeat);
        TEXTURE2D(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        SAMPLER(sampler_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        TEXTURE2D(Texture2D_E1B0D043);
        SAMPLER(samplerTexture2D_E1B0D043);
        TEXTURE2D(Texture2D_9DCAAA49);
        SAMPLER(samplerTexture2D_9DCAAA49);
        TEXTURE2D(Texture2D_A5E0646);
        SAMPLER(samplerTexture2D_A5E0646);
        TEXTURE2D(Texture2D_8713F080);
        SAMPLER(samplerTexture2D_8713F080);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0 : TEXCOORD0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1 : TEXCOORD1;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 normalWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TerrainColorMatch;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float BiasedFade;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Fade;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TimeParameters;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 NDCPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 PixelPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TerrainColorMatch;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float BiasedFade;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Fade;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentWS : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0 : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_positionRWS_BiasedFade : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_normalWS_Dither : INTERP3;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_TerrainColorMatch_Falloff : INTERP4;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float1 Fade : INTERP5;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.packed_positionRWS_BiasedFade.xyz = input.positionRWS;
            output.packed_positionRWS_BiasedFade.w = input.BiasedFade;
            output.packed_normalWS_Dither.xyz = input.normalWS;
            output.packed_normalWS_Dither.w = input.Dither;
            output.packed_TerrainColorMatch_Falloff.xyz = input.TerrainColorMatch;
            output.packed_TerrainColorMatch_Falloff.w = input.Falloff;
            output.Fade.x = input.Fade;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.packed_positionRWS_BiasedFade.xyz;
            output.BiasedFade = input.packed_positionRWS_BiasedFade.w;
            output.normalWS = input.packed_normalWS_Dither.xyz;
            output.Dither = input.packed_normalWS_Dither.w;
            output.TerrainColorMatch = input.packed_TerrainColorMatch_Falloff.xyz;
            output.Falloff = input.packed_TerrainColorMatch_Falloff.w;
            output.Fade = input.Fade.x;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A - B;
        }
        
        struct Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float
        {
        };
        
        void SG_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float(float _ProjectionSize, Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float IN, out float2 UVs_1)
        {
        float _Property_aba1d09bf39d4a02bdc7905b2cde45e0_Out_0_Float = _ProjectionSize;
        float _Float_9e4d9f1bf87c48e2b380c48c15b4811a_Out_0_Float = _Property_aba1d09bf39d4a02bdc7905b2cde45e0_Out_0_Float;
        float3 _Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3;
        Unity_Divide_float3(SHADERGRAPH_OBJECT_POSITION, (_Float_9e4d9f1bf87c48e2b380c48c15b4811a_Out_0_Float.xxx), _Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3);
        float3 _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3;
        Unity_Subtract_float3(_Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3, float3(0.5, 0.5, 0.5), _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3);
        float2 _Swizzle_6f5079fa55ff48ab8d0ceea21aefa7a1_Out_1_Vector2 = _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3.xz;
        UVs_1 = _Swizzle_6f5079fa55ff48ab8d0ceea21aefa7a1_Out_1_Vector2;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            Rotation = radians(Rotation);
        
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void SimpleHash_float(float3 in_position, float seed, out float out_hash){
        uint X = asuint(in_position.x);
        
        uint Y = asuint(in_position.y);
        uint Z = asuint(in_position.z);
        
        uint H = X ^ 2747636419u;
        H *= 2654435769u;
        
        H >> 16;
        
        H *= 2654435769u;
        
        H ^= H >> 16;
        
        H *= 2654435769u;
        H ^= Y;
        H ^= Z;
        
        out_hash = asfloat(H / 4294967295.0);
        }
        
        struct Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float
        {
        };
        
        void SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(float Vector1_3b97c5182780489686cf16f9de4a9ade, Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float IN, out float out_frac_3)
        {
        float _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float = Vector1_3b97c5182780489686cf16f9de4a9ade;
        float _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        SimpleHash_float(SHADERGRAPH_OBJECT_POSITION, _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float, _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float);
        out_frac_3 = _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_CrossProduct_float(float3 A, float3 B, out float3 Out)
        {
            Out = cross(A, B);
        }
        
        void Unity_MatrixConstruction_Row_float (float4 M0, float4 M1, float4 M2, float4 M3, out float4x4 Out4x4, out float3x3 Out3x3, out float2x2 Out2x2)
        {
        Out4x4 = float4x4(M0.x, M0.y, M0.z, M0.w, M1.x, M1.y, M1.z, M1.w, M2.x, M2.y, M2.z, M2.w, M3.x, M3.y, M3.z, M3.w);
        Out3x3 = float3x3(M0.x, M0.y, M0.z, M1.x, M1.y, M1.z, M2.x, M2.y, M2.z);
        Out2x2 = float2x2(M0.x, M0.y, M1.x, M1.y);
        }
        
        void Unity_MatrixTranspose_float4x4(float4x4 In, out float4x4 Out)
        {
            Out = transpose(In);
        }
        
        void Unity_Multiply_float4x4_float4(float4x4 A, float4 B, out float4 Out)
        {
        Out = mul(A, B);
        }
        
        void Unity_Cosine_float(float In, out float Out)
        {
            Out = cos(In);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        struct Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float
        {
        float3 TimeParameters;
        };
        
        void SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(float3 Vector3_cd634a1fd8b749e3b0069b61d35a0614, float Vector1_26f01b8484ed48b3878989067150a580, float Vector1_92a32c418a3740aa9fff1cce06eeb97b, float Vector1_dd02a05593804ec68a8b3cbeb2abb926, float Vector1_17f0b423235f4212be9932a8f400b82e, float Vector1_caec47aa96ad4f4890a1197c25550285, Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float IN, out float phase_2)
        {
        float _Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float3 _Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3 = Vector3_cd634a1fd8b749e3b0069b61d35a0614;
        float3 _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3;
        Unity_Normalize_float3(_Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3, _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3);
        float _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float;
        Unity_Divide_float(1, _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float, _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float);
        float3 _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3, (_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3);
        float3 _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3 = float3(0, 1, 0);
        float3 _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3;
        Unity_Multiply_float3_float3((_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3);
        float3 _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3;
        Unity_CrossProduct_float(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3);
        float4x4 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4;
        float3x3 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3;
        float2x2 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2;
        Unity_MatrixConstruction_Row_float((float4(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, 1.0)), (float4(_Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, 1.0)), (float4(_CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3, 1.0)), float4 (0, 0, 0, 0), _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2);
        float4x4 _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4;
        Unity_MatrixTranspose_float4x4(_MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4);
        float4 _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4;
        Unity_Multiply_float4x4_float4(_MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4, (float4(SHADERGRAPH_OBJECT_POSITION, 1.0)), _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4);
        float _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[0];
        float _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[1];
        float _Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[2];
        float _Split_5a8651da50df48e8987e8d47412fb48b_A_4_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[3];
        float _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float;
        Unity_Add_float(_Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float, _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float, _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float);
        float _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float;
        Unity_Multiply_float_float(_Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float, _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float, _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float);
        float _Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float = Vector1_17f0b423235f4212be9932a8f400b82e;
        float _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float;
        Unity_Add_float(IN.TimeParameters.x, _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float);
        float _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float;
        Unity_Multiply_float_float(_Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float, _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float);
        float _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float;
        Unity_Divide_float(_Multiply_04af88773f75489fb7415006600bb138_Out_2_Float, _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float);
        float _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float = Vector1_caec47aa96ad4f4890a1197c25550285;
        float _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float;
        Unity_Multiply_float_float(_Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float);
        float _Add_8c99726882e64af685d2bf089a894747_Out_2_Float;
        Unity_Add_float(_Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float, _Add_8c99726882e64af685d2bf089a894747_Out_2_Float);
        float _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float;
        Unity_Cosine_float(_Add_8c99726882e64af685d2bf089a894747_Out_2_Float, _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float);
        float _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float;
        Unity_Multiply_float_float(_Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float, _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float, _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float);
        float _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float;
        Unity_Add_float(_Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float, _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float);
        float _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float;
        Unity_Add_float(_Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float, _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float);
        float _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float;
        Unity_Add_float(_Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float);
        float _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float;
        Unity_Sine_float(_Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float, _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float);
        float _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float;
        Unity_Multiply_float_float(_Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float, 0.5, _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float);
        float _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        Unity_Add_float(_Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float, 0.5, _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float);
        phase_2 = _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        }
        
        struct Bindings_Wind_43040687acbef31438764c0a962e143f_float
        {
        half4 uv1;
        float3 TimeParameters;
        };
        
        void SG_Wind_43040687acbef31438764c0a962e143f_float(float _Wind_Blast, float _Wind_Yaw, float _Wind_Intensity, float _Wind_Wavelength, float _Wind_Turbulence, float _Wind_Ripples, float _Wind_Speed, Bindings_Wind_43040687acbef31438764c0a962e143f_float IN, out float3 OutVector3_1, out float OutVector1_2, out float OutVector11_3)
        {
        float _Property_545764affa024cbea7972042aa59989c_Out_0_Float = _Wind_Yaw;
        float3 _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (0, 0, 1), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3);
        float3 _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3 = TransformWorldToObjectDir(_RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3.xyz, true);
        float _Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float = _Wind_Intensity;
        Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b;
        float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(999, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float);
        float _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float);
        float _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float;
        Unity_Multiply_float_float(_Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float, 0.125, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float);
        float _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float;
        Unity_Add_float(_Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float, _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float);
        float4 _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4 = IN.uv1;
        float _Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4.y;
        float _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float);
        float _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float = 0.5;
        float _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float;
        Unity_Add_float(_Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float, _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float, _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float);
        float _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float;
        Unity_Clamp_float(_Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float, 0.1, 16, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float);
        float _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float;
        Unity_Power_float(_Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float, _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float);
        float3 _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (1, 0, 0), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3);
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[0];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_G_2_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[1];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_B_3_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[2];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_A_4_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[3];
        float _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float;
        Unity_Multiply_float_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 1, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float);
        float _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float;
        Unity_Add_float(_Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float);
        float _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float = _Wind_Turbulence;
        float _Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float = _Wind_Wavelength;
        float _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float;
        Unity_Clamp_float(_Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float, 0.001, 10000, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float);
        float _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float = _Wind_Speed;
        float _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float;
        Unity_Multiply_float_float(_Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float);
        float _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float = _Wind_Ripples;
        Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212;
        _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212.TimeParameters = IN.TimeParameters;
        float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float;
        SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(_RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float, _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float, _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float);
        float _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float;
        Unity_Multiply_float_float(_Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float);
        float _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float;
        Unity_Multiply_float_float(_Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float, _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float);
        float _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float = _Wind_Blast;
        float _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        Unity_Add_float(_Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float, _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float, _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float);
        OutVector3_1 = _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        OutVector1_2 = _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        OutVector11_3 = _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        }
        
        void Unity_Distance_float3(float3 A, float3 B, out float Out)
        {
            Out = distance(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        struct Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float
        {
        };
        
        void SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(float Vector1_e557ca4994a347ffa4c827936e25216c, float Vector1_09637ae9919547d78bb477f8aebeaf5e, float Vector1_0f7cf1aa48e34bc0a680792872e719c1, float dither_scale, Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float IN, out float out_movement_1, out float out_fade_2, out float out_dither_3, out float out_falloff_4)
        {
        float _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float;
        Unity_Distance_float3(_WorldSpaceCameraPos, SHADERGRAPH_OBJECT_POSITION, _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float);
        float _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float = Vector1_e557ca4994a347ffa4c827936e25216c;
        float _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float, _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float);
        float _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        Unity_Saturate_float(_Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float, _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float);
        float _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float;
        Unity_Subtract_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float);
        float _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float;
        Unity_Maximum_float(0, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float, _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float);
        float _Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float;
        Unity_Subtract_float(_Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float, _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float);
        float _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float;
        Unity_Divide_float(_Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float, _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float);
        float _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        Unity_Saturate_float(_Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float, _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float);
        float _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float;
        Unity_OneMinus_float(_Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float, _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float);
        float _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float = dither_scale;
        float _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        Unity_Multiply_float_float(_OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float, _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float, _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float);
        float _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float, _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float);
        float _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        Unity_Saturate_float(_Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float, _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float);
        out_movement_1 = _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        out_fade_2 = _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        out_dither_3 = _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        out_falloff_4 = _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        }
        
        void Unity_Comparison_Less_float(float A, float B, out float Out)
        {
            Out = A < B ? 1 : 0;
        }
        
        void Unity_Rotate_About_Axis_Radians_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Preview_float(float In, out float Out)
        {
            Out = In;
        }
        
        void Unity_Dither_float(float In, float4 ScreenPosition, out float Out)
        {
            float2 uv = ScreenPosition.xy * _ScreenParams.xy;
            float DITHER_THRESHOLDS[16] =
            {
                1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
                13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
                4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
                16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
            };
            uint index = (uint(uv.x) % 4) * 4 + uint(uv.y) % 4;
            Out = In - DITHER_THRESHOLDS[index];
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float3 TerrainColorMatch;
            float BiasedFade;
            float Dither;
            float Falloff;
            float Fade;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4 = Fade_Color;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_205f896926534950958b9b69cbcc0ce4_Out_1_Float = _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4.w;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea;
            float2 _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2;
            SG_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float(2048, _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea, _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
              float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4 = float4(0.0f, 0.0f, 0.0f, 1.0f);
            #else
              float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4 = SAMPLE_TEXTURE2D_LOD(UnityBuildTexture2DStructNoScale(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D).tex, UnityBuildSamplerStateStruct(SamplerState_Point_Repeat).samplerstate, UnityBuildTexture2DStructNoScale(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D).GetTransformedUV(_TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2), 0);
            #endif
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_R_5_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.r;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_G_6_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.g;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_B_7_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.b;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_A_8_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4;
            Unity_Multiply_float4_float4(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4, _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4, _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4, _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4, (_Swizzle_205f896926534950958b9b69cbcc0ce4_Out_1_Float.xxxx), _Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float = Animation_Cutoff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float = Distance_Fade_End;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3a7e846478af4588abee730e138b7600_Out_0_Float = Distance_Fade_Start;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float = Wind_Blast;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float = Wind_Yaw;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float = Wind_Intensity;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float = Wind_Wavelength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float = Wind_Turbulence;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float = Wind_Ripples;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float = Wind_Speed;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_Wind_43040687acbef31438764c0a962e143f_float _Wind_38a1f9a8cd4543e7af23af6f67466e88;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.uv1 = IN.uv1;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.TimeParameters = IN.TimeParameters;
            float3 _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float;
            SG_Wind_43040687acbef31438764c0a962e143f_float(_Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float, _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float, _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float, _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float, _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float, _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float, _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float;
            Unity_Add_float(1, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float _DistanceCutoff_574befd6840749648d19978a8b7288cf;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(_Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float, _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float, _Property_3a7e846478af4588abee730e138b7600_Out_0_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean;
            Unity_Comparison_Less_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, 1, _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float;
            Unity_OneMinus_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float;
            Unity_Power_float(_OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float, 0.75, _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float;
            Unity_Multiply_float_float(_Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpacePosition, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            Unity_Branch_float3(_Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3, IN.ObjectSpacePosition, _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3 = float3(0, 1, 0);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float = _FadeBias;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float;
            Unity_Power_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float, _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            Unity_Lerp_float3(IN.ObjectSpaceNormal, _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3, (_Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float.xxx), _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpaceTangent, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3);
            #endif
            description.Position = _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            description.Normal = _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            description.Tangent = _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            description.TerrainColorMatch = (_Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4.xyz);
            description.BiasedFade = _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float;
            description.Dither = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            description.Falloff = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            description.Fade = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float DepthOffset;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_E1B0D043);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.tex, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.samplerstate, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_R_4_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.r;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_G_5_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.g;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_B_6_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.b;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            Unity_Lerp_float3((_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.xyz), IN.TerrainColorMatch, (float3(IN.BiasedFade.xxx)), _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float;
            Unity_Preview_float(_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float;
            Unity_Dither_float(IN.Dither, float4(IN.NDCPosition.xy, 0, 0), _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float;
            Unity_Multiply_float_float(_Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            Unity_Lerp_float(_Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float, IN.Falloff, _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float;
            Unity_OneMinus_float(IN.Falloff, _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #else
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float = Vector1_a5b8b09028ce49a39f4d090894c89e22;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_A5E0646);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.tex, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.samplerstate, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_R_4_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.r;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.g;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_B_6_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.b;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float = Vector1_8651797e3e304e108dbd25f9d5a426ba;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float, _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float, _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #else
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = 0;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float;
            Unity_OneMinus_float(IN.Fade, _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float = IN.ObjectSpacePosition.y;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float;
            Unity_Multiply_float_float(_Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float, 5, _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float;
            Unity_Saturate_float(_Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float, _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float = Vector1_593c5cea6c4a42e993ed03ced4685732;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float, _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float, _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #else
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = 1;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float;
            Unity_Minimum_float(_Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float, _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float, _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            Unity_Saturate_float(_Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float, _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_9DCAAA49);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.tex, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.samplerstate, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4);
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_R_4_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.r;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_G_5_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.g;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_B_6_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.b;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_A_7_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float = Vector1_a6983181c8dc4691ba6a28a34c4223a6;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.xyz), _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float, _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #else
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = float3(0, 0, 1);
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_8713F080);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.tex, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.samplerstate, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.r;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_G_5_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.g;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_B_6_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.b;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_A_7_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float2 _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2 = _Thickness_Remap;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float;
            Unity_Remap_float(_SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float, float2 (0, 1), _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2, _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            Unity_Lerp_float(_Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float, 1, IN.Fade, _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #else
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = 0;
            #endif
            #endif
            surface.BaseColor = _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float;
            surface.AlphaClipThreshold = _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float;
            surface.DepthOffset = 0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float;
            surface.Occlusion = _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            surface.NormalTS = _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3;
            surface.TransmissionMask = 1;
            surface.Thickness = _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080305144)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv1 =                                        input.uv1;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TimeParameters =                             _TimeParameters.xyz; // Note: in case of animation this will be overwrite (allow to handle motion vector)
        #endif
        
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        vertexDescriptionInputs.TimeParameters = timeParameters;
        #endif
        
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
            varyings.TerrainColorMatch = vertexDescription.TerrainColorMatch;
        varyings.BiasedFade = vertexDescription.BiasedFade;
        varyings.Dither = vertexDescription.Dither;
        varyings.Falloff = vertexDescription.Falloff;
        varyings.Fade = vertexDescription.Fade;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.TerrainColorMatch = input.TerrainColorMatch;
        output.customInterpolators.BiasedFade = input.BiasedFade;
        output.customInterpolators.Dither = input.Dither;
        output.customInterpolators.Falloff = input.Falloff;
        output.customInterpolators.Fade = input.Fade;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        TransformWorldToObject(input.positionRWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #else
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.TerrainColorMatch = input.customInterpolators.TerrainColorMatch;
        output.BiasedFade = input.customInterpolators.BiasedFade;
        output.Dither = input.customInterpolators.Dither;
        output.Falloff = input.customInterpolators.Falloff;
        output.Fade = input.customInterpolators.Fade;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassDepthOnly.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
#include "Assets/VladislavTsurikov/RendererStack/Shaders/Include/GPUInstancedIndirectInclude.cginc"
#pragma instancing_options procedural:setupGPUInstancedIndirect
#pragma multi_compile_instancing
            ENDHLSL
        }
        Pass
        {
            Name "GBuffer"
            Tags
            {
                "LightMode" = "GBuffer"
            }
        
            // Render State
            Cull [_CullMode]
        ZTest [_ZTestGBuffer]
        ColorMask [_LightLayersMaskBuffer4] 4
        ColorMask [_LightLayersMaskBuffer5] 5
        Stencil
        {
        WriteMask [_StencilWriteMaskGBuffer]
        Ref [_StencilRefGBuffer]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        
            // Keywords
            #pragma multi_compile_fragment _ LIGHT_LAYERS
        #pragma multi_compile_raytracing _ LIGHT_LAYERS
        #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DEPTHOFFSET_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
        #pragma multi_compile_raytracing _ SHADOWS_SHADOWMASK
        #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma multi_compile MATERIAL_QUALITY_HIGH MATERIAL_QUALITY_MEDIUM MATERIAL_QUALITY_LOW
        
        #if defined(MATERIAL_QUALITY_HIGH)
            #define KEYWORD_PERMUTATION_0
        #elif defined(MATERIAL_QUALITY_MEDIUM)
            #define KEYWORD_PERMUTATION_1
        #else
            #define KEYWORD_PERMUTATION_2
        #endif
        
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float3 TerrainColorMatch;
        float1 BiasedFade;
        float1 Dither;
        float1 Falloff;
        float1 Fade;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD2
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD2
        #endif
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_GBUFFER
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D_TexelSize;
        float4 Texture2D_E1B0D043_TexelSize;
        float Vector1_a5b8b09028ce49a39f4d090894c89e22;
        float4 Texture2D_9DCAAA49_TexelSize;
        float Vector1_a6983181c8dc4691ba6a28a34c4223a6;
        float4 Texture2D_A5E0646_TexelSize;
        float Vector1_8651797e3e304e108dbd25f9d5a426ba;
        float Vector1_593c5cea6c4a42e993ed03ced4685732;
        float4 Texture2D_8713F080_TexelSize;
        float Wind_Yaw;
        float Wind_Turbulence;
        float Wind_Wavelength;
        float Wind_Speed;
        float Wind_Ripples;
        float Wind_Intensity;
        float Wind_Blast;
        float Animation_Cutoff;
        float Distance_Fade_End;
        float Distance_Fade_Start;
        float4 Fade_Color;
        float _FadeBias;
        float2 _Thickness_Remap;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Point_Repeat);
        TEXTURE2D(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        SAMPLER(sampler_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        TEXTURE2D(Texture2D_E1B0D043);
        SAMPLER(samplerTexture2D_E1B0D043);
        TEXTURE2D(Texture2D_9DCAAA49);
        SAMPLER(samplerTexture2D_9DCAAA49);
        TEXTURE2D(Texture2D_A5E0646);
        SAMPLER(samplerTexture2D_A5E0646);
        TEXTURE2D(Texture2D_8713F080);
        SAMPLER(samplerTexture2D_8713F080);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0 : TEXCOORD0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1 : TEXCOORD1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv2 : TEXCOORD2;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 normalWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord2;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TerrainColorMatch;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float BiasedFade;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Fade;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TimeParameters;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 NDCPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 PixelPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TerrainColorMatch;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float BiasedFade;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Fade;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentWS : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0 : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord1 : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord2 : INTERP3;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_positionRWS_BiasedFade : INTERP4;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_normalWS_Dither : INTERP5;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_TerrainColorMatch_Falloff : INTERP6;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float1 Fade : INTERP7;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.texCoord1.xyzw = input.texCoord1;
            output.texCoord2.xyzw = input.texCoord2;
            output.packed_positionRWS_BiasedFade.xyz = input.positionRWS;
            output.packed_positionRWS_BiasedFade.w = input.BiasedFade;
            output.packed_normalWS_Dither.xyz = input.normalWS;
            output.packed_normalWS_Dither.w = input.Dither;
            output.packed_TerrainColorMatch_Falloff.xyz = input.TerrainColorMatch;
            output.packed_TerrainColorMatch_Falloff.w = input.Falloff;
            output.Fade.x = input.Fade;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.texCoord1 = input.texCoord1.xyzw;
            output.texCoord2 = input.texCoord2.xyzw;
            output.positionRWS = input.packed_positionRWS_BiasedFade.xyz;
            output.BiasedFade = input.packed_positionRWS_BiasedFade.w;
            output.normalWS = input.packed_normalWS_Dither.xyz;
            output.Dither = input.packed_normalWS_Dither.w;
            output.TerrainColorMatch = input.packed_TerrainColorMatch_Falloff.xyz;
            output.Falloff = input.packed_TerrainColorMatch_Falloff.w;
            output.Fade = input.Fade.x;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A - B;
        }
        
        struct Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float
        {
        };
        
        void SG_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float(float _ProjectionSize, Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float IN, out float2 UVs_1)
        {
        float _Property_aba1d09bf39d4a02bdc7905b2cde45e0_Out_0_Float = _ProjectionSize;
        float _Float_9e4d9f1bf87c48e2b380c48c15b4811a_Out_0_Float = _Property_aba1d09bf39d4a02bdc7905b2cde45e0_Out_0_Float;
        float3 _Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3;
        Unity_Divide_float3(SHADERGRAPH_OBJECT_POSITION, (_Float_9e4d9f1bf87c48e2b380c48c15b4811a_Out_0_Float.xxx), _Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3);
        float3 _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3;
        Unity_Subtract_float3(_Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3, float3(0.5, 0.5, 0.5), _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3);
        float2 _Swizzle_6f5079fa55ff48ab8d0ceea21aefa7a1_Out_1_Vector2 = _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3.xz;
        UVs_1 = _Swizzle_6f5079fa55ff48ab8d0ceea21aefa7a1_Out_1_Vector2;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            Rotation = radians(Rotation);
        
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void SimpleHash_float(float3 in_position, float seed, out float out_hash){
        uint X = asuint(in_position.x);
        
        uint Y = asuint(in_position.y);
        uint Z = asuint(in_position.z);
        
        uint H = X ^ 2747636419u;
        H *= 2654435769u;
        
        H >> 16;
        
        H *= 2654435769u;
        
        H ^= H >> 16;
        
        H *= 2654435769u;
        H ^= Y;
        H ^= Z;
        
        out_hash = asfloat(H / 4294967295.0);
        }
        
        struct Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float
        {
        };
        
        void SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(float Vector1_3b97c5182780489686cf16f9de4a9ade, Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float IN, out float out_frac_3)
        {
        float _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float = Vector1_3b97c5182780489686cf16f9de4a9ade;
        float _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        SimpleHash_float(SHADERGRAPH_OBJECT_POSITION, _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float, _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float);
        out_frac_3 = _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_CrossProduct_float(float3 A, float3 B, out float3 Out)
        {
            Out = cross(A, B);
        }
        
        void Unity_MatrixConstruction_Row_float (float4 M0, float4 M1, float4 M2, float4 M3, out float4x4 Out4x4, out float3x3 Out3x3, out float2x2 Out2x2)
        {
        Out4x4 = float4x4(M0.x, M0.y, M0.z, M0.w, M1.x, M1.y, M1.z, M1.w, M2.x, M2.y, M2.z, M2.w, M3.x, M3.y, M3.z, M3.w);
        Out3x3 = float3x3(M0.x, M0.y, M0.z, M1.x, M1.y, M1.z, M2.x, M2.y, M2.z);
        Out2x2 = float2x2(M0.x, M0.y, M1.x, M1.y);
        }
        
        void Unity_MatrixTranspose_float4x4(float4x4 In, out float4x4 Out)
        {
            Out = transpose(In);
        }
        
        void Unity_Multiply_float4x4_float4(float4x4 A, float4 B, out float4 Out)
        {
        Out = mul(A, B);
        }
        
        void Unity_Cosine_float(float In, out float Out)
        {
            Out = cos(In);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        struct Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float
        {
        float3 TimeParameters;
        };
        
        void SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(float3 Vector3_cd634a1fd8b749e3b0069b61d35a0614, float Vector1_26f01b8484ed48b3878989067150a580, float Vector1_92a32c418a3740aa9fff1cce06eeb97b, float Vector1_dd02a05593804ec68a8b3cbeb2abb926, float Vector1_17f0b423235f4212be9932a8f400b82e, float Vector1_caec47aa96ad4f4890a1197c25550285, Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float IN, out float phase_2)
        {
        float _Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float3 _Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3 = Vector3_cd634a1fd8b749e3b0069b61d35a0614;
        float3 _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3;
        Unity_Normalize_float3(_Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3, _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3);
        float _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float;
        Unity_Divide_float(1, _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float, _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float);
        float3 _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3, (_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3);
        float3 _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3 = float3(0, 1, 0);
        float3 _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3;
        Unity_Multiply_float3_float3((_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3);
        float3 _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3;
        Unity_CrossProduct_float(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3);
        float4x4 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4;
        float3x3 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3;
        float2x2 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2;
        Unity_MatrixConstruction_Row_float((float4(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, 1.0)), (float4(_Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, 1.0)), (float4(_CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3, 1.0)), float4 (0, 0, 0, 0), _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2);
        float4x4 _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4;
        Unity_MatrixTranspose_float4x4(_MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4);
        float4 _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4;
        Unity_Multiply_float4x4_float4(_MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4, (float4(SHADERGRAPH_OBJECT_POSITION, 1.0)), _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4);
        float _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[0];
        float _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[1];
        float _Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[2];
        float _Split_5a8651da50df48e8987e8d47412fb48b_A_4_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[3];
        float _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float;
        Unity_Add_float(_Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float, _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float, _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float);
        float _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float;
        Unity_Multiply_float_float(_Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float, _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float, _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float);
        float _Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float = Vector1_17f0b423235f4212be9932a8f400b82e;
        float _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float;
        Unity_Add_float(IN.TimeParameters.x, _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float);
        float _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float;
        Unity_Multiply_float_float(_Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float, _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float);
        float _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float;
        Unity_Divide_float(_Multiply_04af88773f75489fb7415006600bb138_Out_2_Float, _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float);
        float _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float = Vector1_caec47aa96ad4f4890a1197c25550285;
        float _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float;
        Unity_Multiply_float_float(_Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float);
        float _Add_8c99726882e64af685d2bf089a894747_Out_2_Float;
        Unity_Add_float(_Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float, _Add_8c99726882e64af685d2bf089a894747_Out_2_Float);
        float _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float;
        Unity_Cosine_float(_Add_8c99726882e64af685d2bf089a894747_Out_2_Float, _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float);
        float _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float;
        Unity_Multiply_float_float(_Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float, _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float, _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float);
        float _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float;
        Unity_Add_float(_Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float, _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float);
        float _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float;
        Unity_Add_float(_Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float, _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float);
        float _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float;
        Unity_Add_float(_Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float);
        float _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float;
        Unity_Sine_float(_Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float, _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float);
        float _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float;
        Unity_Multiply_float_float(_Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float, 0.5, _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float);
        float _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        Unity_Add_float(_Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float, 0.5, _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float);
        phase_2 = _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        }
        
        struct Bindings_Wind_43040687acbef31438764c0a962e143f_float
        {
        half4 uv1;
        float3 TimeParameters;
        };
        
        void SG_Wind_43040687acbef31438764c0a962e143f_float(float _Wind_Blast, float _Wind_Yaw, float _Wind_Intensity, float _Wind_Wavelength, float _Wind_Turbulence, float _Wind_Ripples, float _Wind_Speed, Bindings_Wind_43040687acbef31438764c0a962e143f_float IN, out float3 OutVector3_1, out float OutVector1_2, out float OutVector11_3)
        {
        float _Property_545764affa024cbea7972042aa59989c_Out_0_Float = _Wind_Yaw;
        float3 _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (0, 0, 1), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3);
        float3 _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3 = TransformWorldToObjectDir(_RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3.xyz, true);
        float _Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float = _Wind_Intensity;
        Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b;
        float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(999, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float);
        float _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float);
        float _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float;
        Unity_Multiply_float_float(_Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float, 0.125, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float);
        float _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float;
        Unity_Add_float(_Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float, _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float);
        float4 _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4 = IN.uv1;
        float _Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4.y;
        float _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float);
        float _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float = 0.5;
        float _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float;
        Unity_Add_float(_Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float, _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float, _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float);
        float _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float;
        Unity_Clamp_float(_Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float, 0.1, 16, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float);
        float _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float;
        Unity_Power_float(_Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float, _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float);
        float3 _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (1, 0, 0), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3);
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[0];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_G_2_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[1];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_B_3_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[2];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_A_4_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[3];
        float _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float;
        Unity_Multiply_float_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 1, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float);
        float _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float;
        Unity_Add_float(_Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float);
        float _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float = _Wind_Turbulence;
        float _Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float = _Wind_Wavelength;
        float _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float;
        Unity_Clamp_float(_Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float, 0.001, 10000, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float);
        float _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float = _Wind_Speed;
        float _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float;
        Unity_Multiply_float_float(_Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float);
        float _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float = _Wind_Ripples;
        Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212;
        _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212.TimeParameters = IN.TimeParameters;
        float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float;
        SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(_RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float, _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float, _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float);
        float _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float;
        Unity_Multiply_float_float(_Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float);
        float _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float;
        Unity_Multiply_float_float(_Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float, _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float);
        float _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float = _Wind_Blast;
        float _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        Unity_Add_float(_Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float, _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float, _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float);
        OutVector3_1 = _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        OutVector1_2 = _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        OutVector11_3 = _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        }
        
        void Unity_Distance_float3(float3 A, float3 B, out float Out)
        {
            Out = distance(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        struct Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float
        {
        };
        
        void SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(float Vector1_e557ca4994a347ffa4c827936e25216c, float Vector1_09637ae9919547d78bb477f8aebeaf5e, float Vector1_0f7cf1aa48e34bc0a680792872e719c1, float dither_scale, Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float IN, out float out_movement_1, out float out_fade_2, out float out_dither_3, out float out_falloff_4)
        {
        float _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float;
        Unity_Distance_float3(_WorldSpaceCameraPos, SHADERGRAPH_OBJECT_POSITION, _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float);
        float _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float = Vector1_e557ca4994a347ffa4c827936e25216c;
        float _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float, _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float);
        float _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        Unity_Saturate_float(_Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float, _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float);
        float _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float;
        Unity_Subtract_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float);
        float _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float;
        Unity_Maximum_float(0, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float, _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float);
        float _Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float;
        Unity_Subtract_float(_Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float, _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float);
        float _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float;
        Unity_Divide_float(_Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float, _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float);
        float _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        Unity_Saturate_float(_Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float, _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float);
        float _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float;
        Unity_OneMinus_float(_Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float, _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float);
        float _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float = dither_scale;
        float _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        Unity_Multiply_float_float(_OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float, _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float, _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float);
        float _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float, _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float);
        float _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        Unity_Saturate_float(_Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float, _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float);
        out_movement_1 = _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        out_fade_2 = _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        out_dither_3 = _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        out_falloff_4 = _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        }
        
        void Unity_Comparison_Less_float(float A, float B, out float Out)
        {
            Out = A < B ? 1 : 0;
        }
        
        void Unity_Rotate_About_Axis_Radians_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Preview_float(float In, out float Out)
        {
            Out = In;
        }
        
        void Unity_Dither_float(float In, float4 ScreenPosition, out float Out)
        {
            float2 uv = ScreenPosition.xy * _ScreenParams.xy;
            float DITHER_THRESHOLDS[16] =
            {
                1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
                13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
                4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
                16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
            };
            uint index = (uint(uv.x) % 4) * 4 + uint(uv.y) % 4;
            Out = In - DITHER_THRESHOLDS[index];
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float3 TerrainColorMatch;
            float BiasedFade;
            float Dither;
            float Falloff;
            float Fade;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4 = Fade_Color;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_205f896926534950958b9b69cbcc0ce4_Out_1_Float = _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4.w;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea;
            float2 _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2;
            SG_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float(2048, _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea, _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
              float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4 = float4(0.0f, 0.0f, 0.0f, 1.0f);
            #else
              float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4 = SAMPLE_TEXTURE2D_LOD(UnityBuildTexture2DStructNoScale(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D).tex, UnityBuildSamplerStateStruct(SamplerState_Point_Repeat).samplerstate, UnityBuildTexture2DStructNoScale(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D).GetTransformedUV(_TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2), 0);
            #endif
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_R_5_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.r;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_G_6_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.g;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_B_7_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.b;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_A_8_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4;
            Unity_Multiply_float4_float4(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4, _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4, _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4, _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4, (_Swizzle_205f896926534950958b9b69cbcc0ce4_Out_1_Float.xxxx), _Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float = Animation_Cutoff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float = Distance_Fade_End;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3a7e846478af4588abee730e138b7600_Out_0_Float = Distance_Fade_Start;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float = Wind_Blast;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float = Wind_Yaw;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float = Wind_Intensity;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float = Wind_Wavelength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float = Wind_Turbulence;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float = Wind_Ripples;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float = Wind_Speed;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_Wind_43040687acbef31438764c0a962e143f_float _Wind_38a1f9a8cd4543e7af23af6f67466e88;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.uv1 = IN.uv1;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.TimeParameters = IN.TimeParameters;
            float3 _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float;
            SG_Wind_43040687acbef31438764c0a962e143f_float(_Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float, _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float, _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float, _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float, _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float, _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float, _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float;
            Unity_Add_float(1, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float _DistanceCutoff_574befd6840749648d19978a8b7288cf;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(_Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float, _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float, _Property_3a7e846478af4588abee730e138b7600_Out_0_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean;
            Unity_Comparison_Less_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, 1, _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float;
            Unity_OneMinus_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float;
            Unity_Power_float(_OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float, 0.75, _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float;
            Unity_Multiply_float_float(_Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpacePosition, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            Unity_Branch_float3(_Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3, IN.ObjectSpacePosition, _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3 = float3(0, 1, 0);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float = _FadeBias;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float;
            Unity_Power_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float, _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            Unity_Lerp_float3(IN.ObjectSpaceNormal, _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3, (_Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float.xxx), _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpaceTangent, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3);
            #endif
            description.Position = _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            description.Normal = _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            description.Tangent = _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            description.TerrainColorMatch = (_Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4.xyz);
            description.BiasedFade = _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float;
            description.Dither = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            description.Falloff = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            description.Fade = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float DepthOffset;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
            float4 VTPackedFeedback;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_E1B0D043);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.tex, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.samplerstate, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_R_4_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.r;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_G_5_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.g;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_B_6_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.b;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            Unity_Lerp_float3((_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.xyz), IN.TerrainColorMatch, (float3(IN.BiasedFade.xxx)), _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float;
            Unity_Preview_float(_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float;
            Unity_Dither_float(IN.Dither, float4(IN.NDCPosition.xy, 0, 0), _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float;
            Unity_Multiply_float_float(_Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            Unity_Lerp_float(_Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float, IN.Falloff, _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float;
            Unity_OneMinus_float(IN.Falloff, _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #else
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float = Vector1_a5b8b09028ce49a39f4d090894c89e22;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_A5E0646);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.tex, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.samplerstate, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_R_4_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.r;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.g;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_B_6_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.b;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float = Vector1_8651797e3e304e108dbd25f9d5a426ba;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float, _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float, _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #else
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = 0;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float;
            Unity_OneMinus_float(IN.Fade, _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float = IN.ObjectSpacePosition.y;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float;
            Unity_Multiply_float_float(_Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float, 5, _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float;
            Unity_Saturate_float(_Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float, _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float = Vector1_593c5cea6c4a42e993ed03ced4685732;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float, _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float, _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #else
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = 1;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float;
            Unity_Minimum_float(_Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float, _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float, _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            Unity_Saturate_float(_Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float, _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_9DCAAA49);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.tex, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.samplerstate, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4);
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_R_4_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.r;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_G_5_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.g;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_B_6_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.b;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_A_7_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float = Vector1_a6983181c8dc4691ba6a28a34c4223a6;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.xyz), _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float, _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #else
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = float3(0, 0, 1);
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_8713F080);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.tex, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.samplerstate, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.r;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_G_5_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.g;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_B_6_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.b;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_A_7_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float2 _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2 = _Thickness_Remap;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float;
            Unity_Remap_float(_SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float, float2 (0, 1), _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2, _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            Unity_Lerp_float(_Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float, 1, IN.Fade, _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #else
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = 0;
            #endif
            #endif
            surface.BaseColor = _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float;
            surface.AlphaClipThreshold = _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float;
            surface.DepthOffset = 0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float;
            surface.Occlusion = _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            surface.NormalTS = _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3;
            surface.TransmissionMask = 1;
            surface.Thickness = _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080305144)));
            #if defined(KEYWORD_PERMUTATION_0)
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            #endif
            #if defined(KEYWORD_PERMUTATION_1)
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            #endif
            #if defined(KEYWORD_PERMUTATION_2)
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            #endif
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv1 =                                        input.uv1;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TimeParameters =                             _TimeParameters.xyz; // Note: in case of animation this will be overwrite (allow to handle motion vector)
        #endif
        
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        vertexDescriptionInputs.TimeParameters = timeParameters;
        #endif
        
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
            varyings.TerrainColorMatch = vertexDescription.TerrainColorMatch;
        varyings.BiasedFade = vertexDescription.BiasedFade;
        varyings.Dither = vertexDescription.Dither;
        varyings.Falloff = vertexDescription.Falloff;
        varyings.Fade = vertexDescription.Fade;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.texCoord1 =                  input.texCoord1;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.texCoord2 =                  input.texCoord2;
        #endif
        
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.TerrainColorMatch = input.TerrainColorMatch;
        output.customInterpolators.BiasedFade = input.BiasedFade;
        output.customInterpolators.Dither = input.Dither;
        output.customInterpolators.Falloff = input.Falloff;
        output.customInterpolators.Fade = input.Fade;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        TransformWorldToObject(input.positionRWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #else
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.TerrainColorMatch = input.customInterpolators.TerrainColorMatch;
        output.BiasedFade = input.customInterpolators.BiasedFade;
        output.Dither = input.customInterpolators.Dither;
        output.Falloff = input.customInterpolators.Falloff;
        output.Fade = input.customInterpolators.Fade;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
        #endif
        
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassGBuffer.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
#include "Assets/VladislavTsurikov/RendererStack/Shaders/Include/GPUInstancedIndirectInclude.cginc"
#pragma instancing_options procedural:setupGPUInstancedIndirect
#pragma multi_compile_instancing
            ENDHLSL
        }
        Pass
        {
            Name "Forward"
            Tags
            {
                "LightMode" = "Forward"
            }
        
            // Render State
            Cull [_CullModeForward]
        Blend [_SrcBlend] [_DstBlend], [_AlphaSrcBlend] [_AlphaDstBlend]
        Blend 1 SrcAlpha OneMinusSrcAlpha
        ZTest [_ZTestDepthEqualForOpaque]
        ZWrite [_ZWrite]
        ColorMask [_ColorMaskTransparentVelOne] 1
        ColorMask [_ColorMaskTransparentVelTwo] 2
        Stencil
        {
        WriteMask [_StencilWriteMask]
        Ref [_StencilRef]
        CompFront Always
        PassFront Replace
        CompBack Always
        PassBack Replace
        }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma multi_compile _ DOTS_INSTANCING_ON
        #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DEPTHOFFSET_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
        #pragma multi_compile_raytracing _ SHADOWS_SHADOWMASK
        #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
        #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT
        #pragma multi_compile_fragment SHADOW_LOW SHADOW_MEDIUM SHADOW_HIGH
        #pragma multi_compile_fragment AREA_SHADOW_MEDIUM AREA_SHADOW_HIGH
        #pragma multi_compile_fragment SCREEN_SPACE_SHADOWS_OFF SCREEN_SPACE_SHADOWS_ON
        #pragma multi_compile_fragment USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma multi_compile MATERIAL_QUALITY_HIGH MATERIAL_QUALITY_MEDIUM MATERIAL_QUALITY_LOW
        
        #if defined(MATERIAL_QUALITY_HIGH)
            #define KEYWORD_PERMUTATION_0
        #elif defined(MATERIAL_QUALITY_MEDIUM)
            #define KEYWORD_PERMUTATION_1
        #else
            #define KEYWORD_PERMUTATION_2
        #endif
        
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float3 TerrainColorMatch;
        float1 BiasedFade;
        float1 Dither;
        float1 Falloff;
        float1 Fade;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD2
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD2
        #endif
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_FORWARD
        #define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING 1
        #define HAS_LIGHTLOOP 1
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define SHADER_LIT 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D_TexelSize;
        float4 Texture2D_E1B0D043_TexelSize;
        float Vector1_a5b8b09028ce49a39f4d090894c89e22;
        float4 Texture2D_9DCAAA49_TexelSize;
        float Vector1_a6983181c8dc4691ba6a28a34c4223a6;
        float4 Texture2D_A5E0646_TexelSize;
        float Vector1_8651797e3e304e108dbd25f9d5a426ba;
        float Vector1_593c5cea6c4a42e993ed03ced4685732;
        float4 Texture2D_8713F080_TexelSize;
        float Wind_Yaw;
        float Wind_Turbulence;
        float Wind_Wavelength;
        float Wind_Speed;
        float Wind_Ripples;
        float Wind_Intensity;
        float Wind_Blast;
        float Animation_Cutoff;
        float Distance_Fade_End;
        float Distance_Fade_Start;
        float4 Fade_Color;
        float _FadeBias;
        float2 _Thickness_Remap;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Point_Repeat);
        TEXTURE2D(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        SAMPLER(sampler_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        TEXTURE2D(Texture2D_E1B0D043);
        SAMPLER(samplerTexture2D_E1B0D043);
        TEXTURE2D(Texture2D_9DCAAA49);
        SAMPLER(samplerTexture2D_9DCAAA49);
        TEXTURE2D(Texture2D_A5E0646);
        SAMPLER(samplerTexture2D_A5E0646);
        TEXTURE2D(Texture2D_8713F080);
        SAMPLER(samplerTexture2D_8713F080);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0 : TEXCOORD0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1 : TEXCOORD1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv2 : TEXCOORD2;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 normalWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord2;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TerrainColorMatch;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float BiasedFade;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Fade;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TimeParameters;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 NDCPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 PixelPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TerrainColorMatch;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float BiasedFade;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Fade;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentWS : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0 : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord1 : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord2 : INTERP3;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_positionRWS_BiasedFade : INTERP4;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_normalWS_Dither : INTERP5;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_TerrainColorMatch_Falloff : INTERP6;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float1 Fade : INTERP7;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.tangentWS.xyzw = input.tangentWS;
            output.texCoord0.xyzw = input.texCoord0;
            output.texCoord1.xyzw = input.texCoord1;
            output.texCoord2.xyzw = input.texCoord2;
            output.packed_positionRWS_BiasedFade.xyz = input.positionRWS;
            output.packed_positionRWS_BiasedFade.w = input.BiasedFade;
            output.packed_normalWS_Dither.xyz = input.normalWS;
            output.packed_normalWS_Dither.w = input.Dither;
            output.packed_TerrainColorMatch_Falloff.xyz = input.TerrainColorMatch;
            output.packed_TerrainColorMatch_Falloff.w = input.Falloff;
            output.Fade.x = input.Fade;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.tangentWS = input.tangentWS.xyzw;
            output.texCoord0 = input.texCoord0.xyzw;
            output.texCoord1 = input.texCoord1.xyzw;
            output.texCoord2 = input.texCoord2.xyzw;
            output.positionRWS = input.packed_positionRWS_BiasedFade.xyz;
            output.BiasedFade = input.packed_positionRWS_BiasedFade.w;
            output.normalWS = input.packed_normalWS_Dither.xyz;
            output.Dither = input.packed_normalWS_Dither.w;
            output.TerrainColorMatch = input.packed_TerrainColorMatch_Falloff.xyz;
            output.Falloff = input.packed_TerrainColorMatch_Falloff.w;
            output.Fade = input.Fade.x;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A - B;
        }
        
        struct Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float
        {
        };
        
        void SG_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float(float _ProjectionSize, Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float IN, out float2 UVs_1)
        {
        float _Property_aba1d09bf39d4a02bdc7905b2cde45e0_Out_0_Float = _ProjectionSize;
        float _Float_9e4d9f1bf87c48e2b380c48c15b4811a_Out_0_Float = _Property_aba1d09bf39d4a02bdc7905b2cde45e0_Out_0_Float;
        float3 _Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3;
        Unity_Divide_float3(SHADERGRAPH_OBJECT_POSITION, (_Float_9e4d9f1bf87c48e2b380c48c15b4811a_Out_0_Float.xxx), _Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3);
        float3 _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3;
        Unity_Subtract_float3(_Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3, float3(0.5, 0.5, 0.5), _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3);
        float2 _Swizzle_6f5079fa55ff48ab8d0ceea21aefa7a1_Out_1_Vector2 = _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3.xz;
        UVs_1 = _Swizzle_6f5079fa55ff48ab8d0ceea21aefa7a1_Out_1_Vector2;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            Rotation = radians(Rotation);
        
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void SimpleHash_float(float3 in_position, float seed, out float out_hash){
        uint X = asuint(in_position.x);
        
        uint Y = asuint(in_position.y);
        uint Z = asuint(in_position.z);
        
        uint H = X ^ 2747636419u;
        H *= 2654435769u;
        
        H >> 16;
        
        H *= 2654435769u;
        
        H ^= H >> 16;
        
        H *= 2654435769u;
        H ^= Y;
        H ^= Z;
        
        out_hash = asfloat(H / 4294967295.0);
        }
        
        struct Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float
        {
        };
        
        void SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(float Vector1_3b97c5182780489686cf16f9de4a9ade, Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float IN, out float out_frac_3)
        {
        float _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float = Vector1_3b97c5182780489686cf16f9de4a9ade;
        float _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        SimpleHash_float(SHADERGRAPH_OBJECT_POSITION, _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float, _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float);
        out_frac_3 = _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_CrossProduct_float(float3 A, float3 B, out float3 Out)
        {
            Out = cross(A, B);
        }
        
        void Unity_MatrixConstruction_Row_float (float4 M0, float4 M1, float4 M2, float4 M3, out float4x4 Out4x4, out float3x3 Out3x3, out float2x2 Out2x2)
        {
        Out4x4 = float4x4(M0.x, M0.y, M0.z, M0.w, M1.x, M1.y, M1.z, M1.w, M2.x, M2.y, M2.z, M2.w, M3.x, M3.y, M3.z, M3.w);
        Out3x3 = float3x3(M0.x, M0.y, M0.z, M1.x, M1.y, M1.z, M2.x, M2.y, M2.z);
        Out2x2 = float2x2(M0.x, M0.y, M1.x, M1.y);
        }
        
        void Unity_MatrixTranspose_float4x4(float4x4 In, out float4x4 Out)
        {
            Out = transpose(In);
        }
        
        void Unity_Multiply_float4x4_float4(float4x4 A, float4 B, out float4 Out)
        {
        Out = mul(A, B);
        }
        
        void Unity_Cosine_float(float In, out float Out)
        {
            Out = cos(In);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        struct Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float
        {
        float3 TimeParameters;
        };
        
        void SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(float3 Vector3_cd634a1fd8b749e3b0069b61d35a0614, float Vector1_26f01b8484ed48b3878989067150a580, float Vector1_92a32c418a3740aa9fff1cce06eeb97b, float Vector1_dd02a05593804ec68a8b3cbeb2abb926, float Vector1_17f0b423235f4212be9932a8f400b82e, float Vector1_caec47aa96ad4f4890a1197c25550285, Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float IN, out float phase_2)
        {
        float _Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float3 _Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3 = Vector3_cd634a1fd8b749e3b0069b61d35a0614;
        float3 _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3;
        Unity_Normalize_float3(_Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3, _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3);
        float _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float;
        Unity_Divide_float(1, _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float, _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float);
        float3 _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3, (_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3);
        float3 _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3 = float3(0, 1, 0);
        float3 _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3;
        Unity_Multiply_float3_float3((_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3);
        float3 _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3;
        Unity_CrossProduct_float(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3);
        float4x4 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4;
        float3x3 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3;
        float2x2 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2;
        Unity_MatrixConstruction_Row_float((float4(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, 1.0)), (float4(_Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, 1.0)), (float4(_CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3, 1.0)), float4 (0, 0, 0, 0), _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2);
        float4x4 _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4;
        Unity_MatrixTranspose_float4x4(_MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4);
        float4 _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4;
        Unity_Multiply_float4x4_float4(_MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4, (float4(SHADERGRAPH_OBJECT_POSITION, 1.0)), _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4);
        float _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[0];
        float _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[1];
        float _Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[2];
        float _Split_5a8651da50df48e8987e8d47412fb48b_A_4_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[3];
        float _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float;
        Unity_Add_float(_Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float, _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float, _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float);
        float _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float;
        Unity_Multiply_float_float(_Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float, _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float, _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float);
        float _Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float = Vector1_17f0b423235f4212be9932a8f400b82e;
        float _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float;
        Unity_Add_float(IN.TimeParameters.x, _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float);
        float _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float;
        Unity_Multiply_float_float(_Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float, _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float);
        float _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float;
        Unity_Divide_float(_Multiply_04af88773f75489fb7415006600bb138_Out_2_Float, _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float);
        float _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float = Vector1_caec47aa96ad4f4890a1197c25550285;
        float _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float;
        Unity_Multiply_float_float(_Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float);
        float _Add_8c99726882e64af685d2bf089a894747_Out_2_Float;
        Unity_Add_float(_Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float, _Add_8c99726882e64af685d2bf089a894747_Out_2_Float);
        float _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float;
        Unity_Cosine_float(_Add_8c99726882e64af685d2bf089a894747_Out_2_Float, _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float);
        float _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float;
        Unity_Multiply_float_float(_Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float, _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float, _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float);
        float _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float;
        Unity_Add_float(_Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float, _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float);
        float _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float;
        Unity_Add_float(_Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float, _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float);
        float _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float;
        Unity_Add_float(_Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float);
        float _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float;
        Unity_Sine_float(_Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float, _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float);
        float _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float;
        Unity_Multiply_float_float(_Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float, 0.5, _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float);
        float _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        Unity_Add_float(_Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float, 0.5, _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float);
        phase_2 = _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        }
        
        struct Bindings_Wind_43040687acbef31438764c0a962e143f_float
        {
        half4 uv1;
        float3 TimeParameters;
        };
        
        void SG_Wind_43040687acbef31438764c0a962e143f_float(float _Wind_Blast, float _Wind_Yaw, float _Wind_Intensity, float _Wind_Wavelength, float _Wind_Turbulence, float _Wind_Ripples, float _Wind_Speed, Bindings_Wind_43040687acbef31438764c0a962e143f_float IN, out float3 OutVector3_1, out float OutVector1_2, out float OutVector11_3)
        {
        float _Property_545764affa024cbea7972042aa59989c_Out_0_Float = _Wind_Yaw;
        float3 _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (0, 0, 1), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3);
        float3 _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3 = TransformWorldToObjectDir(_RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3.xyz, true);
        float _Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float = _Wind_Intensity;
        Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b;
        float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(999, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float);
        float _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float);
        float _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float;
        Unity_Multiply_float_float(_Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float, 0.125, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float);
        float _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float;
        Unity_Add_float(_Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float, _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float);
        float4 _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4 = IN.uv1;
        float _Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4.y;
        float _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float);
        float _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float = 0.5;
        float _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float;
        Unity_Add_float(_Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float, _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float, _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float);
        float _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float;
        Unity_Clamp_float(_Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float, 0.1, 16, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float);
        float _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float;
        Unity_Power_float(_Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float, _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float);
        float3 _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (1, 0, 0), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3);
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[0];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_G_2_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[1];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_B_3_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[2];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_A_4_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[3];
        float _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float;
        Unity_Multiply_float_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 1, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float);
        float _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float;
        Unity_Add_float(_Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float);
        float _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float = _Wind_Turbulence;
        float _Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float = _Wind_Wavelength;
        float _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float;
        Unity_Clamp_float(_Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float, 0.001, 10000, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float);
        float _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float = _Wind_Speed;
        float _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float;
        Unity_Multiply_float_float(_Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float);
        float _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float = _Wind_Ripples;
        Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212;
        _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212.TimeParameters = IN.TimeParameters;
        float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float;
        SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(_RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float, _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float, _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float);
        float _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float;
        Unity_Multiply_float_float(_Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float);
        float _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float;
        Unity_Multiply_float_float(_Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float, _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float);
        float _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float = _Wind_Blast;
        float _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        Unity_Add_float(_Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float, _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float, _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float);
        OutVector3_1 = _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        OutVector1_2 = _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        OutVector11_3 = _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        }
        
        void Unity_Distance_float3(float3 A, float3 B, out float Out)
        {
            Out = distance(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        struct Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float
        {
        };
        
        void SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(float Vector1_e557ca4994a347ffa4c827936e25216c, float Vector1_09637ae9919547d78bb477f8aebeaf5e, float Vector1_0f7cf1aa48e34bc0a680792872e719c1, float dither_scale, Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float IN, out float out_movement_1, out float out_fade_2, out float out_dither_3, out float out_falloff_4)
        {
        float _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float;
        Unity_Distance_float3(_WorldSpaceCameraPos, SHADERGRAPH_OBJECT_POSITION, _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float);
        float _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float = Vector1_e557ca4994a347ffa4c827936e25216c;
        float _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float, _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float);
        float _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        Unity_Saturate_float(_Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float, _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float);
        float _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float;
        Unity_Subtract_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float);
        float _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float;
        Unity_Maximum_float(0, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float, _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float);
        float _Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float;
        Unity_Subtract_float(_Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float, _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float);
        float _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float;
        Unity_Divide_float(_Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float, _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float);
        float _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        Unity_Saturate_float(_Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float, _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float);
        float _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float;
        Unity_OneMinus_float(_Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float, _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float);
        float _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float = dither_scale;
        float _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        Unity_Multiply_float_float(_OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float, _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float, _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float);
        float _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float, _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float);
        float _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        Unity_Saturate_float(_Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float, _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float);
        out_movement_1 = _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        out_fade_2 = _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        out_dither_3 = _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        out_falloff_4 = _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        }
        
        void Unity_Comparison_Less_float(float A, float B, out float Out)
        {
            Out = A < B ? 1 : 0;
        }
        
        void Unity_Rotate_About_Axis_Radians_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Preview_float(float In, out float Out)
        {
            Out = In;
        }
        
        void Unity_Dither_float(float In, float4 ScreenPosition, out float Out)
        {
            float2 uv = ScreenPosition.xy * _ScreenParams.xy;
            float DITHER_THRESHOLDS[16] =
            {
                1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
                13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
                4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
                16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
            };
            uint index = (uint(uv.x) % 4) * 4 + uint(uv.y) % 4;
            Out = In - DITHER_THRESHOLDS[index];
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float3 TerrainColorMatch;
            float BiasedFade;
            float Dither;
            float Falloff;
            float Fade;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4 = Fade_Color;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_205f896926534950958b9b69cbcc0ce4_Out_1_Float = _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4.w;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea;
            float2 _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2;
            SG_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float(2048, _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea, _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
              float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4 = float4(0.0f, 0.0f, 0.0f, 1.0f);
            #else
              float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4 = SAMPLE_TEXTURE2D_LOD(UnityBuildTexture2DStructNoScale(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D).tex, UnityBuildSamplerStateStruct(SamplerState_Point_Repeat).samplerstate, UnityBuildTexture2DStructNoScale(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D).GetTransformedUV(_TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2), 0);
            #endif
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_R_5_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.r;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_G_6_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.g;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_B_7_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.b;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_A_8_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4;
            Unity_Multiply_float4_float4(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4, _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4, _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4, _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4, (_Swizzle_205f896926534950958b9b69cbcc0ce4_Out_1_Float.xxxx), _Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float = Animation_Cutoff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float = Distance_Fade_End;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3a7e846478af4588abee730e138b7600_Out_0_Float = Distance_Fade_Start;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float = Wind_Blast;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float = Wind_Yaw;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float = Wind_Intensity;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float = Wind_Wavelength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float = Wind_Turbulence;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float = Wind_Ripples;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float = Wind_Speed;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_Wind_43040687acbef31438764c0a962e143f_float _Wind_38a1f9a8cd4543e7af23af6f67466e88;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.uv1 = IN.uv1;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.TimeParameters = IN.TimeParameters;
            float3 _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float;
            SG_Wind_43040687acbef31438764c0a962e143f_float(_Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float, _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float, _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float, _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float, _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float, _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float, _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float;
            Unity_Add_float(1, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float _DistanceCutoff_574befd6840749648d19978a8b7288cf;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(_Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float, _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float, _Property_3a7e846478af4588abee730e138b7600_Out_0_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean;
            Unity_Comparison_Less_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, 1, _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float;
            Unity_OneMinus_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float;
            Unity_Power_float(_OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float, 0.75, _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float;
            Unity_Multiply_float_float(_Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpacePosition, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            Unity_Branch_float3(_Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3, IN.ObjectSpacePosition, _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3 = float3(0, 1, 0);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float = _FadeBias;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float;
            Unity_Power_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float, _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            Unity_Lerp_float3(IN.ObjectSpaceNormal, _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3, (_Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float.xxx), _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpaceTangent, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3);
            #endif
            description.Position = _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            description.Normal = _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            description.Tangent = _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            description.TerrainColorMatch = (_Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4.xyz);
            description.BiasedFade = _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float;
            description.Dither = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            description.Falloff = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            description.Fade = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float DepthOffset;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
            float4 VTPackedFeedback;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_E1B0D043);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.tex, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.samplerstate, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_R_4_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.r;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_G_5_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.g;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_B_6_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.b;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            Unity_Lerp_float3((_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.xyz), IN.TerrainColorMatch, (float3(IN.BiasedFade.xxx)), _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float;
            Unity_Preview_float(_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float;
            Unity_Dither_float(IN.Dither, float4(IN.NDCPosition.xy, 0, 0), _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float;
            Unity_Multiply_float_float(_Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            Unity_Lerp_float(_Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float, IN.Falloff, _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float;
            Unity_OneMinus_float(IN.Falloff, _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #else
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float = Vector1_a5b8b09028ce49a39f4d090894c89e22;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_A5E0646);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.tex, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.samplerstate, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_R_4_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.r;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.g;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_B_6_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.b;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float = Vector1_8651797e3e304e108dbd25f9d5a426ba;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float, _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float, _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #else
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = 0;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float;
            Unity_OneMinus_float(IN.Fade, _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float = IN.ObjectSpacePosition.y;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float;
            Unity_Multiply_float_float(_Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float, 5, _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float;
            Unity_Saturate_float(_Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float, _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float = Vector1_593c5cea6c4a42e993ed03ced4685732;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float, _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float, _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #else
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = 1;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float;
            Unity_Minimum_float(_Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float, _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float, _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            Unity_Saturate_float(_Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float, _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_9DCAAA49);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.tex, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.samplerstate, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4);
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_R_4_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.r;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_G_5_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.g;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_B_6_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.b;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_A_7_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float = Vector1_a6983181c8dc4691ba6a28a34c4223a6;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.xyz), _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float, _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #else
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = float3(0, 0, 1);
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_8713F080);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.tex, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.samplerstate, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.r;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_G_5_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.g;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_B_6_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.b;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_A_7_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float2 _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2 = _Thickness_Remap;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float;
            Unity_Remap_float(_SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float, float2 (0, 1), _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2, _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            Unity_Lerp_float(_Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float, 1, IN.Fade, _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #else
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = 0;
            #endif
            #endif
            surface.BaseColor = _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float;
            surface.AlphaClipThreshold = _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float;
            surface.DepthOffset = 0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float;
            surface.Occlusion = _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            surface.NormalTS = _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3;
            surface.TransmissionMask = 1;
            surface.Thickness = _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080305144)));
            #if defined(KEYWORD_PERMUTATION_0)
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            #endif
            #if defined(KEYWORD_PERMUTATION_1)
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            #endif
            #if defined(KEYWORD_PERMUTATION_2)
            {
                surface.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
            }
            #endif
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv1 =                                        input.uv1;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TimeParameters =                             _TimeParameters.xyz; // Note: in case of animation this will be overwrite (allow to handle motion vector)
        #endif
        
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        vertexDescriptionInputs.TimeParameters = timeParameters;
        #endif
        
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
            varyings.TerrainColorMatch = vertexDescription.TerrainColorMatch;
        varyings.BiasedFade = vertexDescription.BiasedFade;
        varyings.Dither = vertexDescription.Dither;
        varyings.Falloff = vertexDescription.Falloff;
        varyings.Fade = vertexDescription.Fade;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.tangentToWorld =             BuildTangentToWorld(input.tangentWS, input.normalWS);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.texCoord1 =                  input.texCoord1;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.texCoord2 =                  input.texCoord2;
        #endif
        
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.TerrainColorMatch = input.TerrainColorMatch;
        output.customInterpolators.BiasedFade = input.BiasedFade;
        output.customInterpolators.Dither = input.Dither;
        output.customInterpolators.Falloff = input.Falloff;
        output.customInterpolators.Fade = input.Fade;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        TransformWorldToObject(input.positionRWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #else
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.TerrainColorMatch = input.customInterpolators.TerrainColorMatch;
        output.BiasedFade = input.customInterpolators.BiasedFade;
        output.Dither = input.customInterpolators.Dither;
        output.Falloff = input.customInterpolators.Falloff;
        output.Fade = input.customInterpolators.Fade;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
        #endif
        
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassForward.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
#include "Assets/VladislavTsurikov/RendererStack/Shaders/Include/GPUInstancedIndirectInclude.cginc"
#pragma instancing_options procedural:setupGPUInstancedIndirect
#pragma multi_compile_instancing
            ENDHLSL
        }
        Pass
        {
            Name "RayTracingPrepass"
            Tags
            {
                "LightMode" = "RayTracingPrepass"
            }
        
            // Render State
            Cull [_CullMode]
        Blend One Zero
        ZWrite On
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 4.5
        #pragma vertex Vert
        #pragma fragment Frag
        #pragma only_renderers d3d11 playstation xboxone xboxseries vulkan metal switch
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DEPTHOFFSET_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma multi_compile MATERIAL_QUALITY_HIGH MATERIAL_QUALITY_MEDIUM MATERIAL_QUALITY_LOW
        
        #if defined(MATERIAL_QUALITY_HIGH)
            #define KEYWORD_PERMUTATION_0
        #elif defined(MATERIAL_QUALITY_MEDIUM)
            #define KEYWORD_PERMUTATION_1
        #else
            #define KEYWORD_PERMUTATION_2
        #endif
        
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            struct CustomInterpolators
        {
        float3 TerrainColorMatch;
        float1 BiasedFade;
        float1 Dither;
        float1 Falloff;
        float1 Fade;
        };
        #define USE_CUSTOMINTERP_SUBSTRUCT
        
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        
            #define HAVE_MESH_MODIFICATION
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_CONSTANT
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D_TexelSize;
        float4 Texture2D_E1B0D043_TexelSize;
        float Vector1_a5b8b09028ce49a39f4d090894c89e22;
        float4 Texture2D_9DCAAA49_TexelSize;
        float Vector1_a6983181c8dc4691ba6a28a34c4223a6;
        float4 Texture2D_A5E0646_TexelSize;
        float Vector1_8651797e3e304e108dbd25f9d5a426ba;
        float Vector1_593c5cea6c4a42e993ed03ced4685732;
        float4 Texture2D_8713F080_TexelSize;
        float Wind_Yaw;
        float Wind_Turbulence;
        float Wind_Wavelength;
        float Wind_Speed;
        float Wind_Ripples;
        float Wind_Intensity;
        float Wind_Blast;
        float Animation_Cutoff;
        float Distance_Fade_End;
        float Distance_Fade_Start;
        float4 Fade_Color;
        float _FadeBias;
        float2 _Thickness_Remap;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Point_Repeat);
        TEXTURE2D(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        SAMPLER(sampler_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        TEXTURE2D(Texture2D_E1B0D043);
        SAMPLER(samplerTexture2D_E1B0D043);
        TEXTURE2D(Texture2D_9DCAAA49);
        SAMPLER(samplerTexture2D_9DCAAA49);
        TEXTURE2D(Texture2D_A5E0646);
        SAMPLER(samplerTexture2D_A5E0646);
        TEXTURE2D(Texture2D_8713F080);
        SAMPLER(samplerTexture2D_8713F080);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct AttributesMesh
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionOS : POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 normalOS : NORMAL;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 tangentOS : TANGENT;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0 : TEXCOORD0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1 : TEXCOORD1;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : INSTANCEID_SEMANTIC;
            #endif
            #endif
        };
        struct VaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 positionRWS;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TerrainColorMatch;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float BiasedFade;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Fade;
            #endif
        };
        struct VertexDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpaceTangent;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TimeParameters;
            #endif
        };
        struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 NDCPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 PixelPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TerrainColorMatch;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float BiasedFade;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Dither;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Falloff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float Fade;
            #endif
        };
        struct PackedVaryingsMeshToPS
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 texCoord0 : INTERP0;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_positionRWS_BiasedFade : INTERP1;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 packed_TerrainColorMatch_Dither : INTERP2;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 packed_Falloff_Fade : INTERP3;
            #endif
            #if UNITY_ANY_INSTANCING_ENABLED
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             uint instanceID : CUSTOM_INSTANCE_ID;
            #endif
            #endif
        };
        
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
        {
            PackedVaryingsMeshToPS output;
            ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
            output.positionCS = input.positionCS;
            output.texCoord0.xyzw = input.texCoord0;
            output.packed_positionRWS_BiasedFade.xyz = input.positionRWS;
            output.packed_positionRWS_BiasedFade.w = input.BiasedFade;
            output.packed_TerrainColorMatch_Dither.xyz = input.TerrainColorMatch;
            output.packed_TerrainColorMatch_Dither.w = input.Dither;
            output.packed_Falloff_Fade.x = input.Falloff;
            output.packed_Falloff_Fade.y = input.Fade;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        
        VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
        {
            VaryingsMeshToPS output;
            output.positionCS = input.positionCS;
            output.texCoord0 = input.texCoord0.xyzw;
            output.positionRWS = input.packed_positionRWS_BiasedFade.xyz;
            output.BiasedFade = input.packed_positionRWS_BiasedFade.w;
            output.TerrainColorMatch = input.packed_TerrainColorMatch_Dither.xyz;
            output.Dither = input.packed_TerrainColorMatch_Dither.w;
            output.Falloff = input.packed_Falloff_Fade.x;
            output.Fade = input.packed_Falloff_Fade.y;
            #if UNITY_ANY_INSTANCING_ENABLED
            output.instanceID = input.instanceID;
            #endif
            return output;
        }
        #endif
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Divide_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A / B;
        }
        
        void Unity_Subtract_float3(float3 A, float3 B, out float3 Out)
        {
            Out = A - B;
        }
        
        struct Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float
        {
        };
        
        void SG_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float(float _ProjectionSize, Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float IN, out float2 UVs_1)
        {
        float _Property_aba1d09bf39d4a02bdc7905b2cde45e0_Out_0_Float = _ProjectionSize;
        float _Float_9e4d9f1bf87c48e2b380c48c15b4811a_Out_0_Float = _Property_aba1d09bf39d4a02bdc7905b2cde45e0_Out_0_Float;
        float3 _Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3;
        Unity_Divide_float3(SHADERGRAPH_OBJECT_POSITION, (_Float_9e4d9f1bf87c48e2b380c48c15b4811a_Out_0_Float.xxx), _Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3);
        float3 _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3;
        Unity_Subtract_float3(_Divide_1acca08af17949abbe58c99a966d8a39_Out_2_Vector3, float3(0.5, 0.5, 0.5), _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3);
        float2 _Swizzle_6f5079fa55ff48ab8d0ceea21aefa7a1_Out_1_Vector2 = _Subtract_29c9c1c1717a430a96ae6f407897ce22_Out_2_Vector3.xz;
        UVs_1 = _Swizzle_6f5079fa55ff48ab8d0ceea21aefa7a1_Out_1_Vector2;
        }
        
        void Unity_Multiply_float4_float4(float4 A, float4 B, out float4 Out)
        {
            Out = A * B;
        }
        
        void Unity_Lerp_float4(float4 A, float4 B, float4 T, out float4 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Rotate_About_Axis_Degrees_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            Rotation = radians(Rotation);
        
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void SimpleHash_float(float3 in_position, float seed, out float out_hash){
        uint X = asuint(in_position.x);
        
        uint Y = asuint(in_position.y);
        uint Z = asuint(in_position.z);
        
        uint H = X ^ 2747636419u;
        H *= 2654435769u;
        
        H >> 16;
        
        H *= 2654435769u;
        
        H ^= H >> 16;
        
        H *= 2654435769u;
        H ^= Y;
        H ^= Z;
        
        out_hash = asfloat(H / 4294967295.0);
        }
        
        struct Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float
        {
        };
        
        void SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(float Vector1_3b97c5182780489686cf16f9de4a9ade, Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float IN, out float out_frac_3)
        {
        float _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float = Vector1_3b97c5182780489686cf16f9de4a9ade;
        float _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        SimpleHash_float(SHADERGRAPH_OBJECT_POSITION, _Property_fdb5ad442b4a491d9104f4eed39a04d6_Out_0_Float, _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float);
        out_frac_3 = _SimpleHashCustomFunction_1a8e3945f7574132b4177e03dd4e812f_outhash_1_Float;
        }
        
        void Unity_Subtract_float(float A, float B, out float Out)
        {
            Out = A - B;
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
        Out = A * B;
        }
        
        void Unity_Add_float(float A, float B, out float Out)
        {
            Out = A + B;
        }
        
        void Unity_Clamp_float(float In, float Min, float Max, out float Out)
        {
            Out = clamp(In, Min, Max);
        }
        
        void Unity_Power_float(float A, float B, out float Out)
        {
            Out = pow(A, B);
        }
        
        void Unity_Normalize_float3(float3 In, out float3 Out)
        {
            Out = normalize(In);
        }
        
        void Unity_Divide_float(float A, float B, out float Out)
        {
            Out = A / B;
        }
        
        void Unity_Multiply_float3_float3(float3 A, float3 B, out float3 Out)
        {
        Out = A * B;
        }
        
        void Unity_CrossProduct_float(float3 A, float3 B, out float3 Out)
        {
            Out = cross(A, B);
        }
        
        void Unity_MatrixConstruction_Row_float (float4 M0, float4 M1, float4 M2, float4 M3, out float4x4 Out4x4, out float3x3 Out3x3, out float2x2 Out2x2)
        {
        Out4x4 = float4x4(M0.x, M0.y, M0.z, M0.w, M1.x, M1.y, M1.z, M1.w, M2.x, M2.y, M2.z, M2.w, M3.x, M3.y, M3.z, M3.w);
        Out3x3 = float3x3(M0.x, M0.y, M0.z, M1.x, M1.y, M1.z, M2.x, M2.y, M2.z);
        Out2x2 = float2x2(M0.x, M0.y, M1.x, M1.y);
        }
        
        void Unity_MatrixTranspose_float4x4(float4x4 In, out float4x4 Out)
        {
            Out = transpose(In);
        }
        
        void Unity_Multiply_float4x4_float4(float4x4 A, float4 B, out float4 Out)
        {
        Out = mul(A, B);
        }
        
        void Unity_Cosine_float(float In, out float Out)
        {
            Out = cos(In);
        }
        
        void Unity_Sine_float(float In, out float Out)
        {
            Out = sin(In);
        }
        
        struct Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float
        {
        float3 TimeParameters;
        };
        
        void SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(float3 Vector3_cd634a1fd8b749e3b0069b61d35a0614, float Vector1_26f01b8484ed48b3878989067150a580, float Vector1_92a32c418a3740aa9fff1cce06eeb97b, float Vector1_dd02a05593804ec68a8b3cbeb2abb926, float Vector1_17f0b423235f4212be9932a8f400b82e, float Vector1_caec47aa96ad4f4890a1197c25550285, Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float IN, out float phase_2)
        {
        float _Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float3 _Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3 = Vector3_cd634a1fd8b749e3b0069b61d35a0614;
        float3 _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3;
        Unity_Normalize_float3(_Property_204f1db56a9b4c22b7c08b56a6cb505c_Out_0_Vector3, _Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3);
        float _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float;
        Unity_Divide_float(1, _Property_c72026786ddf4e5489cf130e8d41e646_Out_0_Float, _Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float);
        float3 _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3;
        Unity_Multiply_float3_float3(_Normalize_b25cc8796fa04916b7bc88f28487abe6_Out_1_Vector3, (_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3);
        float3 _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3 = float3(0, 1, 0);
        float3 _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3;
        Unity_Multiply_float3_float3((_Divide_e8affae72b954124ad909cf871394bbd_Out_2_Float.xxx), _Vector3_1fe735ca4eea42d5ae6b30a5c6a57900_Out_0_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3);
        float3 _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3;
        Unity_CrossProduct_float(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, _Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, _CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3);
        float4x4 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4;
        float3x3 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3;
        float2x2 _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2;
        Unity_MatrixConstruction_Row_float((float4(_Multiply_777641a2d717494699fef4804fd1d2a4_Out_2_Vector3, 1.0)), (float4(_Multiply_957ac109cc0c411495f051a625fbd405_Out_2_Vector3, 1.0)), (float4(_CrossProduct_dd910c7f6d304120850275a371d0faa8_Out_2_Vector3, 1.0)), float4 (0, 0, 0, 0), _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var3x3_5_Matrix3, _MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var2x2_6_Matrix2);
        float4x4 _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4;
        Unity_MatrixTranspose_float4x4(_MatrixConstruction_4d69da6fdcba4e0e913fab0413bdf790_var4x4_4_Matrix4, _MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4);
        float4 _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4;
        Unity_Multiply_float4x4_float4(_MatrixTranspose_6ae8ba7cb2b84842b59241751b20a787_Out_1_Matrix4, (float4(SHADERGRAPH_OBJECT_POSITION, 1.0)), _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4);
        float _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[0];
        float _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[1];
        float _Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[2];
        float _Split_5a8651da50df48e8987e8d47412fb48b_A_4_Float = _Multiply_63b845993e6d4f3fb0e155b72bc6146d_Out_2_Vector4[3];
        float _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float;
        Unity_Add_float(_Split_5a8651da50df48e8987e8d47412fb48b_B_3_Float, _Split_5a8651da50df48e8987e8d47412fb48b_G_2_Float, _Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float);
        float _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float;
        Unity_Multiply_float_float(_Add_88e24b63a4ce43e2af31038aa69af508_Out_2_Float, _Property_4d03e53709cb48e08a236fa4ee9b3bf7_Out_0_Float, _Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float);
        float _Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float = Vector1_17f0b423235f4212be9932a8f400b82e;
        float _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float = Vector1_26f01b8484ed48b3878989067150a580;
        float _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float;
        Unity_Add_float(IN.TimeParameters.x, _Property_dcd04e70c1464d019144225e0d43a021_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float);
        float _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float;
        Unity_Multiply_float_float(_Property_6188b6252e224552afdfc5a12b3f41c6_Out_0_Float, _Add_762c19098e5e4b5694ee670551e177c7_Out_2_Float, _Multiply_04af88773f75489fb7415006600bb138_Out_2_Float);
        float _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float = Vector1_dd02a05593804ec68a8b3cbeb2abb926;
        float _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float;
        Unity_Divide_float(_Multiply_04af88773f75489fb7415006600bb138_Out_2_Float, _Property_a656e3836c524dcc90e89f7cfe8510fa_Out_0_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float);
        float _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float = Vector1_caec47aa96ad4f4890a1197c25550285;
        float _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float;
        Unity_Multiply_float_float(_Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Property_ac344be60c814cbf8f70130e6726bb35_Out_0_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float);
        float _Add_8c99726882e64af685d2bf089a894747_Out_2_Float;
        Unity_Add_float(_Multiply_30ef52ec4ffe433aa27f800972e249e7_Out_2_Float, _Multiply_e55d982f0878493aa47757ea79d0dbfe_Out_2_Float, _Add_8c99726882e64af685d2bf089a894747_Out_2_Float);
        float _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float;
        Unity_Cosine_float(_Add_8c99726882e64af685d2bf089a894747_Out_2_Float, _Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float);
        float _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float = Vector1_92a32c418a3740aa9fff1cce06eeb97b;
        float _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float;
        Unity_Multiply_float_float(_Cosine_cbcc633015fe43d793e3db810c34d8cd_Out_1_Float, _Property_006d5769d8914e0f84d1f07028a858ba_Out_0_Float, _Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float);
        float _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float;
        Unity_Add_float(_Multiply_13ce8a67b8f74bad937d076baceefa12_Out_2_Float, _Split_5a8651da50df48e8987e8d47412fb48b_R_1_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float);
        float _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float;
        Unity_Add_float(_Property_eec4580e5a4f43c693a7622fafb36828_Out_0_Float, _Add_108be203cc1446bbaeb1db1c3d51e3b7_Out_2_Float, _Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float);
        float _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float;
        Unity_Add_float(_Add_e837d1ff47464ab08562c275ac5d3d00_Out_2_Float, _Divide_637b3c596ac24200b82c290dc6068d1b_Out_2_Float, _Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float);
        float _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float;
        Unity_Sine_float(_Add_c9b5f6d8c03d41d59c3a82b8ac85e9cd_Out_2_Float, _Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float);
        float _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float;
        Unity_Multiply_float_float(_Sine_3bebc544dae741b994bed594d80b6467_Out_1_Float, 0.5, _Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float);
        float _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        Unity_Add_float(_Multiply_1f35b99cd51a4eb08d822369ca8021da_Out_2_Float, 0.5, _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float);
        phase_2 = _Add_b0469ef1a4604ff9ababc1f0f8ab2e86_Out_2_Float;
        }
        
        struct Bindings_Wind_43040687acbef31438764c0a962e143f_float
        {
        half4 uv1;
        float3 TimeParameters;
        };
        
        void SG_Wind_43040687acbef31438764c0a962e143f_float(float _Wind_Blast, float _Wind_Yaw, float _Wind_Intensity, float _Wind_Wavelength, float _Wind_Turbulence, float _Wind_Ripples, float _Wind_Speed, Bindings_Wind_43040687acbef31438764c0a962e143f_float IN, out float3 OutVector3_1, out float OutVector1_2, out float OutVector11_3)
        {
        float _Property_545764affa024cbea7972042aa59989c_Out_0_Float = _Wind_Yaw;
        float3 _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (0, 0, 1), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3);
        float3 _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3 = TransformWorldToObjectDir(_RotateAboutAxis_b6237393c0dc42ef884c8eec827437d6_Out_3_Vector3.xyz, true);
        float _Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float = _Wind_Intensity;
        Bindings_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b;
        float _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        SG_RandomFromPosition_1d3c53100af6f1c4b8e84deb9f652a6f_float(999, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b, _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float);
        float _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float);
        float _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float;
        Unity_Multiply_float_float(_Subtract_265d77d1435d40759902cbf686333dd2_Out_2_Float, 0.125, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float);
        float _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float;
        Unity_Add_float(_Property_c08e84cf935b42cbaf28cd2682be1f20_Out_0_Float, _Multiply_477ce6c1379f4848b4cd9dbe70313ac6_Out_2_Float, _Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float);
        float4 _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4 = IN.uv1;
        float _Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4.y;
        float _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float;
        Unity_Subtract_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 0.5, _Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float);
        float _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float = 0.5;
        float _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float;
        Unity_Add_float(_Subtract_57347a45af3e40098694a5362dadc257_Out_2_Float, _Float_db47adf4ccc04d7585901792675ee312_Out_0_Float, _Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float);
        float _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float;
        Unity_Clamp_float(_Add_44eebb9b6dad4354bd09fcc1789c6829_Out_2_Float, 0.1, 16, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float);
        float _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float;
        Unity_Power_float(_Swizzle_77d1d04a9f4741ba9a941d315be8a0ca_Out_1_Float, _Clamp_04ba76b0cdfc4b37bb7c233942e75af8_Out_3_Float, _Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float);
        float3 _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3;
        Unity_Rotate_About_Axis_Degrees_float(float3 (1, 0, 0), float3 (0, 1, 0), _Property_545764affa024cbea7972042aa59989c_Out_0_Float, _RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3);
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[0];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_G_2_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[1];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_B_3_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[2];
        float _Split_d3ac30c1980746cfb1f60c91ba38716b_A_4_Float = _UV_b41b3513bb76430cb2a34a96f972bce9_Out_0_Vector4[3];
        float _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float;
        Unity_Multiply_float_float(_RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float, 1, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float);
        float _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float;
        Unity_Add_float(_Split_d3ac30c1980746cfb1f60c91ba38716b_R_1_Float, _Multiply_4f0ea97e67e745598e9b39216b65a3a1_Out_2_Float, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float);
        float _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float = _Wind_Turbulence;
        float _Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float = _Wind_Wavelength;
        float _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float;
        Unity_Clamp_float(_Property_b7c67bd3dcd645c58a722e315ecbade4_Out_0_Float, 0.001, 10000, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float);
        float _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float = _Wind_Speed;
        float _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float;
        Unity_Multiply_float_float(_Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Property_df672934871e416d942ab89b55aee6e9_Out_0_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float);
        float _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float = _Wind_Ripples;
        Bindings_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212;
        _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212.TimeParameters = IN.TimeParameters;
        float _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float;
        SG_AnimatedGrassPhase_baa12ab73b962474eb9afea9483e1f0f_float(_RotateAboutAxis_fdfc80d9c6bf49408f92018801fa069e_Out_3_Vector3, _Add_8bdd76fcb5c149a295b514b6ae6a7a2a_Out_2_Float, _Property_40132028548941af95fd0caad9f4b58e_Out_0_Float, _Clamp_55dd432bda6547368217052e629ad092_Out_3_Float, _Multiply_60c22ded6d5545a6ab376639862fac0a_Out_2_Float, _Property_c3150ff062924df2bf934209f8f7c68c_Out_0_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float);
        float _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float;
        Unity_Multiply_float_float(_Power_b59746cfcc25461590978e5460d60b4c_Out_2_Float, _AnimatedGrassPhase_957994e2f5ff4c958fae05c04f641212_phase_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float);
        float _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float;
        Unity_Multiply_float_float(_Add_c30c694d04784f1f84e0e14830b704ac_Out_2_Float, _Multiply_d116f9c01f4b425988f41877ce9e4891_Out_2_Float, _Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float);
        float _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float = _Wind_Blast;
        float _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        Unity_Add_float(_Multiply_61bc0319ff1e409fb0e8597fb297aecb_Out_2_Float, _Property_abdaae85ff9148c5a8b236b2ac309e78_Out_0_Float, _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float);
        OutVector3_1 = _Transform_210b3054cfa7464fb570929d26ec6b6d_Out_1_Vector3;
        OutVector1_2 = _Add_525978928afa448684e3ea4c9e2def37_Out_2_Float;
        OutVector11_3 = _RandomFromPosition_fa76eb606c4443b0bd5f630fabf7124b_outfrac_3_Float;
        }
        
        void Unity_Distance_float3(float3 A, float3 B, out float Out)
        {
            Out = distance(A, B);
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Maximum_float(float A, float B, out float Out)
        {
            Out = max(A, B);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        struct Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float
        {
        };
        
        void SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(float Vector1_e557ca4994a347ffa4c827936e25216c, float Vector1_09637ae9919547d78bb477f8aebeaf5e, float Vector1_0f7cf1aa48e34bc0a680792872e719c1, float dither_scale, Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float IN, out float out_movement_1, out float out_fade_2, out float out_dither_3, out float out_falloff_4)
        {
        float _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float;
        Unity_Distance_float3(_WorldSpaceCameraPos, SHADERGRAPH_OBJECT_POSITION, _Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float);
        float _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float = Vector1_e557ca4994a347ffa4c827936e25216c;
        float _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_e212707199c34cc9b80c1b5b07e392fc_Out_0_Float, _Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float);
        float _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        Unity_Saturate_float(_Divide_8b51cf2b00f5460b9677de785fe4f08a_Out_2_Float, _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float);
        float _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float;
        Unity_Subtract_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_208a982ea50e42fa84fe244279695eda_Out_0_Float, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float);
        float _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float;
        Unity_Maximum_float(0, _Subtract_733fb34d6ad44b518164acc63656086f_Out_2_Float, _Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float);
        float _Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float = Vector1_0f7cf1aa48e34bc0a680792872e719c1;
        float _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float;
        Unity_Subtract_float(_Property_cfdc938922ba4908bc711254a3772feb_Out_0_Float, _Property_0248a6dbae79453380b5458d9a7cde82_Out_0_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float);
        float _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float;
        Unity_Divide_float(_Maximum_575c2bf798454a9a979ed23b6847bb0d_Out_2_Float, _Subtract_c83b244914a74896b601fcf51da9a936_Out_2_Float, _Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float);
        float _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        Unity_Saturate_float(_Divide_2d069ce090e7457e86d5f74b8f1732ed_Out_2_Float, _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float);
        float _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float;
        Unity_OneMinus_float(_Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float, _OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float);
        float _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float = dither_scale;
        float _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        Unity_Multiply_float_float(_OneMinus_977e1686960147e7a8c217be33a23fd2_Out_1_Float, _Property_d60ca8082844422ca5fc821a59d31187_Out_0_Float, _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float);
        float _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float = Vector1_09637ae9919547d78bb477f8aebeaf5e;
        float _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float;
        Unity_Divide_float(_Distance_9070b0f58d9f434db89cf1bc3215addb_Out_2_Float, _Property_b7e2abc577154823b7f35a9d519ad996_Out_0_Float, _Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float);
        float _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        Unity_Saturate_float(_Divide_98a60ea86b0d48938042ded6f43c9af4_Out_2_Float, _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float);
        out_movement_1 = _Saturate_8ca0c77ee32d49b2883a99311865ea41_Out_1_Float;
        out_fade_2 = _Saturate_9088d68cc84d485199bbc748827e0049_Out_1_Float;
        out_dither_3 = _Multiply_3e42b3bab93f4243a95b20393a3a7a3e_Out_2_Float;
        out_falloff_4 = _Saturate_aabc8e0013ea44aeb0d33c3d7cb27280_Out_1_Float;
        }
        
        void Unity_Comparison_Less_float(float A, float B, out float Out)
        {
            Out = A < B ? 1 : 0;
        }
        
        void Unity_Rotate_About_Axis_Radians_float(float3 In, float3 Axis, float Rotation, out float3 Out)
        {
            float s = sin(Rotation);
            float c = cos(Rotation);
            float one_minus_c = 1.0 - c;
        
            Axis = normalize(Axis);
        
            float3x3 rot_mat = { one_minus_c * Axis.x * Axis.x + c,            one_minus_c * Axis.x * Axis.y - Axis.z * s,     one_minus_c * Axis.z * Axis.x + Axis.y * s,
                                      one_minus_c * Axis.x * Axis.y + Axis.z * s,   one_minus_c * Axis.y * Axis.y + c,              one_minus_c * Axis.y * Axis.z - Axis.x * s,
                                      one_minus_c * Axis.z * Axis.x - Axis.y * s,   one_minus_c * Axis.y * Axis.z + Axis.x * s,     one_minus_c * Axis.z * Axis.z + c
                                    };
        
            Out = mul(rot_mat,  In);
        }
        
        void Unity_Branch_float3(float Predicate, float3 True, float3 False, out float3 Out)
        {
            Out = Predicate ? True : False;
        }
        
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Preview_float(float In, out float Out)
        {
            Out = In;
        }
        
        void Unity_Dither_float(float In, float4 ScreenPosition, out float Out)
        {
            float2 uv = ScreenPosition.xy * _ScreenParams.xy;
            float DITHER_THRESHOLDS[16] =
            {
                1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
                13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
                4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
                16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
            };
            uint index = (uint(uv.x) % 4) * 4 + uint(uv.y) % 4;
            Out = In - DITHER_THRESHOLDS[index];
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
            // Graph Vertex
            struct VertexDescription
        {
            float3 Position;
            float3 Normal;
            float3 Tangent;
            float3 TerrainColorMatch;
            float BiasedFade;
            float Dither;
            float Falloff;
            float Fade;
        };
        
        VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
        {
            VertexDescription description = (VertexDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4 = Fade_Color;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_205f896926534950958b9b69cbcc0ce4_Out_1_Float = _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4.w;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea;
            float2 _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2;
            SG_TerrainMatchUV_4bfc6d9830dbb014080890b4b2fe6275_float(2048, _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea, _TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(SHADER_API_GLES) && (SHADER_TARGET < 30)
              float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4 = float4(0.0f, 0.0f, 0.0f, 1.0f);
            #else
              float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4 = SAMPLE_TEXTURE2D_LOD(UnityBuildTexture2DStructNoScale(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D).tex, UnityBuildSamplerStateStruct(SamplerState_Point_Repeat).samplerstate, UnityBuildTexture2DStructNoScale(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D).GetTransformedUV(_TerrainMatchUV_48dc9fb787374dc089ba0d4b6e6aa0ea_UVs_1_Vector2), 0);
            #endif
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_R_5_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.r;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_G_6_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.g;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_B_7_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.b;
            float _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_A_8_Float = _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4;
            Unity_Multiply_float4_float4(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4, _Property_f47bb41cbf0a4426ba0cf0f39d8bce78_Out_0_Vector4, _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4;
            Unity_Lerp_float4(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_RGBA_0_Vector4, _Multiply_dc8b60c3249a45338fef3a8f822f2c87_Out_2_Vector4, (_Swizzle_205f896926534950958b9b69cbcc0ce4_Out_1_Float.xxxx), _Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float = Animation_Cutoff;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float = Distance_Fade_End;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3a7e846478af4588abee730e138b7600_Out_0_Float = Distance_Fade_Start;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float = Wind_Blast;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float = Wind_Yaw;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float = Wind_Intensity;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float = Wind_Wavelength;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float = Wind_Turbulence;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float = Wind_Ripples;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float = Wind_Speed;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_Wind_43040687acbef31438764c0a962e143f_float _Wind_38a1f9a8cd4543e7af23af6f67466e88;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.uv1 = IN.uv1;
            _Wind_38a1f9a8cd4543e7af23af6f67466e88.TimeParameters = IN.TimeParameters;
            float3 _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float;
            float _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float;
            SG_Wind_43040687acbef31438764c0a962e143f_float(_Property_0004c9291f8e42fe8eee9107eedff443_Out_0_Float, _Property_22435519b2234c6d92c6b467fa17b40b_Out_0_Float, _Property_86c74d436dfa46c2aca1a0c10df4f551_Out_0_Float, _Property_a414e75c5dd44d6e865f068c60b1fb9e_Out_0_Float, _Property_faf61269176b454d8d72c6cecbf71988_Out_0_Float, _Property_ada5ad4374e6404b99a7002bc10d3adc_Out_0_Float, _Property_86dea8649f5a434aaec53d309a8be1e7_Out_0_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float;
            Unity_Add_float(1, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector11_3_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            Bindings_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float _DistanceCutoff_574befd6840749648d19978a8b7288cf;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            float _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            SG_DistanceCutoff_6c605407cd6fa244f8ff68955ae4b09f_float(_Property_40ee40a928d947c29e1ec0025331ef99_Out_0_Float, _Property_e7f24f278a184d48a5a9309e6c50f05b_Out_0_Float, _Property_3a7e846478af4588abee730e138b7600_Out_0_Float, _Add_dba0dc31fc5345aaa7f7aadd57cd2143_Out_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float, _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean;
            Unity_Comparison_Less_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, 1, _Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float;
            Unity_OneMinus_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outmovement_1_Float, _OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float;
            Unity_Power_float(_OneMinus_589f556f9ef14d52891b23df211bb6ce_Out_1_Float, 0.75, _Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float;
            Unity_Multiply_float_float(_Power_58f7c464ac8f4417a2f03c73d9ed4556_Out_2_Float, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector1_2_Float, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpacePosition, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            Unity_Branch_float3(_Comparison_f3616753e04743468b894301c6da8b4e_Out_2_Boolean, _RotateAboutAxis_f6f6a2bf20ec4da69c2676a2619ad7d7_Out_3_Vector3, IN.ObjectSpacePosition, _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3 = float3(0, 1, 0);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float = _FadeBias;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float;
            Unity_Power_float(_DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float, _Property_b2c35431f5e64da1b04067b0f591bad4_Out_0_Float, _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            Unity_Lerp_float3(IN.ObjectSpaceNormal, _Vector3_876da79cb1bd496ba3d3a0058a514dec_Out_0_Vector3, (_Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float.xxx), _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            Unity_Rotate_About_Axis_Radians_float(IN.ObjectSpaceTangent, _Wind_38a1f9a8cd4543e7af23af6f67466e88_OutVector3_1_Vector3, _Multiply_3d88860f9647465f8ee2436a4dc17fdc_Out_2_Float, _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3);
            #endif
            description.Position = _Branch_9d2881055e464e80bff63660ea41c8da_Out_3_Vector3;
            description.Normal = _Lerp_6589a3bbc8774d89be5d65a635b8f345_Out_3_Vector3;
            description.Tangent = _RotateAboutAxis_e6a8e7d7ce2f4ff3886597629d3b60f1_Out_3_Vector3;
            description.TerrainColorMatch = (_Lerp_51c40274ad2b4da3a9ddfc9aba9cf8f5_Out_3_Vector4.xyz);
            description.BiasedFade = _Power_f7e446a8f4b14768aebb1fd2bbba566a_Out_2_Float;
            description.Dither = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outdither_3_Float;
            description.Falloff = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfalloff_4_Float;
            description.Fade = _DistanceCutoff_574befd6840749648d19978a8b7288cf_outfade_2_Float;
            return description;
        }
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float DepthOffset;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_E1B0D043);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.tex, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.samplerstate, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_R_4_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.r;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_G_5_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.g;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_B_6_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.b;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            Unity_Lerp_float3((_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.xyz), IN.TerrainColorMatch, (float3(IN.BiasedFade.xxx)), _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float;
            Unity_Preview_float(_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float;
            Unity_Dither_float(IN.Dither, float4(IN.NDCPosition.xy, 0, 0), _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float;
            Unity_Multiply_float_float(_Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            Unity_Lerp_float(_Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float, IN.Falloff, _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float;
            Unity_OneMinus_float(IN.Falloff, _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #else
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float = Vector1_a5b8b09028ce49a39f4d090894c89e22;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_A5E0646);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.tex, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.samplerstate, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_R_4_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.r;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.g;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_B_6_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.b;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float = Vector1_8651797e3e304e108dbd25f9d5a426ba;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float, _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float, _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #else
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = 0;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float;
            Unity_OneMinus_float(IN.Fade, _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float = IN.ObjectSpacePosition.y;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float;
            Unity_Multiply_float_float(_Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float, 5, _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float;
            Unity_Saturate_float(_Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float, _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float = Vector1_593c5cea6c4a42e993ed03ced4685732;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float, _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float, _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #else
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = 1;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float;
            Unity_Minimum_float(_Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float, _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float, _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            Unity_Saturate_float(_Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float, _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_9DCAAA49);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.tex, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.samplerstate, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4);
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_R_4_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.r;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_G_5_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.g;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_B_6_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.b;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_A_7_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float = Vector1_a6983181c8dc4691ba6a28a34c4223a6;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.xyz), _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float, _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #else
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = float3(0, 0, 1);
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_8713F080);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.tex, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.samplerstate, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.r;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_G_5_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.g;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_B_6_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.b;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_A_7_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float2 _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2 = _Thickness_Remap;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float;
            Unity_Remap_float(_SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float, float2 (0, 1), _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2, _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            Unity_Lerp_float(_Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float, 1, IN.Fade, _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #else
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = 0;
            #endif
            #endif
            surface.BaseColor = _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float;
            surface.AlphaClipThreshold = _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float;
            surface.DepthOffset = 0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float;
            surface.Occlusion = _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            surface.NormalTS = _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3;
            surface.TransmissionMask = 1;
            surface.Thickness = _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080305144)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            
        VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
        {
            VertexDescriptionInputs output;
            ZERO_INITIALIZE(VertexDescriptionInputs, output);
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceNormal =                          input.normalOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpaceTangent =                         input.tangentOS.xyz;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        input.positionOS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv1 =                                        input.uv1;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TimeParameters =                             _TimeParameters.xyz; // Note: in case of animation this will be overwrite (allow to handle motion vector)
        #endif
        
        
            return output;
        }
        
        VertexDescription GetVertexDescription(AttributesMesh input, float3 timeParameters
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            // build graph inputs
            VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);
            // Override time parameters with used one (This is required to correctly handle motion vectors for vertex animation based on time)
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        vertexDescriptionInputs.TimeParameters = timeParameters;
        #endif
        
        
            // evaluate vertex graph
        #ifdef HAVE_VFX_MODIFICATION
            GraphProperties properties;
            ZERO_INITIALIZE(GraphProperties, properties);
        
            // Fetch the vertex graph properties for the particle instance.
            GetElementVertexProperties(element, properties);
        
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs, properties);
        #else
            VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);
        #endif
            return vertexDescription;
        
        }
        
        AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters
        #ifdef USE_CUSTOMINTERP_SUBSTRUCT
            #ifdef TESSELLATION_ON
            , inout VaryingsMeshToDS varyings
            #else
            , inout VaryingsMeshToPS varyings
            #endif
        #endif
        #ifdef HAVE_VFX_MODIFICATION
                , AttributesElement element
        #endif
            )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, timeParameters
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
        
            // copy graph output to the results
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.positionOS = vertexDescription.Position;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.normalOS = vertexDescription.Normal;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        input.tangentOS.xyz = vertexDescription.Tangent;
        #endif
        
        
            varyings.TerrainColorMatch = vertexDescription.TerrainColorMatch;
        varyings.BiasedFade = vertexDescription.BiasedFade;
        varyings.Dither = vertexDescription.Dither;
        varyings.Falloff = vertexDescription.Falloff;
        varyings.Fade = vertexDescription.Fade;
        
            return input;
        }
        
        #if defined(_ADD_CUSTOM_VELOCITY) // For shader graph custom velocity
        // Return precomputed Velocity in object space
        float3 GetCustomVelocity(AttributesMesh input
        #ifdef HAVE_VFX_MODIFICATION
            , AttributesElement element
        #endif
        )
        {
            VertexDescription vertexDescription = GetVertexDescription(input, _TimeParameters.xyz
        #ifdef HAVE_VFX_MODIFICATION
                , element
        #endif
            );
            return vertexDescription.CustomVelocity;
        }
        #endif
        
        FragInputs BuildFragInputs(VaryingsMeshToPS input)
        {
            FragInputs output;
            ZERO_INITIALIZE(FragInputs, output);
        
            // Init to some default value to make the computer quiet (else it output 'divide by zero' warning even if value is not used).
            // TODO: this is a really poor workaround, but the variable is used in a bunch of places
            // to compute normals which are then passed on elsewhere to compute other values...
            output.tangentToWorld = k_identity3x3;
            output.positionSS = input.positionCS;       // input.positionCS is SV_Position
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionRWS =                input.positionRWS;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.positionPixel =              input.positionCS.xy; // NOTE: this is not actually in clip space, it is the VPOS pixel coordinate value
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.texCoord0 =                  input.texCoord0;
        #endif
        
        
        #ifdef HAVE_VFX_MODIFICATION
            // FragInputs from VFX come from two places: Interpolator or CBuffer.
        #if VFX_USE_GRAPH_VALUES
            uint instanceActiveIndex = asuint(UNITY_ACCESS_INSTANCED_PROP(PerInstance, _InstanceActiveIndex));
            /* WARNING: $splice Could not find named fragment 'VFXLoadGraphValues' */
        #endif
        
            /* WARNING: $splice Could not find named fragment 'VFXSetFragInputs' */
        
        #endif
        
            // splice point to copy custom interpolator fields from varyings to frag inputs
            output.customInterpolators.TerrainColorMatch = input.TerrainColorMatch;
        output.customInterpolators.BiasedFade = input.BiasedFade;
        output.customInterpolators.Dither = input.Dither;
        output.customInterpolators.Falloff = input.Falloff;
        output.customInterpolators.Fade = input.Fade;
        
            return output;
        }
        
        // existing HDRP code uses the combined function to go directly from packed to frag inputs
        FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
        {
            UNITY_SETUP_INSTANCE_ID(input);
        #if defined(HAVE_VFX_MODIFICATION) && defined(UNITY_INSTANCING_ENABLED)
            unity_InstanceID = input.instanceID;
        #endif
            VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
            return BuildFragInputs(unpacked);
        }
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        TransformWorldToObject(input.positionRWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #else
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            output.TerrainColorMatch = input.customInterpolators.TerrainColorMatch;
        output.BiasedFade = input.customInterpolators.BiasedFade;
        output.Dither = input.customInterpolators.Dither;
        output.Falloff = input.customInterpolators.Falloff;
        output.Fade = input.customInterpolators.Fade;
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassConstant.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
#include "Assets/VladislavTsurikov/RendererStack/Shaders/Include/GPUInstancedIndirectInclude.cginc"
#pragma instancing_options procedural:setupGPUInstancedIndirect
#pragma multi_compile_instancing
            ENDHLSL
        }
    }
    SubShader
    {
        Tags
        {
            "RenderPipeline"="HDRenderPipeline"
            "RenderType"="HDLitShader"
            "Queue"="AlphaTest+0"
            "DisableBatching"="False"
            "ShaderGraphShader"="true"
            "ShaderGraphTargetId"="HDLitSubTarget"
        }
        Pass
        {
            Name "IndirectDXR"
            Tags
            {
                "LightMode" = "IndirectDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma multi_compile _ MULTI_BOUNCE_INDIRECT
        #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DEPTHOFFSET_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma multi_compile MATERIAL_QUALITY_HIGH MATERIAL_QUALITY_MEDIUM MATERIAL_QUALITY_LOW
        
        #if defined(MATERIAL_QUALITY_HIGH)
            #define KEYWORD_PERMUTATION_0
        #elif defined(MATERIAL_QUALITY_MEDIUM)
            #define KEYWORD_PERMUTATION_1
        #else
            #define KEYWORD_PERMUTATION_2
        #endif
        
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD2
        #endif
        
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD2
        #endif
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_INDIRECT
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define HAS_LIGHTLOOP 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D_TexelSize;
        float4 Texture2D_E1B0D043_TexelSize;
        float Vector1_a5b8b09028ce49a39f4d090894c89e22;
        float4 Texture2D_9DCAAA49_TexelSize;
        float Vector1_a6983181c8dc4691ba6a28a34c4223a6;
        float4 Texture2D_A5E0646_TexelSize;
        float Vector1_8651797e3e304e108dbd25f9d5a426ba;
        float Vector1_593c5cea6c4a42e993ed03ced4685732;
        float4 Texture2D_8713F080_TexelSize;
        float Wind_Yaw;
        float Wind_Turbulence;
        float Wind_Wavelength;
        float Wind_Speed;
        float Wind_Ripples;
        float Wind_Intensity;
        float Wind_Blast;
        float Animation_Cutoff;
        float Distance_Fade_End;
        float Distance_Fade_Start;
        float4 Fade_Color;
        float _FadeBias;
        float2 _Thickness_Remap;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Point_Repeat);
        TEXTURE2D(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        SAMPLER(sampler_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        TEXTURE2D(Texture2D_E1B0D043);
        SAMPLER(samplerTexture2D_E1B0D043);
        TEXTURE2D(Texture2D_9DCAAA49);
        SAMPLER(samplerTexture2D_9DCAAA49);
        TEXTURE2D(Texture2D_A5E0646);
        SAMPLER(samplerTexture2D_A5E0646);
        TEXTURE2D(Texture2D_8713F080);
        SAMPLER(samplerTexture2D_8713F080);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 NDCPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 PixelPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0;
            #endif
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Preview_float(float In, out float Out)
        {
            Out = In;
        }
        
        void Unity_Dither_float(float In, float4 ScreenPosition, out float Out)
        {
            float2 uv = ScreenPosition.xy * _ScreenParams.xy;
            float DITHER_THRESHOLDS[16] =
            {
                1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
                13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
                4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
                16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
            };
            uint index = (uint(uv.x) % 4) * 4 + uint(uv.y) % 4;
            Out = In - DITHER_THRESHOLDS[index];
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float DepthOffset;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_E1B0D043);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.tex, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.samplerstate, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_R_4_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.r;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_G_5_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.g;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_B_6_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.b;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            Unity_Lerp_float3((_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.xyz), (float3(float4(0,0,0,0).xyz)), (float3(float4(0,0,0,0).xyz)), _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float;
            Unity_Preview_float(_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float;
            Unity_Dither_float((float1(float4(0,0,0,0).x)), float4(IN.NDCPosition.xy, 0, 0), _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float;
            Unity_Multiply_float_float(_Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            Unity_Lerp_float(_Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float, (float1(float4(0,0,0,0).x)), _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float;
            Unity_OneMinus_float((float1(float4(0,0,0,0).x)), _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #else
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float = Vector1_a5b8b09028ce49a39f4d090894c89e22;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_A5E0646);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.tex, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.samplerstate, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_R_4_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.r;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.g;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_B_6_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.b;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float = Vector1_8651797e3e304e108dbd25f9d5a426ba;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float, _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float, _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #else
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = 0;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float;
            Unity_OneMinus_float((float1(float4(0,0,0,0).x)), _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float = IN.ObjectSpacePosition.y;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float;
            Unity_Multiply_float_float(_Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float, 5, _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float;
            Unity_Saturate_float(_Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float, _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float = Vector1_593c5cea6c4a42e993ed03ced4685732;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float, _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float, _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #else
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = 1;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float;
            Unity_Minimum_float(_Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float, _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float, _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            Unity_Saturate_float(_Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float, _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_9DCAAA49);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.tex, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.samplerstate, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4);
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_R_4_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.r;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_G_5_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.g;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_B_6_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.b;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_A_7_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float = Vector1_a6983181c8dc4691ba6a28a34c4223a6;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.xyz), _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float, _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #else
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = float3(0, 0, 1);
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_8713F080);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.tex, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.samplerstate, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.r;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_G_5_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.g;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_B_6_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.b;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_A_7_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float2 _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2 = _Thickness_Remap;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float;
            Unity_Remap_float(_SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float, float2 (0, 1), _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2, _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            Unity_Lerp_float(_Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float, 1, (float1(float4(0,0,0,0).x)), _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #else
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = 0;
            #endif
            #endif
            surface.BaseColor = _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float;
            surface.AlphaClipThreshold = _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float;
            surface.DepthOffset = 0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float;
            surface.Occlusion = _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            surface.NormalTS = _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3;
            surface.TransmissionMask = 1;
            surface.Thickness = _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080305144)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        TransformWorldToObject(input.positionRWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #else
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingIndirect.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
#include "Assets/VladislavTsurikov/RendererStack/Shaders/Include/GPUInstancedIndirectInclude.cginc"
#pragma instancing_options procedural:setupGPUInstancedIndirect
#pragma multi_compile_instancing
            ENDHLSL
        }
        Pass
        {
            Name "VisibilityDXR"
            Tags
            {
                "LightMode" = "VisibilityDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma multi_compile _ TRANSPARENT_COLOR_SHADOW
        #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DEPTHOFFSET_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma multi_compile MATERIAL_QUALITY_HIGH MATERIAL_QUALITY_MEDIUM MATERIAL_QUALITY_LOW
        
        #if defined(MATERIAL_QUALITY_HIGH)
            #define KEYWORD_PERMUTATION_0
        #elif defined(MATERIAL_QUALITY_MEDIUM)
            #define KEYWORD_PERMUTATION_1
        #else
            #define KEYWORD_PERMUTATION_2
        #endif
        
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_VISIBILITY
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D_TexelSize;
        float4 Texture2D_E1B0D043_TexelSize;
        float Vector1_a5b8b09028ce49a39f4d090894c89e22;
        float4 Texture2D_9DCAAA49_TexelSize;
        float Vector1_a6983181c8dc4691ba6a28a34c4223a6;
        float4 Texture2D_A5E0646_TexelSize;
        float Vector1_8651797e3e304e108dbd25f9d5a426ba;
        float Vector1_593c5cea6c4a42e993ed03ced4685732;
        float4 Texture2D_8713F080_TexelSize;
        float Wind_Yaw;
        float Wind_Turbulence;
        float Wind_Wavelength;
        float Wind_Speed;
        float Wind_Ripples;
        float Wind_Intensity;
        float Wind_Blast;
        float Animation_Cutoff;
        float Distance_Fade_End;
        float Distance_Fade_Start;
        float4 Fade_Color;
        float _FadeBias;
        float2 _Thickness_Remap;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Point_Repeat);
        TEXTURE2D(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        SAMPLER(sampler_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        TEXTURE2D(Texture2D_E1B0D043);
        SAMPLER(samplerTexture2D_E1B0D043);
        TEXTURE2D(Texture2D_9DCAAA49);
        SAMPLER(samplerTexture2D_9DCAAA49);
        TEXTURE2D(Texture2D_A5E0646);
        SAMPLER(samplerTexture2D_A5E0646);
        TEXTURE2D(Texture2D_8713F080);
        SAMPLER(samplerTexture2D_8713F080);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 NDCPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 PixelPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0;
            #endif
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Preview_float(float In, out float Out)
        {
            Out = In;
        }
        
        void Unity_Dither_float(float In, float4 ScreenPosition, out float Out)
        {
            float2 uv = ScreenPosition.xy * _ScreenParams.xy;
            float DITHER_THRESHOLDS[16] =
            {
                1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
                13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
                4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
                16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
            };
            uint index = (uint(uv.x) % 4) * 4 + uint(uv.y) % 4;
            Out = In - DITHER_THRESHOLDS[index];
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float DepthOffset;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_E1B0D043);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.tex, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.samplerstate, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_R_4_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.r;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_G_5_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.g;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_B_6_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.b;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            Unity_Lerp_float3((_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.xyz), (float3(float4(0,0,0,0).xyz)), (float3(float4(0,0,0,0).xyz)), _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float;
            Unity_Preview_float(_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float;
            Unity_Dither_float((float1(float4(0,0,0,0).x)), float4(IN.NDCPosition.xy, 0, 0), _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float;
            Unity_Multiply_float_float(_Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            Unity_Lerp_float(_Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float, (float1(float4(0,0,0,0).x)), _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float;
            Unity_OneMinus_float((float1(float4(0,0,0,0).x)), _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #else
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float = Vector1_a5b8b09028ce49a39f4d090894c89e22;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_A5E0646);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.tex, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.samplerstate, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_R_4_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.r;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.g;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_B_6_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.b;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float = Vector1_8651797e3e304e108dbd25f9d5a426ba;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float, _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float, _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #else
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = 0;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float;
            Unity_OneMinus_float((float1(float4(0,0,0,0).x)), _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float = IN.ObjectSpacePosition.y;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float;
            Unity_Multiply_float_float(_Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float, 5, _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float;
            Unity_Saturate_float(_Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float, _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float = Vector1_593c5cea6c4a42e993ed03ced4685732;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float, _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float, _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #else
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = 1;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float;
            Unity_Minimum_float(_Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float, _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float, _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            Unity_Saturate_float(_Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float, _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_9DCAAA49);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.tex, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.samplerstate, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4);
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_R_4_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.r;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_G_5_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.g;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_B_6_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.b;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_A_7_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float = Vector1_a6983181c8dc4691ba6a28a34c4223a6;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.xyz), _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float, _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #else
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = float3(0, 0, 1);
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_8713F080);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.tex, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.samplerstate, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.r;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_G_5_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.g;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_B_6_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.b;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_A_7_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float2 _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2 = _Thickness_Remap;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float;
            Unity_Remap_float(_SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float, float2 (0, 1), _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2, _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            Unity_Lerp_float(_Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float, 1, (float1(float4(0,0,0,0).x)), _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #else
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = 0;
            #endif
            #endif
            surface.BaseColor = _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float;
            surface.AlphaClipThreshold = _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float;
            surface.DepthOffset = 0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float;
            surface.Occlusion = _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            surface.NormalTS = _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3;
            surface.TransmissionMask = 1;
            surface.Thickness = _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080305144)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        TransformWorldToObject(input.positionRWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #else
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingVisibility.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
#include "Assets/VladislavTsurikov/RendererStack/Shaders/Include/GPUInstancedIndirectInclude.cginc"
#pragma instancing_options procedural:setupGPUInstancedIndirect
#pragma multi_compile_instancing
            ENDHLSL
        }
        Pass
        {
            Name "ForwardDXR"
            Tags
            {
                "LightMode" = "ForwardDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DEPTHOFFSET_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma multi_compile MATERIAL_QUALITY_HIGH MATERIAL_QUALITY_MEDIUM MATERIAL_QUALITY_LOW
        
        #if defined(MATERIAL_QUALITY_HIGH)
            #define KEYWORD_PERMUTATION_0
        #elif defined(MATERIAL_QUALITY_MEDIUM)
            #define KEYWORD_PERMUTATION_1
        #else
            #define KEYWORD_PERMUTATION_2
        #endif
        
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD2
        #endif
        
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD2
        #endif
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_FORWARD
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        #define HAS_LIGHTLOOP 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D_TexelSize;
        float4 Texture2D_E1B0D043_TexelSize;
        float Vector1_a5b8b09028ce49a39f4d090894c89e22;
        float4 Texture2D_9DCAAA49_TexelSize;
        float Vector1_a6983181c8dc4691ba6a28a34c4223a6;
        float4 Texture2D_A5E0646_TexelSize;
        float Vector1_8651797e3e304e108dbd25f9d5a426ba;
        float Vector1_593c5cea6c4a42e993ed03ced4685732;
        float4 Texture2D_8713F080_TexelSize;
        float Wind_Yaw;
        float Wind_Turbulence;
        float Wind_Wavelength;
        float Wind_Speed;
        float Wind_Ripples;
        float Wind_Intensity;
        float Wind_Blast;
        float Animation_Cutoff;
        float Distance_Fade_End;
        float Distance_Fade_Start;
        float4 Fade_Color;
        float _FadeBias;
        float2 _Thickness_Remap;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Point_Repeat);
        TEXTURE2D(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        SAMPLER(sampler_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        TEXTURE2D(Texture2D_E1B0D043);
        SAMPLER(samplerTexture2D_E1B0D043);
        TEXTURE2D(Texture2D_9DCAAA49);
        SAMPLER(samplerTexture2D_9DCAAA49);
        TEXTURE2D(Texture2D_A5E0646);
        SAMPLER(samplerTexture2D_A5E0646);
        TEXTURE2D(Texture2D_8713F080);
        SAMPLER(samplerTexture2D_8713F080);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 NDCPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 PixelPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0;
            #endif
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Preview_float(float In, out float Out)
        {
            Out = In;
        }
        
        void Unity_Dither_float(float In, float4 ScreenPosition, out float Out)
        {
            float2 uv = ScreenPosition.xy * _ScreenParams.xy;
            float DITHER_THRESHOLDS[16] =
            {
                1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
                13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
                4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
                16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
            };
            uint index = (uint(uv.x) % 4) * 4 + uint(uv.y) % 4;
            Out = In - DITHER_THRESHOLDS[index];
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float DepthOffset;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_E1B0D043);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.tex, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.samplerstate, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_R_4_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.r;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_G_5_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.g;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_B_6_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.b;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            Unity_Lerp_float3((_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.xyz), (float3(float4(0,0,0,0).xyz)), (float3(float4(0,0,0,0).xyz)), _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float;
            Unity_Preview_float(_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float;
            Unity_Dither_float((float1(float4(0,0,0,0).x)), float4(IN.NDCPosition.xy, 0, 0), _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float;
            Unity_Multiply_float_float(_Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            Unity_Lerp_float(_Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float, (float1(float4(0,0,0,0).x)), _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float;
            Unity_OneMinus_float((float1(float4(0,0,0,0).x)), _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #else
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float = Vector1_a5b8b09028ce49a39f4d090894c89e22;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_A5E0646);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.tex, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.samplerstate, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_R_4_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.r;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.g;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_B_6_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.b;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float = Vector1_8651797e3e304e108dbd25f9d5a426ba;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float, _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float, _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #else
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = 0;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float;
            Unity_OneMinus_float((float1(float4(0,0,0,0).x)), _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float = IN.ObjectSpacePosition.y;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float;
            Unity_Multiply_float_float(_Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float, 5, _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float;
            Unity_Saturate_float(_Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float, _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float = Vector1_593c5cea6c4a42e993ed03ced4685732;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float, _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float, _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #else
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = 1;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float;
            Unity_Minimum_float(_Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float, _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float, _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            Unity_Saturate_float(_Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float, _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_9DCAAA49);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.tex, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.samplerstate, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4);
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_R_4_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.r;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_G_5_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.g;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_B_6_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.b;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_A_7_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float = Vector1_a6983181c8dc4691ba6a28a34c4223a6;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.xyz), _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float, _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #else
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = float3(0, 0, 1);
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_8713F080);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.tex, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.samplerstate, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.r;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_G_5_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.g;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_B_6_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.b;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_A_7_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float2 _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2 = _Thickness_Remap;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float;
            Unity_Remap_float(_SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float, float2 (0, 1), _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2, _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            Unity_Lerp_float(_Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float, 1, (float1(float4(0,0,0,0).x)), _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #else
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = 0;
            #endif
            #endif
            surface.BaseColor = _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float;
            surface.AlphaClipThreshold = _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float;
            surface.DepthOffset = 0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float;
            surface.Occlusion = _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            surface.NormalTS = _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3;
            surface.TransmissionMask = 1;
            surface.Thickness = _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080305144)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        TransformWorldToObject(input.positionRWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #else
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingForward.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
#include "Assets/VladislavTsurikov/RendererStack/Shaders/Include/GPUInstancedIndirectInclude.cginc"
#pragma instancing_options procedural:setupGPUInstancedIndirect
#pragma multi_compile_instancing
            ENDHLSL
        }
        Pass
        {
            Name "GBufferDXR"
            Tags
            {
                "LightMode" = "GBufferDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma multi_compile _ MINIMAL_GBUFFER
        #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DEPTHOFFSET_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma multi_compile _ DEBUG_DISPLAY
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma multi_compile _ LIGHTMAP_ON
        #pragma multi_compile _ DIRLIGHTMAP_COMBINED
        #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile_raytracing PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
        #pragma multi_compile _ DYNAMICLIGHTMAP_ON
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma multi_compile MATERIAL_QUALITY_HIGH MATERIAL_QUALITY_MEDIUM MATERIAL_QUALITY_LOW
        
        #if defined(MATERIAL_QUALITY_HIGH)
            #define KEYWORD_PERMUTATION_0
        #elif defined(MATERIAL_QUALITY_MEDIUM)
            #define KEYWORD_PERMUTATION_1
        #else
            #define KEYWORD_PERMUTATION_2
        #endif
        
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD2
        #endif
        
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD2
        #endif
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_RAYTRACING_GBUFFER
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_RAYTRACED
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D_TexelSize;
        float4 Texture2D_E1B0D043_TexelSize;
        float Vector1_a5b8b09028ce49a39f4d090894c89e22;
        float4 Texture2D_9DCAAA49_TexelSize;
        float Vector1_a6983181c8dc4691ba6a28a34c4223a6;
        float4 Texture2D_A5E0646_TexelSize;
        float Vector1_8651797e3e304e108dbd25f9d5a426ba;
        float Vector1_593c5cea6c4a42e993ed03ced4685732;
        float4 Texture2D_8713F080_TexelSize;
        float Wind_Yaw;
        float Wind_Turbulence;
        float Wind_Wavelength;
        float Wind_Speed;
        float Wind_Ripples;
        float Wind_Intensity;
        float Wind_Blast;
        float Animation_Cutoff;
        float Distance_Fade_End;
        float Distance_Fade_Start;
        float4 Fade_Color;
        float _FadeBias;
        float2 _Thickness_Remap;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Point_Repeat);
        TEXTURE2D(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        SAMPLER(sampler_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        TEXTURE2D(Texture2D_E1B0D043);
        SAMPLER(samplerTexture2D_E1B0D043);
        TEXTURE2D(Texture2D_9DCAAA49);
        SAMPLER(samplerTexture2D_9DCAAA49);
        TEXTURE2D(Texture2D_A5E0646);
        SAMPLER(samplerTexture2D_A5E0646);
        TEXTURE2D(Texture2D_8713F080);
        SAMPLER(samplerTexture2D_8713F080);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/Deferred/RaytracingIntersectonGBuffer.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/StandardLit/StandardLit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 NDCPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 PixelPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0;
            #endif
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Preview_float(float In, out float Out)
        {
            Out = In;
        }
        
        void Unity_Dither_float(float In, float4 ScreenPosition, out float Out)
        {
            float2 uv = ScreenPosition.xy * _ScreenParams.xy;
            float DITHER_THRESHOLDS[16] =
            {
                1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
                13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
                4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
                16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
            };
            uint index = (uint(uv.x) % 4) * 4 + uint(uv.y) % 4;
            Out = In - DITHER_THRESHOLDS[index];
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float DepthOffset;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_E1B0D043);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.tex, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.samplerstate, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_R_4_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.r;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_G_5_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.g;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_B_6_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.b;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            Unity_Lerp_float3((_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.xyz), (float3(float4(0,0,0,0).xyz)), (float3(float4(0,0,0,0).xyz)), _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float;
            Unity_Preview_float(_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float;
            Unity_Dither_float((float1(float4(0,0,0,0).x)), float4(IN.NDCPosition.xy, 0, 0), _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float;
            Unity_Multiply_float_float(_Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            Unity_Lerp_float(_Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float, (float1(float4(0,0,0,0).x)), _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float;
            Unity_OneMinus_float((float1(float4(0,0,0,0).x)), _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #else
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float = Vector1_a5b8b09028ce49a39f4d090894c89e22;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_A5E0646);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.tex, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.samplerstate, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_R_4_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.r;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.g;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_B_6_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.b;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float = Vector1_8651797e3e304e108dbd25f9d5a426ba;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float, _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float, _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #else
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = 0;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float;
            Unity_OneMinus_float((float1(float4(0,0,0,0).x)), _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float = IN.ObjectSpacePosition.y;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float;
            Unity_Multiply_float_float(_Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float, 5, _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float;
            Unity_Saturate_float(_Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float, _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float = Vector1_593c5cea6c4a42e993ed03ced4685732;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float, _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float, _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #else
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = 1;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float;
            Unity_Minimum_float(_Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float, _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float, _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            Unity_Saturate_float(_Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float, _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_9DCAAA49);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.tex, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.samplerstate, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4);
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_R_4_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.r;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_G_5_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.g;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_B_6_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.b;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_A_7_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float = Vector1_a6983181c8dc4691ba6a28a34c4223a6;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.xyz), _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float, _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #else
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = float3(0, 0, 1);
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_8713F080);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.tex, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.samplerstate, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.r;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_G_5_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.g;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_B_6_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.b;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_A_7_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float2 _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2 = _Thickness_Remap;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float;
            Unity_Remap_float(_SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float, float2 (0, 1), _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2, _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            Unity_Lerp_float(_Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float, 1, (float1(float4(0,0,0,0).x)), _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #else
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = 0;
            #endif
            #endif
            surface.BaseColor = _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float;
            surface.AlphaClipThreshold = _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float;
            surface.DepthOffset = 0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float;
            surface.Occlusion = _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            surface.NormalTS = _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3;
            surface.TransmissionMask = 1;
            surface.Thickness = _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080305144)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        TransformWorldToObject(input.positionRWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #else
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRaytracingGBuffer.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
#include "Assets/VladislavTsurikov/RendererStack/Shaders/Include/GPUInstancedIndirectInclude.cginc"
#pragma instancing_options procedural:setupGPUInstancedIndirect
#pragma multi_compile_instancing
            ENDHLSL
        }
        Pass
        {
            Name "DebugDXR"
            Tags
            {
                "LightMode" = "DebugDXR"
            }
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        	// GraphIncludes: <None>
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassRayTracingDebug.hlsl"
        
#include "Assets/VladislavTsurikov/RendererStack/Shaders/Include/GPUInstancedIndirectInclude.cginc"
#pragma instancing_options procedural:setupGPUInstancedIndirect
#pragma multi_compile_instancing
            ENDHLSL
        }
        Pass
        {
            Name "PathTracingDXR"
            Tags
            {
                "LightMode" = "PathTracingDXR"
            }
        
            // Render State
            // RenderState: <None>
        
            // Debug
            // <None>
        
            // --------------------------------------------------
            // Pass
        
            HLSLPROGRAM
        
            // Pragmas
            #pragma target 5.0
        #pragma raytracing surface_shader
        #pragma only_renderers d3d11 xboxseries ps5
        
            // Keywords
            #pragma shader_feature_local _ _ALPHATEST_ON
        #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
        #pragma shader_feature_local _ _DOUBLESIDED_ON
        #pragma shader_feature_local_fragment _ _DEPTHOFFSET_ON
        #pragma shader_feature_local _ _ADD_PRECOMPUTED_VELOCITY
        #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
        #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT
        #pragma shader_feature_local_fragment _ _DISABLE_DECALS
        #pragma shader_feature_local_raytracing _ _DISABLE_DECALS
        #pragma shader_feature_local_fragment _ _DISABLE_SSR
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR
        #pragma shader_feature_local_fragment _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local_raytracing _ _DISABLE_SSR_TRANSPARENT
        #pragma shader_feature_local _ _REFRACTION_PLANE _REFRACTION_SPHERE _REFRACTION_THIN
            #pragma multi_compile MATERIAL_QUALITY_HIGH MATERIAL_QUALITY_MEDIUM MATERIAL_QUALITY_LOW
        
        #if defined(MATERIAL_QUALITY_HIGH)
            #define KEYWORD_PERMUTATION_0
        #elif defined(MATERIAL_QUALITY_MEDIUM)
            #define KEYWORD_PERMUTATION_1
        #else
            #define KEYWORD_PERMUTATION_2
        #endif
        
        
            // For custom interpolators to inject a substruct definition before FragInputs definition,
            // allowing for FragInputs to capture CI's intended for ShaderGraph's SDI.
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorPreInclude' */
        
        
            // TODO: Merge FragInputsVFX substruct with CustomInterpolators.
        	#ifdef HAVE_VFX_MODIFICATION
        	struct FragInputsVFX
            {
                /* WARNING: $splice Could not find named fragment 'FragInputsVFX' */
            };
            #endif
        
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl" // Required by Tessellation.hlsl
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl" // Required to be include before we include properties as it define DECLARE_STACK_CB
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphHeader.hlsl" // Need to be here for Gradient struct definition
        
            // --------------------------------------------------
            // Defines
        
            // Attribute
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_NORMAL
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TANGENT
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define ATTRIBUTES_NEED_TEXCOORD2
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_POSITION_WS
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TANGENT_TO_WORLD
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define VARYINGS_NEED_TEXCOORD2
        #endif
        
        
        
            //Strip down the FragInputs.hlsl (on graphics), so we can only optimize the interpolators we use.
            //if by accident something requests contents of FragInputs.hlsl, it will be caught as a compiler error
            //Frag inputs stripping is only enabled when FRAG_INPUTS_ENABLE_STRIPPING is set
            #if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            #define FRAG_INPUTS_ENABLE_STRIPPING
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD0
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define FRAG_INPUTS_USE_TEXCOORD2
        #endif
        
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
        
        
        
            #define SHADERPASS SHADERPASS_PATH_TRACING
        #define SHADOW_LOW
        #define RAYTRACING_SHADER_GRAPH_DEFAULT
        #define HAS_LIGHTLOOP 1
        
        
            // Following two define are a workaround introduce in 10.1.x for RaytracingQualityNode
            // The ShaderGraph don't support correctly migration of this node as it serialize all the node data
            // in the json file making it impossible to uprgrade. Until we get a fix, we do a workaround here
            // to still allow us to rename the field and keyword of this node without breaking existing code.
            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
            #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
            #define RAYTRACING_SHADER_GRAPH_LOW
            #endif
            // end
        
            #ifndef SHADER_UNLIT
            // We need isFrontFace when using double sided - it is not required for unlit as in case of unlit double sided only drive the cullmode
            // VARYINGS_NEED_CULLFACE can be define by VaryingsMeshToPS.FaceSign input if a IsFrontFace Node is included in the shader graph.
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif
        
            // Specific Material Define
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _MATERIAL_FEATURE_TRANSMISSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _AMBIENT_OCCLUSION 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _SPECULAR_OCCLUSION_FROM_AO 1
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        #define _ENERGY_CONSERVING_SPECULAR 1
        #endif
        
        
        // If we use subsurface scattering, enable output split lighting (for forward pass)
        #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
            #define OUTPUT_SPLIT_LIGHTING
        #endif
        
        // This shader support recursive rendering for raytracing
        #define HAVE_RECURSIVE_RENDERING
        
        // In Path Tracing, For all single-sided, refractive materials, we want to force a thin refraction model
        #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
        #endif
            // Caution: we can use the define SHADER_UNLIT onlit after the above Material include as it is the Unlit template who define it
        
            // To handle SSR on transparent correctly with a possibility to enable/disable it per framesettings
            // we should have a code like this:
            // if !defined(_DISABLE_SSR_TRANSPARENT)
            // pragma multi_compile _ WRITE_NORMAL_BUFFER
            // endif
            // i.e we enable the multicompile only if we can receive SSR or not, and then C# code drive
            // it based on if SSR transparent in frame settings and not (and stripper can strip it).
            // this is currently not possible with our current preprocessor as _DISABLE_SSR_TRANSPARENT is a keyword not a define
            // so instead we used this and chose to pay the extra cost of normal write even if SSR transaprent is disabled.
            // Ideally the shader graph generator should handle it but condition below can't be handle correctly for now.
            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif
        
            #ifndef DEBUG_DISPLAY
                // In case of opaque we don't want to perform the alpha test, it is done in depth prepass and we use depth equal for ztest (setup from UI)
                // Don't do it with debug display mode as it is possible there is no depth prepass in this case
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif
        
            // Define _DEFERRED_CAPABLE_MATERIAL for shader capable to run in deferred pass
            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            // Translate transparent motion vector define
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
        
            // -- Graph Properties
            CBUFFER_START(UnityPerMaterial)
        float4 _DiffusionProfileAsset;
        float _DiffusionProfileHash;
        float4 _SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D_TexelSize;
        float4 Texture2D_E1B0D043_TexelSize;
        float Vector1_a5b8b09028ce49a39f4d090894c89e22;
        float4 Texture2D_9DCAAA49_TexelSize;
        float Vector1_a6983181c8dc4691ba6a28a34c4223a6;
        float4 Texture2D_A5E0646_TexelSize;
        float Vector1_8651797e3e304e108dbd25f9d5a426ba;
        float Vector1_593c5cea6c4a42e993ed03ced4685732;
        float4 Texture2D_8713F080_TexelSize;
        float Wind_Yaw;
        float Wind_Turbulence;
        float Wind_Wavelength;
        float Wind_Speed;
        float Wind_Ripples;
        float Wind_Intensity;
        float Wind_Blast;
        float Animation_Cutoff;
        float Distance_Fade_End;
        float Distance_Fade_Start;
        float4 Fade_Color;
        float _FadeBias;
        float2 _Thickness_Remap;
        float4 _EmissionColor;
        float _UseShadowThreshold;
        float4 _DoubleSidedConstants;
        float _BlendMode;
        float _EnableBlendModePreserveSpecularLighting;
        float _RayTracing;
        float _RefractionModel;
        CBUFFER_END
        
        
        // Object and Global properties
        SAMPLER(SamplerState_Linear_Repeat);
        SAMPLER(SamplerState_Point_Repeat);
        TEXTURE2D(_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        SAMPLER(sampler_SampleTexture2DLOD_4ce76fe7821749c5a93282810d6e42f2_Texture_1_Texture2D);
        TEXTURE2D(Texture2D_E1B0D043);
        SAMPLER(samplerTexture2D_E1B0D043);
        TEXTURE2D(Texture2D_9DCAAA49);
        SAMPLER(samplerTexture2D_9DCAAA49);
        TEXTURE2D(Texture2D_A5E0646);
        SAMPLER(samplerTexture2D_A5E0646);
        TEXTURE2D(Texture2D_8713F080);
        SAMPLER(samplerTexture2D_8713F080);
        
            // -- Property used by ScenePickingPass
            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif
        
            // -- Properties used by SceneSelectionPass
            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif
        
            // Includes
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingMacros.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracingLightLoop.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingIntersection.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitPathTracing.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RayTracingCommon.hlsl"
        #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"
        	// GraphIncludes: <None>
        
            // --------------------------------------------------
            // Structs and Packing
        
            struct SurfaceDescriptionInputs
        {
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 TangentSpaceNormal;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float3 ObjectSpacePosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 NDCPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float2 PixelPosition;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
             float4 uv0;
            #endif
        };
        
            //Interpolator Packs: <None>
        
            // --------------------------------------------------
            // Graph
        
        
            // Graph Functions
            
        void Unity_Lerp_float3(float3 A, float3 B, float3 T, out float3 Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_Preview_float(float In, out float Out)
        {
            Out = In;
        }
        
        void Unity_Dither_float(float In, float4 ScreenPosition, out float Out)
        {
            float2 uv = ScreenPosition.xy * _ScreenParams.xy;
            float DITHER_THRESHOLDS[16] =
            {
                1.0 / 17.0,  9.0 / 17.0,  3.0 / 17.0, 11.0 / 17.0,
                13.0 / 17.0,  5.0 / 17.0, 15.0 / 17.0,  7.0 / 17.0,
                4.0 / 17.0, 12.0 / 17.0,  2.0 / 17.0, 10.0 / 17.0,
                16.0 / 17.0,  8.0 / 17.0, 14.0 / 17.0,  6.0 / 17.0
            };
            uint index = (uint(uv.x) % 4) * 4 + uint(uv.y) % 4;
            Out = In - DITHER_THRESHOLDS[index];
        }
        
        void Unity_Multiply_float_float(float A, float B, out float Out)
        {
            Out = A * B;
        }
        
        void Unity_Lerp_float(float A, float B, float T, out float Out)
        {
            Out = lerp(A, B, T);
        }
        
        void Unity_OneMinus_float(float In, out float Out)
        {
            Out = 1 - In;
        }
        
        void Unity_Saturate_float(float In, out float Out)
        {
            Out = saturate(In);
        }
        
        void Unity_Minimum_float(float A, float B, out float Out)
        {
            Out = min(A, B);
        };
        
        void Unity_NormalStrength_float(float3 In, float Strength, out float3 Out)
        {
            Out = float3(In.rg * Strength, lerp(1, In.b, saturate(Strength)));
        }
        
        void Unity_Remap_float(float In, float2 InMinMax, float2 OutMinMax, out float Out)
        {
            Out = OutMinMax.x + (In - InMinMax.x) * (OutMinMax.y - OutMinMax.x) / (InMinMax.y - InMinMax.x);
        }
        
            // Graph Vertex
            // GraphVertex: <None>
        
            // Graph Pixel
            struct SurfaceDescription
        {
            float3 BaseColor;
            float3 Emission;
            float Alpha;
            float AlphaClipThreshold;
            float DepthOffset;
            float3 BentNormal;
            float Smoothness;
            float Occlusion;
            float3 NormalTS;
            float TransmissionMask;
            float Thickness;
            float DiffusionProfileHash;
        };
        
        SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
        {
            SurfaceDescription surface = (SurfaceDescription)0;
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_E1B0D043);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.tex, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.samplerstate, _Property_ebe8113d0fdb45e5ae4d50ab8278f9a8_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_R_4_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.r;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_G_5_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.g;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_B_6_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.b;
            float _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float = _SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            Unity_Lerp_float3((_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_RGBA_0_Vector4.xyz), (float3(float4(0,0,0,0).xyz)), (float3(float4(0,0,0,0).xyz)), _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float;
            Unity_Preview_float(_SampleTexture2D_e850feac85534e0e8af4834cbbb36b9b_A_7_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float;
            Unity_Dither_float((float1(float4(0,0,0,0).x)), float4(IN.NDCPosition.xy, 0, 0), _Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float;
            Unity_Multiply_float_float(_Dither_5d05078f8fa245c0a5277a81b0dd1421_Out_2_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            Unity_Lerp_float(_Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_6ee437cb601340c5842493beac01bf9d_Out_2_Float, (float1(float4(0,0,0,0).x)), _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float;
            Unity_OneMinus_float((float1(float4(0,0,0,0).x)), _OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_bc1c59553a0d49a8b3c1440af6d56983_Out_1_Float, _Preview_5a18074d42f44ceab38031076ebc548b_Out_1_Float, _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Lerp_d7516030dfd54009b5f17fea1f360f0f_Out_3_Float;
            #else
            float _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float = _Multiply_58a6d5312cd24489a63a3bb352f1554e_Out_2_Float;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float = Vector1_a5b8b09028ce49a39f4d090894c89e22;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_A5E0646);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.tex, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.samplerstate, _Property_ea9ec22710bd44d497d7185054bf6f59_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_R_4_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.r;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.g;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_B_6_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.b;
            float _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float = _SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float = Vector1_8651797e3e304e108dbd25f9d5a426ba;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_A_7_Float, _Property_b644473d3cd24e3080f2805b814e9370_Out_0_Float, _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = _Multiply_82755e28ff5447ea8b0979444e091870_Out_2_Float;
            #else
            float _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float = 0;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float;
            Unity_OneMinus_float((float1(float4(0,0,0,0).x)), _OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float = IN.ObjectSpacePosition.y;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float;
            Unity_Multiply_float_float(_Swizzle_3f13ae5c83cb4d0dabe8c57678c95c87_Out_1_Float, 5, _Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float;
            Unity_Saturate_float(_Multiply_61bed4ffdc914aa19029a6dff14fc349_Out_2_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float;
            Unity_Multiply_float_float(_OneMinus_8b31e3c981894d1487943b02b2461087_Out_1_Float, _Saturate_340f1dcefb3c4dd5a36b521891313594_Out_1_Float, _Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float = Vector1_593c5cea6c4a42e993ed03ced4685732;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            Unity_Multiply_float_float(_SampleTexture2D_a71cb3893e594bb4ae643bfdbafd7a75_G_5_Float, _Property_eccfcf6d02724e359421ec0c24a4bdc9_Out_0_Float, _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = _Multiply_814edc269e914fc7962fd3ef6c4ef878_Out_2_Float;
            #else
            float _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float = 1;
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float;
            Unity_Minimum_float(_Multiply_ab672229c7d4462097762e21a35d7447_Out_2_Float, _MaterialQuality_d837a871131d4c33ac65c9e49a35674d_Out_0_Float, _Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            Unity_Saturate_float(_Minimum_3613e56724c24e26af53cf1552c59b7b_Out_2_Float, _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_9DCAAA49);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.tex, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.samplerstate, _Property_d412938b470441b8a01c53da31316954_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.rgb = UnpackNormal(_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4);
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_R_4_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.r;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_G_5_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.g;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_B_6_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.b;
            float _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_A_7_Float = _SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float = Vector1_a6983181c8dc4691ba6a28a34c4223a6;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float3 _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            Unity_NormalStrength_float((_SampleTexture2D_a3e200ddba244754be69131276a5bbe7_RGBA_0_Vector4.xyz), _Property_3153e067a028407782c7fc60eec8a1ea_Out_0_Float, _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = _NormalStrength_7872635fbdcc481da8bddb0ff3cdd44e_Out_2_Vector3;
            #else
            float3 _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3 = float3(0, 0, 1);
            #endif
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            UnityTexture2D _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D = UnityBuildTexture2DStructNoScale(Texture2D_8713F080);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float4 _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4 = SAMPLE_TEXTURE2D(_Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.tex, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.samplerstate, _Property_7fa32f2ccbdf4f7da8bdf1743d25c366_Out_0_Texture2D.GetTransformedUV(IN.uv0.xy) );
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.r;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_G_5_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.g;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_B_6_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.b;
            float _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_A_7_Float = _SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_RGBA_0_Vector4.a;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float2 _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2 = _Thickness_Remap;
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float;
            Unity_Remap_float(_SampleTexture2D_587426f178fe4e2c8e207f2328c91ec3_R_4_Float, float2 (0, 1), _Property_c5bf8a8d3e1f451597b233a49d27ef9c_Out_0_Vector2, _Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            float _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            Unity_Lerp_float(_Remap_d7656519201f4b5f9be7ba9a18c677a0_Out_3_Float, 1, (float1(float4(0,0,0,0).x)), _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float);
            #endif
            #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
            #if defined(MATERIAL_QUALITY_HIGH)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #elif defined(MATERIAL_QUALITY_MEDIUM)
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = _Lerp_4810ef08cf744c12aee7a9f6a9f5ead6_Out_3_Float;
            #else
            float _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float = 0;
            #endif
            #endif
            surface.BaseColor = _Lerp_52d649b2ebf24def9872029728fdbb7b_Out_3_Vector3;
            surface.Emission = float3(0, 0, 0);
            surface.Alpha = _MaterialQuality_832d2ef4a2c94c4c901431c14602cda0_Out_0_Float;
            surface.AlphaClipThreshold = _Property_8692df6bcd9a416aad9f3a2dd8a2a1d0_Out_0_Float;
            surface.DepthOffset = 0;
            surface.BentNormal = IN.TangentSpaceNormal;
            surface.Smoothness = _MaterialQuality_cf847bdc2b7e456fafe10743d1311e40_Out_0_Float;
            surface.Occlusion = _Saturate_8434723f4800478bbae64c39e01e3281_Out_1_Float;
            surface.NormalTS = _MaterialQuality_a64df2d5eb4f4ab6a1820a9a93ebee19_Out_0_Vector3;
            surface.TransmissionMask = 1;
            surface.Thickness = _MaterialQuality_2ae4ace1cb034b239a8e5e4aa59ad9be_Out_0_Float;
            surface.DiffusionProfileHash = ((asuint(_DiffusionProfileHash) != 0) ? _DiffusionProfileHash : asfloat(uint(1080305144)));
            return surface;
        }
        
            // --------------------------------------------------
            // Build Graph Inputs
            #ifdef HAVE_VFX_MODIFICATION
            #define VFX_SRP_ATTRIBUTES AttributesMesh
            #define VaryingsMeshType VaryingsMeshToPS
            #define VFX_SRP_VARYINGS VaryingsMeshType
            #define VFX_SRP_SURFACE_INPUTS FragInputs
            #endif
            SurfaceDescriptionInputs FragInputsToSurfaceDescriptionInputs(FragInputs input, float3 viewWS)
        {
            SurfaceDescriptionInputs output;
            ZERO_INITIALIZE(SurfaceDescriptionInputs, output);
        
            #if defined(SHADER_STAGE_RAY_TRACING)
            #else
            #endif
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.TangentSpaceNormal =                         float3(0.0f, 0.0f, 1.0f);
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.ObjectSpacePosition =                        TransformWorldToObject(input.positionRWS);
        #endif
        
        
        #if UNITY_UV_STARTS_AT_TOP
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x < 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #else
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.PixelPosition = float2(input.positionPixel.x, (_ProjectionParams.x > 0) ? (_ScreenParams.y - input.positionPixel.y) : input.positionPixel.y);
        #endif
        
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition = output.PixelPosition.xy / _ScreenParams.xy;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.NDCPosition.y = 1.0f - output.NDCPosition.y;
        #endif
        
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        output.uv0 =                                        input.texCoord0;
        #endif
        
        
            // splice point to copy frag inputs custom interpolator pack into the SDI
            /* WARNING: $splice Could not find named fragment 'CustomInterpolatorCopyToSDI' */
        
            return output;
        }
        
            // --------------------------------------------------
            // Build Surface Data (Specific Material)
        
        void ApplyDecalToSurfaceDataNoNormal(DecalSurfaceData decalSurfaceData, inout SurfaceData surfaceData);
        
        void ApplyDecalAndGetNormal(FragInputs fragInputs, PositionInputs posInput, SurfaceDescription surfaceDescription,
            inout SurfaceData surfaceData)
        {
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
        #ifdef DECAL_NORMAL_BLENDING
            // SG nodes don't ouptut surface gradients, so if decals require surf grad blending, we have to convert
            // the normal to gradient before applying the decal. We then have to resolve the gradient back to world space
            float3 normalTS;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(surfaceDescription.NormalTS,
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);
        #endif
        
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        
            GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
        #else
            // normal delivered to master node
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        GetNormalWS(fragInputs, surfaceDescription.NormalTS, surfaceData.normalWS, doubleSidedConstants);
        #endif
        
        
            #if HAVE_DECALS
            if (_EnableDecals)
            {
                float alpha = 1.0;
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        alpha = surfaceDescription.Alpha;
        #endif
        
        
                // Both uses and modifies 'surfaceData.normalWS'.
                DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
            }
            #endif
        #endif
        }
        void BuildSurfaceData(FragInputs fragInputs, inout SurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
        {
            ZERO_INITIALIZE(SurfaceData, surfaceData);
        
            // specularOcclusion need to be init ahead of decal to quiet the compiler that modify the SurfaceData struct
            // however specularOcclusion can come from the graph, so need to be init here so it can be override.
            surfaceData.specularOcclusion = 1.0;
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.baseColor =                 surfaceDescription.BaseColor;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.perceptualSmoothness =      surfaceDescription.Smoothness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.ambientOcclusion =          surfaceDescription.Occlusion;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.transmissionMask =          surfaceDescription.TransmissionMask;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.thickness =                 surfaceDescription.Thickness;
        #endif
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        surfaceData.diffusionProfileHash =      asuint(surfaceDescription.DiffusionProfileHash);
        #endif
        
        
            #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                if (_EnableSSRefraction)
                {
        
                    surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                    surfaceDescription.Alpha = 1.0;
                }
                else
                {
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                    surfaceDescription.Alpha = 1.0;
                }
            #else
                surfaceData.ior = 1.0;
                surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                surfaceData.atDistance = 1.0;
                surfaceData.transmittanceMask = 0.0;
            #endif
        
            // These static material feature allow compile time optimization
            surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;
            #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
            #endif
        
            #ifdef _MATERIAL_FEATURE_TRANSMISSION
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
            #endif
        
            #ifdef _MATERIAL_FEATURE_ANISOTROPY
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
        
                // Initialize the normal to something non-zero to avoid a div-zero warning for anisotropy.
                surfaceData.normalWS = float3(0, 1, 0);
            #endif
        
            #ifdef _MATERIAL_FEATURE_IRIDESCENCE
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
            #endif
        
            #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
            #endif
        
            #ifdef _MATERIAL_FEATURE_CLEAR_COAT
                surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
            #endif
        
            #if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                // Require to have setup baseColor
                // Reproduce the energy conservation done in legacy Unity. Not ideal but better for compatibility and users can unchek it
                surfaceData.baseColor *= (1.0 - Max3(surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b));
            #endif
        
            float3 doubleSidedConstants = GetDoubleSidedConstants();
        
            ApplyDecalAndGetNormal(fragInputs, posInput, surfaceDescription, surfaceData);
        
            surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
        
            surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz);    // The tangent is not normalize in tangentToWorld for mikkt. TODO: Check if it expected that we normalize with Morten. Tag: SURFACE_GRADIENT
        
        
            bentNormalWS = surfaceData.normalWS;
        
            surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);
        
            #ifdef DEBUG_DISPLAY
                if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                {
                    // TODO: need to update mip info
                    surfaceData.metallic = 0;
                }
        
                // We need to call ApplyDebugToSurfaceData after filling the surfarcedata and before filling builtinData
                // as it can modify attribute use for static lighting
                ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
            #endif
        
            // By default we use the ambient occlusion with Tri-ace trick (apply outside) for specular occlusion.
            // If user provide bent normal then we process a better term
            #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                // Just use the value passed through via the slot (not active otherwise)
            #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                // If we have bent normal and ambient occlusion, process a specular occlusion
                surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
            #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
            #endif
        
            #if defined(_ENABLE_GEOMETRIC_SPECULAR_AA) && !defined(SHADER_STAGE_RAY_TRACING)
                surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
            #endif
        }
        
            // --------------------------------------------------
            // Get Surface And BuiltinData
        
            void GetSurfaceAndBuiltinData(FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData RAY_TRACING_OPTIONAL_PARAMETERS)
            {
                // Don't dither if displaced tessellation (we're fading out the displacement instead to match the next LOD)
                #if !defined(SHADER_STAGE_RAY_TRACING) && !defined(_TESSELLATION_DISPLACEMENT)
                #ifdef LOD_FADE_CROSSFADE // enable dithering LOD transition if user select CrossFade transition in LOD group
                LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
                #endif
                #endif
        
                #ifndef SHADER_UNLIT
                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
        
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants); // Apply double sided flip on the vertex normal
                #endif // SHADER_UNLIT
        
                SurfaceDescriptionInputs surfaceDescriptionInputs = FragInputsToSurfaceDescriptionInputs(fragInputs, V);
        
                #if defined(HAVE_VFX_MODIFICATION)
                GraphProperties properties;
                ZERO_INITIALIZE(GraphProperties, properties);
        
                GetElementPixelProperties(fragInputs, properties);
        
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs, properties);
                #else
                SurfaceDescription surfaceDescription = SurfaceDescriptionFunction(surfaceDescriptionInputs);
                #endif
        
                // Perform alpha test very early to save performance (a killed pixel will not sample textures)
                // TODO: split graph evaluation to grab just alpha dependencies first? tricky..
                #ifdef _ALPHATEST_ON
                    float alphaCutoff = surfaceDescription.AlphaClipThreshold;
                    #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
                    // The TransparentDepthPrepass is also used with SSR transparent.
                    // If an artists enable transaprent SSR but not the TransparentDepthPrepass itself, then we use AlphaClipThreshold
                    // otherwise if TransparentDepthPrepass is enabled we use AlphaClipThresholdDepthPrepass
                    #elif SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_POSTPASS
                    // DepthPostpass always use its own alpha threshold
                    alphaCutoff = surfaceDescription.AlphaClipThresholdDepthPostpass;
                    #elif (SHADERPASS == SHADERPASS_SHADOWS) || (SHADERPASS == SHADERPASS_RAYTRACING_VISIBILITY)
                    // If use shadow threshold isn't enable we don't allow any test
                    #endif
        
                    GENERIC_ALPHA_TEST(surfaceDescription.Alpha, alphaCutoff);
                #endif
        
                #if !defined(SHADER_STAGE_RAY_TRACING) && _DEPTHOFFSET_ON
                ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
                #endif
        
                #ifndef SHADER_UNLIT
                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD1
                    float4 lightmapTexCoord1 = fragInputs.texCoord1;
                #else
                    float4 lightmapTexCoord1 = float4(0,0,0,0);
                #endif
        
                #ifdef FRAG_INPUTS_USE_TEXCOORD2
                    float4 lightmapTexCoord2 = fragInputs.texCoord2;
                #else
                    float4 lightmapTexCoord2 = float4(0,0,0,0);
                #endif
        
                // Builtin Data
                // For back lighting we use the oposite vertex normal
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], lightmapTexCoord1, lightmapTexCoord2, builtinData);
        
                #else
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData);
        
                ZERO_BUILTIN_INITIALIZE(builtinData); // No call to InitBuiltinData as we don't have any lighting
                builtinData.opacity = surfaceDescription.Alpha;
        
                #if defined(DEBUG_DISPLAY)
                    // Light Layers are currently not used for the Unlit shader (because it is not lit)
                    // But Unlit objects do cast shadows according to their rendering layer mask, which is what we want to
                    // display in the light layers visualization mode, therefore we need the renderingLayers
                    builtinData.renderingLayers = GetMeshRenderingLightLayer();
                #endif
        
                #endif // SHADER_UNLIT
        
                #ifdef _ALPHATEST_ON
                    // Used for sharpening by alpha to mask - Alpha to covertage is only used with depth only and forward pass (no shadow pass, no transparent pass)
                    builtinData.alphaClipTreshold = alphaCutoff;
                #endif
        
                // override sampleBakedGI - not used by Unlit
        
        #if defined(KEYWORD_PERMUTATION_0) || defined(KEYWORD_PERMUTATION_1) || defined(KEYWORD_PERMUTATION_2)
        builtinData.emissiveColor = surfaceDescription.Emission;
        #endif
        
        
                // Note this will not fully work on transparent surfaces (can check with _SURFACE_TYPE_TRANSPARENT define)
                // We will always overwrite vt feeback with the nearest. So behind transparent surfaces vt will not be resolved
                // This is a limitation of the current MRT approach.
                #ifdef UNITY_VIRTUAL_TEXTURING
                #endif
        
                #if _DEPTHOFFSET_ON
                builtinData.depthOffset = surfaceDescription.DepthOffset;
                #endif
        
                // TODO: We should generate distortion / distortionBlur for non distortion pass
                #if (SHADERPASS == SHADERPASS_DISTORTION)
                builtinData.distortion = surfaceDescription.Distortion;
                builtinData.distortionBlur = surfaceDescription.DistortionBlur;
                #endif
        
                #ifndef SHADER_UNLIT
                // PostInitBuiltinData call ApplyDebugToBuiltinData
                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
                #else
                ApplyDebugToBuiltinData(builtinData);
                #endif
        
                RAY_TRACING_OPTIONAL_ALPHA_TEST_PASS
            }
        
            // --------------------------------------------------
            // Main
        
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPassPathTracing.hlsl"
        
            // --------------------------------------------------
            // Visual Effect Vertex Invocations
        
        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif
        
#include "Assets/VladislavTsurikov/RendererStack/Shaders/Include/GPUInstancedIndirectInclude.cginc"
#pragma instancing_options procedural:setupGPUInstancedIndirect
#pragma multi_compile_instancing
            ENDHLSL
        }
    }
    CustomEditor "UnityEditor.ShaderGraph.GenericShaderGraphMaterialGUI"
    CustomEditorForRenderPipeline "Rendering.HighDefinition.LitShaderGraphGUI" "UnityEngine.Rendering.HighDefinition.HDRenderPipelineAsset"
    FallBack "Hidden/Shader Graph/FallbackError"
}
